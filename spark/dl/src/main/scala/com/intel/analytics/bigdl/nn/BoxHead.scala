/*
 * Copyright 2016 The BigDL Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.intel.analytics.bigdl.nn

import breeze.linalg.dim
import com.intel.analytics.bigdl.Module
import com.intel.analytics.bigdl.nn.abstractnn.{AbstractModule, Activity}
import com.intel.analytics.bigdl.tensor.Tensor
import com.intel.analytics.bigdl.tensor.TensorNumericMath.TensorNumeric
import com.intel.analytics.bigdl.transform.vision.image.label.roi.RoiLabel
import com.intel.analytics.bigdl.transform.vision.image.util.BboxUtil
import com.intel.analytics.bigdl.utils.RandomGenerator._
import com.intel.analytics.bigdl.utils.{T, Table}

import scala.collection.mutable.ArrayBuffer

class BoxHead(
  val inChannels: Int,
  val resolution: Int,
  val scales: Array[Float],
  val samplingRatio: Int,
  val scoreThresh: Float,
  val nmsThresh: Float,
  val maxPerImage: Int,
  val outputSize: Int,
  val numClasses: Int
  )(implicit ev: TensorNumeric[Float])
  extends BaseModule[Float] {

  override def buildModel(): Module[Float] = {
    val featureExtractor = this.featureExtractor(
      inChannels, resolution, scales, samplingRatio, outputSize)

    val clsPredictor = this.clsPredictor(numClasses, outputSize)
    val bboxPredictor = this.bboxPredictor(numClasses, outputSize)

    val weight = Array(10.0f, 10.0f, 5.0f, 5.0f)
    val postProcessor = new BoxPostProcessor(scoreThresh, nmsThresh,
      maxPerImage, numClasses, weight = weight)

    val features = Input()
    val proposals = Input()

//    val boxFeatures = featureExtractor.inputs(features, proposals)
//    val classLogits = clsPredictor.inputs(boxFeatures)
//    val boxRegression = bboxPredictor.inputs(boxFeatures)
//    val result = postProcessor.inputs(classLogits, boxRegression, proposals)

    val boxFeatures = featureExtractor.setName("featureExtractor").inputs(features, proposals)
    val classLogits = clsPredictor.inputs(boxFeatures)
    val boxRegression = bboxPredictor.inputs(boxFeatures)
    val result = postProcessor.setName("postProcessor").inputs(classLogits, boxRegression, proposals)


    Graph(Array(features, proposals), Array(boxFeatures, result))
  }

//  val proposals = Tensor[Float](T(T(1.1886e+02, 6.0997e+02, 3.4088e+02, 7.1492e+02),
//    T(9.0257e+02, 3.0867e+02, 9.3165e+02, 3.7116e+02),
//    T(4.5868e+02, 3.3002e+02, 5.0499e+02, 4.1738e+02),
//    T(9.2386e+02, 2.5746e+02, 1.0650e+03, 3.3485e+02),
//    T(9.2040e+02, 2.7695e+02, 1.0525e+03, 3.2236e+02),
//    T(4.1336e+02, 4.0447e+02, 4.3718e+02, 4.5542e+02),
//    T(3.5885e+02, 3.4432e+02, 4.2025e+02, 4.1536e+02),
//    T(9.1608e+02, 3.4476e+02, 9.9994e+02, 3.8571e+02),
//    T(5.8755e+02, 2.0860e+02, 7.4040e+02, 2.6153e+02),
//    T(8.9371e+02, 3.1289e+02, 9.3263e+02, 3.7117e+02),
//    T(9.2789e+02, 2.6838e+02, 1.0635e+03, 3.1443e+02),
//    T(4.5196e+02, 3.3255e+02, 5.0163e+02, 4.3726e+02),
//    T(8.9789e+02, 3.1268e+02, 9.3397e+02, 3.6358e+02),
//    T(9.1891e+02, 2.8071e+02, 1.0374e+03, 3.3146e+02),
//    T(9.0098e+02, 3.1707e+02, 9.2655e+02, 3.7879e+02),
//    T(1.4249e+02, 2.4189e+02, 2.0499e+02, 2.5766e+02),
//    T(2.8250e+02, 4.3123e+02, 3.2987e+02, 4.9064e+02),
//    T(5.9226e+02, 2.0319e+02, 7.4793e+02, 2.6399e+02),
//    T(8.6703e+02, 3.2887e+02, 9.1433e+02, 3.8517e+02),
//    T(9.3490e+02, 2.7072e+02, 1.0650e+03, 3.2808e+02),
//    T(9.3943e+02, 2.9234e+02, 1.0017e+03, 3.5407e+02),
//    T(9.2113e+02, 2.9015e+02, 1.0245e+03, 3.3930e+02),
//    T(9.9371e+02, 2.9741e+02, 1.0181e+03, 3.4577e+02),
//    T(8.7594e+02, 3.1486e+02, 9.2693e+02, 3.8271e+02),
//    T(8.8935e+02, 3.0902e+02, 9.1544e+02, 3.7104e+02),
//    T(4.0736e+02, 3.9717e+02, 4.4484e+02, 4.5518e+02),
//    T(9.7930e+02, 2.5196e+02, 9.9198e+02, 2.7795e+02),
//    T(5.3929e+02, 2.1662e+02, 5.8911e+02, 2.4272e+02),
//    T(9.6064e+02, 2.5377e+02, 1.0650e+03, 3.1388e+02),
//    T(5.1085e+02, 2.3261e+02, 5.2727e+02, 2.5485e+02),
//    T(9.5542e+02, 2.4748e+02, 1.0650e+03, 3.3261e+02),
//    T(8.7025e+02, 3.3577e+02, 9.0593e+02, 3.8647e+02),
//    T(1.0167e+03, 2.5507e+02, 1.0650e+03, 3.4169e+02),
//    T(8.9316e+02, 3.0908e+02, 9.2245e+02, 3.6995e+02),
//    T(8.8647e+02, 3.4170e+02, 1.0010e+03, 3.8536e+02),
//    T(1.4567e+02, 2.3693e+02, 2.0195e+02, 2.5405e+02),
//    T(9.0259e+02, 2.7353e+02, 1.0650e+03, 3.3787e+02),
//    T(2.4136e+02, 2.4178e+02, 2.5645e+02, 2.5361e+02),
//    T(9.8220e+02, 2.5123e+02, 9.9444e+02, 2.7921e+02),
//    T(9.4167e+02, 3.0543e+02, 1.0011e+03, 3.6722e+02),
//    T(8.9163e+02, 3.1418e+02, 9.2718e+02, 3.8558e+02),
//    T(9.2742e+02, 2.9091e+02, 9.8958e+02, 3.5078e+02),
//    T(5.0190e+02, 2.1241e+02, 5.9503e+02, 2.5630e+02),
//    T(9.2495e+02, 3.5401e+02, 1.0060e+03, 3.8552e+02),
//    T(4.7260e+02, 2.3276e+02, 5.1716e+02, 2.5064e+02),
//    T(9.4698e+02, 2.9579e+02, 9.8295e+02, 3.4646e+02),
//    T(9.7438e+02, 2.5228e+02, 9.8904e+02, 2.7770e+02),
//    T(5.1110e+02, 2.2604e+02, 5.2623e+02, 2.5191e+02),
//    T(2.6951e+02, 4.3564e+02, 3.2512e+02, 4.9464e+02),
//    T(5.0838e+02, 2.2886e+02, 5.2535e+02, 2.5512e+02),
//    T(9.3856e+02, 2.6156e+02, 1.0631e+03, 2.9909e+02),
//    T(9.2845e+02, 3.3072e+02, 9.9502e+02, 3.8163e+02),
//    T(1.0537e+03, 2.8887e+02, 1.0650e+03, 3.4173e+02),
//    T(9.4764e+02, 2.4866e+02, 1.0650e+03, 2.8756e+02),
//    T(2.7755e+02, 4.2326e+02, 3.2512e+02, 5.0588e+02),
//    T(9.9666e+02, 2.8896e+02, 1.0208e+03, 3.4101e+02),
//    T(1.4199e+02, 2.4883e+02, 2.0532e+02, 2.5862e+02),
//    T(9.8461e+02, 2.5360e+02, 9.9583e+02, 2.8098e+02),
//    T(5.0264e+02, 2.2630e+02, 5.2219e+02, 2.5243e+02),
//    T(4.7554e+02, 2.3445e+02, 5.2207e+02, 2.5370e+02),
//    T(9.7573e+02, 2.5341e+02, 9.8832e+02, 2.7343e+02),
//    T(8.9105e+02, 3.2326e+02, 9.3582e+02, 3.8171e+02),
//    T(1.1548e+02, 6.0229e+02, 3.0476e+02, 7.0414e+02),
//    T(8.7232e+02, 3.4665e+02, 9.0315e+02, 3.8528e+02),
//    T(1.0043e+03, 2.5842e+02, 1.0650e+03, 3.2522e+02),
//    T(1.4140e+02, 2.4520e+02, 2.1190e+02, 2.5844e+02),
//    T(8.9609e+02, 3.1142e+02, 9.2863e+02, 3.7440e+02),
//    T(5.1319e+02, 2.0816e+02, 5.9669e+02, 2.4922e+02),
//    T(4.7889e+02, 2.3148e+02, 5.2575e+02, 2.5162e+02),
//    T(5.0041e+02, 2.3216e+02, 5.1939e+02, 2.5349e+02),
//    T(9.3749e+02, 2.9344e+02, 9.9370e+02, 3.8059e+02),
//    T(9.1813e+02, 2.7336e+02, 1.0609e+03, 3.0686e+02),
//    T(5.8636e+02, 1.9535e+02, 7.1928e+02, 2.6830e+02),
//    T(1.0209e+03, 2.8078e+02, 1.0650e+03, 3.3369e+02),
//    T(9.2640e+02, 2.8935e+02, 1.0600e+03, 3.3601e+02),
//    T(9.7938e+02, 2.5176e+02, 9.9374e+02, 2.7144e+02),
//    T(9.0121e+02, 3.1665e+02, 9.3466e+02, 3.7739e+02),
//    T(5.1193e+02, 2.3736e+02, 5.2806e+02, 2.5336e+02),
//    T(2.9216e+02, 2.4000e+02, 3.4451e+02, 2.5155e+02),
//    T(9.2537e+02, 2.9486e+02, 1.0161e+03, 3.4929e+02),
//    T(4.9608e+02, 2.2786e+02, 5.1819e+02, 2.5014e+02),
//    T(8.8983e+02, 2.5443e+02, 1.0650e+03, 3.2415e+02),
//    T(9.8775e+02, 2.5271e+02, 9.9691e+02, 2.8000e+02),
//    T(4.4679e+02, 3.3445e+02, 5.0283e+02, 4.0954e+02),
//    T(9.7224e+02, 2.5659e+02, 9.8973e+02, 2.7882e+02),
//    T(8.8144e+02, 3.3239e+02, 9.0885e+02, 3.8181e+02),
//    T(4.6858e+02, 2.3464e+02, 5.0817e+02, 2.4874e+02),
//    T(1.0002e+03, 2.9620e+02, 1.0225e+03, 3.4691e+02),
//    T(5.1422e+02, 2.3088e+02, 5.3003e+02, 2.5125e+02),
//    T(5.4017e+02, 2.1920e+02, 5.8988e+02, 2.5234e+02),
//    T(9.1489e+02, 2.6385e+02, 1.0302e+03, 3.4514e+02),
//    T(9.7779e+02, 2.5292e+02, 9.9130e+02, 2.7051e+02),
//    T(4.6871e+02, 2.3627e+02, 5.1404e+02, 2.5171e+02),
//    T(4.7428e+02, 2.3660e+02, 5.0184e+02, 2.4625e+02),
//    T(8.9803e+02, 3.1480e+02, 9.2915e+02, 3.4772e+02),
//    T(5.3210e+02, 2.1440e+02, 5.8651e+02, 2.3983e+02),
//    T(2.9466e+02, 2.3636e+02, 3.4890e+02, 2.4946e+02),
//    T(4.7550e+02, 2.2875e+02, 5.2233e+02, 2.4810e+02),
//    T(2.4399e+02, 2.4314e+02, 2.5835e+02, 2.5211e+02),
//    T(9.7515e+02, 3.0400e+02, 1.0033e+03, 3.5349e+02),
//    T(9.4473e+02, 3.3802e+02, 9.6417e+02, 3.5451e+02),
//    T(5.0733e+02, 2.2313e+02, 5.2583e+02, 2.4964e+02),
//    T(9.5860e+02, 3.2376e+02, 9.9628e+02, 3.6073e+02),
//    T(8.9246e+02, 2.4336e+02, 1.0650e+03, 3.0819e+02),
//    T(1.5619e+02, 6.0598e+02, 3.1457e+02, 7.1410e+02),
//    T(9.0578e+02, 3.1843e+02, 9.3037e+02, 3.7744e+02),
//    T(1.4894e+02, 6.1900e+01, 1.0650e+03, 4.0920e+02),
//    T(9.3268e+02, 3.1684e+02, 9.9762e+02, 3.7572e+02),
//    T(4.8188e+02, 2.3279e+02, 5.0566e+02, 2.4448e+02),
//    T(1.4962e+02, 2.3583e+02, 2.0611e+02, 2.5076e+02),
//    T(8.9191e+02, 3.0663e+02, 9.3576e+02, 3.7736e+02),
//    T(2.7141e+02, 2.4316e+02, 2.8945e+02, 2.4966e+02),
//    T(5.1316e+02, 2.2919e+02, 5.2676e+02, 2.4638e+02),
//    T(9.4952e+02, 2.9095e+02, 9.8093e+02, 3.3757e+02),
//    T(4.8518e+02, 2.3227e+02, 5.1169e+02, 2.4933e+02),
//    T(8.7263e+02, 3.3034e+02, 9.9266e+02, 3.8051e+02),
//    T(5.0878e+02, 2.4021e+02, 5.2782e+02, 2.5411e+02),
//    T(4.0683e+02, 4.0074e+02, 4.3478e+02, 4.5469e+02),
//    T(8.1817e+02, 3.3484e+02, 1.0221e+03, 3.8521e+02),
//    T(5.5080e+02, 2.0718e+02, 7.3771e+02, 2.6458e+02),
//    T(2.6942e+02, 2.4147e+02, 2.8879e+02, 2.4798e+02),
//    T(9.7486e+02, 2.5394e+02, 9.8687e+02, 2.6974e+02),
//    T(5.3285e+02, 2.0993e+02, 5.8991e+02, 2.5789e+02),
//    T(4.0039e+02, 4.0039e+02, 4.2465e+02, 4.2017e+02),
//    T(1.1846e+02, 2.4185e+02, 1.8287e+02, 2.5757e+02),
//    T(4.6795e+02, 2.3041e+02, 5.1375e+02, 2.4649e+02),
//    T(1.0534e+03, 3.0812e+02, 1.0645e+03, 3.3270e+02),
//    T(5.1347e+02, 0.0000e+00, 1.0650e+03, 3.6869e+02),
//    T(5.9149e+02, 2.2521e+02, 7.3915e+02, 2.6164e+02),
//    T(4.7821e+02, 2.3574e+02, 5.0465e+02, 2.4767e+02),
//    T(9.1813e+02, 2.8599e+02, 9.7677e+02, 3.4074e+02),
//    T(4.7793e+02, 2.3368e+02, 5.0302e+02, 2.4585e+02),
//    T(9.2747e+02, 3.6070e+02, 1.0008e+03, 3.8517e+02),
//    T(1.0464e+03, 2.8317e+02, 1.0649e+03, 3.3989e+02),
//    T(4.6528e+02, 3.3792e+02, 5.0688e+02, 4.3120e+02),
//    T(2.8795e+02, 4.2469e+02, 3.2928e+02, 5.0401e+02),
//    T(8.8314e+02, 3.2234e+02, 9.1000e+02, 3.7602e+02),
//    T(9.5642e+02, 2.4580e+02, 1.0650e+03, 2.7837e+02),
//    T(4.8116e+02, 2.3370e+02, 5.0722e+02, 2.4858e+02),
//    T(2.5681e+02, 4.0836e+02, 2.7772e+02, 4.2838e+02),
//    T(8.9848e+02, 3.2498e+02, 9.2095e+02, 3.8175e+02),
//    T(5.2733e+02, 2.1839e+02, 5.8888e+02, 2.4540e+02),
//    T(9.2237e+02, 2.8571e+02, 9.5267e+02, 3.1853e+02),
//    T(4.2250e+02, 3.6621e+02, 5.4165e+02, 4.0526e+02),
//    T(0.0000e+00, 7.5952e+01, 8.9148e+01, 6.3787e+02),
//    T(9.7588e+02, 2.5929e+02, 9.9262e+02, 2.8280e+02),
//    T(3.6688e+02, 3.4140e+02, 4.2735e+02, 4.2217e+02),
//    T(9.2393e+02, 2.6978e+02, 1.0650e+03, 3.5738e+02),
//    T(5.8707e+02, 2.1507e+02, 7.0192e+02, 2.5764e+02),
//    T(6.0848e+02, 6.7774e+01, 1.0650e+03, 4.3750e+02),
//    T(4.4089e+02, 2.3544e+02, 4.5485e+02, 2.4341e+02),
//    T(5.0877e+02, 2.2178e+02, 5.2679e+02, 2.5695e+02),
//    T(9.4881e+02, 2.7592e+02, 1.0208e+03, 2.9136e+02),
//    T(5.4323e+02, 2.2022e+02, 5.8130e+02, 2.4764e+02),
//    T(5.0006e+02, 2.2698e+02, 5.1847e+02, 2.4439e+02),
//    T(5.4726e+02, 2.2653e+02, 5.8330e+02, 2.5160e+02),
//    T(1.1534e+02, 2.3142e+02, 2.1156e+02, 2.6005e+02),
//    T(1.3202e+02, 2.3609e+02, 1.9685e+02, 2.5433e+02),
//    T(4.9037e+02, 2.3212e+02, 5.1423e+02, 2.4630e+02),
//    T(9.8821e+02, 2.5812e+02, 9.9648e+02, 2.8220e+02),
//    T(2.4278e+02, 2.4449e+02, 2.5609e+02, 2.5307e+02),
//    T(9.8054e+02, 3.0770e+02, 1.0058e+03, 3.5208e+02),
//    T(1.2582e+02, 2.4184e+02, 2.0012e+02, 2.5869e+02),
//    T(3.8653e+02, 2.2972e+02, 4.5551e+02, 2.4360e+02),
//    T(4.9238e+02, 2.2013e+02, 5.8946e+02, 2.6294e+02),
//    T(9.2821e+02, 3.0491e+02, 9.9094e+02, 3.6937e+02),
//    T(9.8154e+02, 2.5864e+02, 9.9516e+02, 2.8289e+02),
//    T(9.6309e+02, 2.7719e+02, 1.0620e+03, 3.3302e+02),
//    T(2.0103e+02, 2.4190e+02, 2.1365e+02, 2.5355e+02),
//    T(9.9006e+02, 3.0666e+02, 1.0149e+03, 3.4862e+02),
//    T(4.8914e+02, 2.3416e+02, 5.1563e+02, 2.5213e+02),
//    T(9.8712e+02, 2.6380e+02, 1.0643e+03, 3.3350e+02),
//    T(4.7640e+02, 2.3991e+02, 5.2138e+02, 2.5615e+02),
//    T(2.7309e+02, 2.4477e+02, 2.8938e+02, 2.4897e+02),
//    T(9.1911e+02, 2.7989e+02, 1.0195e+03, 3.6122e+02),
//    T(9.2191e+02, 2.8123e+02, 9.5570e+02, 3.2873e+02),
//    T(2.6610e+02, 2.4171e+02, 2.8517e+02, 2.4804e+02),
//    T(8.9338e+02, 3.2442e+02, 9.1632e+02, 3.7778e+02),
//    T(8.6402e+02, 3.4094e+02, 9.1250e+02, 3.9019e+02),
//    T(9.2060e+02, 3.4059e+02, 9.8289e+02, 3.8594e+02),
//    T(4.7565e+02, 2.3881e+02, 5.0130e+02, 2.4707e+02),
//    T(8.9815e+02, 3.1753e+02, 9.4875e+02, 3.7855e+02),
//    T(2.3911e+02, 2.4196e+02, 2.5528e+02, 2.5115e+02),
//    T(8.3121e+02, 7.6468e-01, 1.0650e+03, 4.5569e+02),
//    T(9.4911e+02, 3.3415e+02, 9.6856e+02, 3.5696e+02),
//    T(5.0384e+02, 2.2443e+02, 5.2193e+02, 2.4416e+02),
//    T(2.6784e+02, 2.4319e+02, 2.8601e+02, 2.4908e+02),
//    T(5.1501e+02, 2.3719e+02, 5.3163e+02, 2.5178e+02),
//    T(2.6526e+02, 4.6445e+02, 2.8509e+02, 4.7480e+02),
//    T(4.7906e+02, 2.3174e+02, 5.0249e+02, 2.4200e+02),
//    T(9.5143e+02, 2.9603e+02, 9.7981e+02, 3.2982e+02),
//    T(5.2232e+02, 2.0143e+02, 5.8838e+02, 2.5526e+02),
//    T(1.0035e+03, 2.4430e+02, 1.0645e+03, 2.5491e+02),
//    T(5.0810e+02, 2.2150e+02, 5.2632e+02, 2.4350e+02),
//    T(2.7003e+02, 2.4005e+02, 2.8847e+02, 2.4689e+02),
//    T(2.6771e+02, 4.6481e+02, 2.8811e+02, 4.7613e+02),
//    T(9.4851e+02, 2.9420e+02, 1.0038e+03, 3.7780e+02),
//    T(8.9234e+02, 3.1408e+02, 9.1784e+02, 3.5322e+02),
//    T(8.9420e+02, 3.1518e+02, 9.2831e+02, 3.6077e+02),
//    T(5.0554e+02, 2.2227e+02, 5.7861e+02, 2.4470e+02),
//    T(1.0976e+02, 5.9035e+02, 3.5703e+02, 7.2062e+02),
//    T(0.0000e+00, 1.3631e+02, 5.8387e+02, 5.7069e+02),
//    T(7.9108e+02, 1.7388e+02, 1.0650e+03, 3.2920e+02),
//    T(1.4455e+02, 2.5025e+02, 2.1744e+02, 2.5964e+02),
//    T(8.8715e+02, 2.8248e+02, 1.0650e+03, 3.5613e+02),
//    T(3.9768e+02, 3.9737e+02, 4.2146e+02, 4.1601e+02),
//    T(2.4792e+02, 2.4276e+02, 2.6220e+02, 2.5027e+02),
//    T(9.8602e+02, 2.4745e+02, 9.9771e+02, 2.8189e+02),
//    T(4.9307e+02, 2.3029e+02, 5.1358e+02, 2.4411e+02),
//    T(8.8493e+02, 3.5495e+02, 9.9417e+02, 3.8609e+02),
//    T(8.9484e+02, 3.1625e+02, 9.2007e+02, 3.4505e+02),
//    T(9.6924e+02, 3.0623e+02, 9.9658e+02, 3.4181e+02),
//    T(4.0471e+02, 3.6087e+02, 5.2450e+02, 4.0205e+02),
//    T(1.0008e+03, 2.4750e+02, 1.0642e+03, 2.5948e+02),
//    T(3.4679e+02, 3.4896e+02, 4.3172e+02, 4.1589e+02),
//    T(9.7791e+02, 2.5240e+02, 9.9474e+02, 2.6652e+02),
//    T(9.5136e+02, 2.7388e+02, 1.0157e+03, 2.8914e+02),
//    T(4.0528e+02, 3.7020e+02, 5.3072e+02, 4.0733e+02),
//    T(1.3699e+02, 2.5325e+02, 2.0927e+02, 2.6062e+02),
//    T(9.8512e+02, 2.5896e+02, 9.9731e+02, 2.8249e+02),
//    T(2.5357e+02, 2.4461e+02, 2.9457e+02, 2.5266e+02),
//    T(4.3867e+02, 2.3454e+02, 4.5065e+02, 2.4301e+02),
//    T(9.5831e+02, 3.0998e+02, 9.9542e+02, 3.6247e+02),
//    T(9.6370e+02, 3.0402e+02, 9.9789e+02, 3.5931e+02),
//    T(9.8214e+02, 2.4958e+02, 9.9654e+02, 2.6869e+02),
//    T(8.7963e+02, 3.3070e+02, 9.2584e+02, 3.8717e+02),
//    T(5.0720e+02, 2.3562e+02, 5.2360e+02, 2.5402e+02),
//    T(9.9994e+02, 2.4848e+02, 1.0650e+03, 3.0923e+02),
//    T(8.6777e+02, 3.4261e+02, 9.0089e+02, 3.8898e+02),
//    T(3.9206e+02, 2.2870e+02, 4.5103e+02, 2.4043e+02),
//    T(9.2954e+02, 2.7892e+02, 9.9892e+02, 3.3643e+02),
//    T(4.6936e+02, 2.4075e+02, 5.1286e+02, 2.5335e+02),
//    T(1.0130e+03, 2.5636e+02, 1.0650e+03, 3.1344e+02),
//    T(4.8679e+02, 2.3127e+02, 5.0882e+02, 2.4360e+02),
//    T(5.9105e+02, 1.9959e+02, 7.1793e+02, 2.5359e+02),
//    T(2.6221e+02, 2.4208e+02, 2.8017e+02, 2.4830e+02),
//    T(2.1908e+02, 2.4251e+02, 2.4076e+02, 2.4988e+02),
//    T(2.9283e+02, 3.5953e+02, 3.0225e+02, 3.8387e+02),
//    T(5.8754e+02, 2.3913e+02, 1.0650e+03, 5.4234e+02),
//    T(1.9383e+02, 2.4023e+02, 2.0868e+02, 2.5198e+02),
//    T(9.6764e+02, 2.8989e+02, 1.0630e+03, 3.3644e+02),
//    T(8.5921e+02, 3.3537e+02, 9.8565e+02, 3.8669e+02),
//    T(4.8402e+02, 2.3316e+02, 5.2832e+02, 2.5515e+02),
//    T(4.4150e+02, 2.3668e+02, 4.5736e+02, 2.4464e+02),
//    T(4.4405e+02, 3.3729e+02, 4.9661e+02, 4.4740e+02),
//    T(2.3644e+02, 2.4274e+02, 2.5043e+02, 2.5152e+02),
//    T(5.5213e+02, 2.3260e+02, 5.7921e+02, 2.5197e+02),
//    T(1.0181e+03, 3.0211e+02, 1.0641e+03, 3.3160e+02),
//    T(4.0340e+02, 4.0342e+02, 4.3080e+02, 4.2780e+02),
//    T(9.1034e+02, 2.4972e+02, 1.0370e+03, 3.3533e+02),
//    T(9.6853e+02, 2.6334e+02, 9.8996e+02, 2.8256e+02),
//    T(3.9493e+02, 3.9696e+02, 4.1801e+02, 4.1336e+02),
//    T(9.4788e+02, 3.3106e+02, 9.7215e+02, 3.5593e+02),
//    T(2.7907e+02, 2.3609e+02, 3.4243e+02, 2.4983e+02),
//    T(9.3792e+02, 3.3992e+02, 9.5898e+02, 3.5546e+02),
//    T(2.5841e+02, 4.0631e+02, 2.7842e+02, 4.2495e+02),
//    T(3.3606e+02, 4.0254e+02, 4.5053e+02, 4.5144e+02),
//    T(9.7141e+02, 2.9333e+02, 1.0186e+03, 3.4942e+02),
//    T(3.9354e+02, 3.9336e+02, 4.1625e+02, 4.1143e+02),
//    T(5.1148e+02, 2.2379e+02, 5.2901e+02, 2.5898e+02),
//    T(9.2325e+02, 3.1251e+02, 1.0076e+03, 3.6434e+02),
//    T(9.7413e+02, 2.6772e+02, 9.9146e+02, 2.8545e+02),
//    T(8.8825e+02, 3.1976e+02, 9.1352e+02, 3.7559e+02),
//    T(4.3556e+02, 3.9222e+02, 4.5827e+02, 4.0700e+02),
//    T(2.6933e+02, 2.4503e+02, 2.8612e+02, 2.4909e+02),
//    T(8.6344e+02, 3.5604e+02, 1.0135e+03, 3.8782e+02),
//    T(8.6390e+02, 3.1897e+02, 9.0839e+02, 3.8878e+02),
//    T(2.0684e+02, 2.4293e+02, 2.1815e+02, 2.5340e+02),
//    T(8.1502e+02, 2.3080e+02, 1.0650e+03, 3.6708e+02),
//    T(5.1216e+02, 2.2412e+02, 5.2559e+02, 2.4136e+02),
//    T(4.3978e+02, 3.4582e+02, 5.0438e+02, 4.2126e+02),
//    T(4.8009e+02, 2.3846e+02, 5.0454e+02, 2.4833e+02),
//    T(9.7640e+02, 2.5837e+02, 1.0588e+03, 3.2658e+02),
//    T(9.7219e+02, 3.0095e+02, 9.9910e+02, 3.4991e+02),
//    T(3.7989e+02, 2.3308e+02, 4.4999e+02, 2.4516e+02),
//    T(1.3111e+02, 2.5038e+02, 1.9740e+02, 2.6022e+02),
//    T(3.9987e+02, 4.0418e+02, 4.2647e+02, 4.2254e+02),
//    T(9.3248e+02, 2.9755e+02, 9.6110e+02, 3.4458e+02),
//    T(1.2858e+02, 2.3540e+02, 2.2252e+02, 2.6099e+02),
//    T(2.8833e+02, 4.3422e+02, 3.1910e+02, 4.9034e+02),
//    T(2.8514e+02, 2.4295e+02, 3.0484e+02, 2.5061e+02),
//    T(5.5271e+02, 6.2952e+02, 1.0650e+03, 7.9900e+02),
//    T(9.8499e+02, 2.5284e+02, 9.9651e+02, 2.7193e+02),
//    T(9.7825e+02, 2.6408e+02, 9.9403e+02, 2.8548e+02),
//    T(9.2237e+02, 3.2375e+02, 1.0065e+03, 3.7362e+02),
//    T(9.2841e+02, 2.8974e+02, 9.6263e+02, 3.3910e+02),
//    T(5.1231e+02, 2.3149e+02, 5.2473e+02, 2.4527e+02),
//    T(1.0474e+03, 2.3144e+02, 1.0615e+03, 2.4174e+02),
//    T(9.2944e+02, 3.4455e+02, 9.5676e+02, 3.6677e+02),
//    T(4.8942e+02, 2.0206e+02, 5.9345e+02, 2.4754e+02),
//    T(2.9683e+02, 2.4301e+02, 3.4341e+02, 2.5156e+02),
//    T(1.9953e+02, 2.4348e+02, 2.1271e+02, 2.5270e+02),
//    T(1.9115e+02, 2.3940e+02, 2.0680e+02, 2.4963e+02),
//    T(9.9557e+02, 3.0369e+02, 1.0209e+03, 3.3971e+02),
//    T(4.3881e+02, 2.3616e+02, 4.5183e+02, 2.4396e+02),
//    T(9.9212e+02, 3.0506e+02, 1.0160e+03, 3.3884e+02),
//    T(2.7516e+02, 2.4385e+02, 2.9209e+02, 2.5026e+02),
//    T(3.5050e+02, 3.6794e+02, 4.5013e+02, 4.1802e+02),
//    T(5.3848e+02, 2.1549e+02, 5.8909e+02, 2.3514e+02),
//    T(9.8099e+02, 2.5112e+02, 9.9750e+02, 2.6504e+02),
//    T(9.2246e+02, 2.8808e+02, 9.6905e+02, 3.2173e+02),
//    T(0.0000e+00, 2.7299e+02, 5.2173e+02, 7.9900e+02),
//    T(9.7657e+02, 3.0828e+02, 9.9977e+02, 3.4188e+02),
//    T(1.0522e+03, 2.7357e+02, 1.0650e+03, 3.3764e+02),
//    T(5.0469e+02, 2.2910e+02, 5.7381e+02, 2.5319e+02),
//    T(9.4343e+02, 3.3395e+02, 9.6544e+02, 3.5299e+02),
//    T(1.0552e+03, 3.0609e+02, 1.0650e+03, 3.2895e+02),
//    T(4.2809e+02, 3.7416e+02, 5.4479e+02, 4.1006e+02),
//    T(1.0506e+03, 3.0683e+02, 1.0635e+03, 3.3039e+02),
//    T(4.3598e+02, 2.3431e+02, 4.4863e+02, 2.4303e+02),
//    T(1.1976e+02, 2.4661e+02, 1.8426e+02, 2.5853e+02),
//    T(1.8582e+02, 2.3849e+02, 2.0277e+02, 2.4937e+02),
//    T(2.2702e+02, 2.4347e+02, 2.4421e+02, 2.5087e+02),
//    T(2.5788e+02, 2.4254e+02, 2.7404e+02, 2.4886e+02),
//    T(4.3688e+02, 3.9143e+02, 4.6191e+02, 4.1087e+02),
//    T(8.8437e+02, 3.1094e+02, 9.2551e+02, 3.8256e+02),
//    T(9.5702e+02, 2.9190e+02, 1.0111e+03, 3.5275e+02),
//    T(9.4700e+02, 2.7417e+02, 1.0374e+03, 2.8968e+02),
//    T(5.9501e+02, 1.9299e+02, 7.6952e+02, 2.5973e+02),
//    T(2.5050e+02, 2.4350e+02, 2.6456e+02, 2.5131e+02),
//    T(2.5295e+02, 2.4226e+02, 2.6738e+02, 2.4941e+02),
//    T(9.5258e+02, 2.7794e+02, 9.7917e+02, 2.9770e+02),
//    T(4.0136e+02, 4.0175e+02, 4.4098e+02, 4.5827e+02),
//    T(7.8855e+02, 2.5629e+02, 1.0650e+03, 3.9060e+02),
//    T(9.3409e+02, 2.7797e+02, 1.0356e+03, 2.9767e+02),
//    T(0.0000e+00, 6.3681e+02, 5.2303e+02, 7.9900e+02),
//    T(0.0000e+00, 0.0000e+00, 2.2344e+02, 7.9900e+02),
//    T(4.3997e+02, 2.3546e+02, 4.5158e+02, 2.4214e+02),
//    T(4.0828e+02, 3.9072e+02, 4.6939e+02, 4.0699e+02),
//    T(9.1139e+02, 2.8753e+02, 1.0066e+03, 3.6831e+02),
//    T(9.7423e+02, 3.0554e+02, 9.9618e+02, 3.3630e+02),
//    T(2.6050e+02, 2.4381e+02, 2.7862e+02, 2.4895e+02),
//    T(3.3551e+02, 2.2866e+02, 4.6932e+02, 2.5253e+02),
//    T(8.6218e+02, 3.4467e+02, 9.1084e+02, 3.8531e+02),
//    T(8.8140e+02, 3.4432e+02, 9.1100e+02, 3.8400e+02),
//    T(1.0364e+03, 2.8610e+02, 1.0631e+03, 3.3933e+02),
//    T(8.4829e+02, 3.8396e+02, 8.6088e+02, 3.9048e+02),
//    T(8.7161e+02, 3.1226e+02, 9.1391e+02, 3.8141e+02),
//    T(2.3242e+02, 2.4237e+02, 2.4984e+02, 2.5004e+02),
//    T(5.4386e+02, 2.1818e+02, 5.7371e+02, 2.4323e+02),
//    T(2.9183e+02, 2.3447e+02, 3.4359e+02, 2.4536e+02),
//    T(9.2063e+02, 2.8031e+02, 9.7397e+02, 3.2638e+02),
//    T(9.8616e+02, 3.0778e+02, 1.0092e+03, 3.5073e+02),
//    T(4.1582e+02, 3.3446e+02, 5.0834e+02, 4.2440e+02),
//    T(4.5022e+02, 3.8892e+02, 4.7374e+02, 4.3208e+02),
//    T(2.7900e+02, 2.3918e+02, 3.3666e+02, 2.5168e+02),
//    T(8.7318e+02, 3.2757e+02, 9.0695e+02, 3.7726e+02),
//    T(8.6143e+02, 3.3724e+02, 9.4715e+02, 3.8582e+02),
//    T(1.0182e+03, 3.1472e+02, 1.0598e+03, 3.3541e+02),
//    T(9.5432e+02, 2.7844e+02, 9.7758e+02, 2.9126e+02),
//    T(9.6442e+02, 2.7509e+02, 9.8732e+02, 2.8996e+02),
//    T(9.8581e+02, 2.5100e+02, 9.9834e+02, 2.6687e+02),
//    T(9.6231e+02, 2.6743e+02, 9.8773e+02, 2.8252e+02),
//    T(7.6692e+02, 2.8478e+02, 1.0650e+03, 4.3365e+02),
//    T(2.8781e+02, 2.4129e+02, 3.0816e+02, 2.5100e+02),
//    T(4.0554e+02, 4.0572e+02, 4.2814e+02, 4.2198e+02),
//    T(0.0000e+00, 4.9823e+01, 1.1427e+02, 7.9309e+02),
//    T(5.1162e+02, 2.4429e+02, 5.2991e+02, 2.5576e+02),
//    T(9.9480e+02, 2.4923e+02, 1.0645e+03, 2.6279e+02),
//    T(2.5652e+02, 2.4397e+02, 2.7350e+02, 2.5032e+02),
//    T(9.4666e+02, 3.0291e+02, 9.8458e+02, 3.5940e+02),
//    T(8.8919e+02, 3.3210e+02, 9.1139e+02, 3.8034e+02),
//    T(9.4157e+02, 2.8582e+02, 1.0115e+03, 3.4755e+02),
//    T(9.3499e+02, 3.0076e+02, 9.6290e+02, 3.3344e+02),
//    T(2.9466e+02, 4.3153e+02, 3.2549e+02, 4.9112e+02),
//    T(9.4679e+02, 3.3975e+02, 9.6685e+02, 3.5712e+02),
//    T(1.0222e+03, 2.9775e+02, 1.0632e+03, 3.2530e+02),
//    T(5.6855e+02, 2.9435e+02, 1.0650e+03, 6.5069e+02),
//    T(5.0816e+02, 2.2278e+02, 5.2448e+02, 2.3896e+02),
//    T(5.4008e+02, 2.2406e+02, 5.6251e+02, 2.4430e+02),
//    T(9.8458e+02, 2.5058e+02, 1.0007e+03, 2.6317e+02),
//    T(4.8569e+02, 2.3831e+02, 5.1209e+02, 2.5146e+02),
//    T(9.5717e+02, 2.9753e+02, 9.7805e+02, 3.2176e+02),
//    T(1.2691e+02, 2.4991e+02, 1.4847e+02, 2.5713e+02),
//    T(2.5529e+02, 2.4173e+02, 2.9416e+02, 2.5160e+02),
//    T(7.7944e+02, 1.2503e+02, 1.0650e+03, 3.1628e+02),
//    T(2.8414e+02, 2.4220e+02, 3.4292e+02, 2.5323e+02),
//    T(9.6669e+02, 2.8881e+02, 1.0237e+03, 3.4282e+02),
//    T(4.4456e+02, 2.3602e+02, 4.6202e+02, 2.4318e+02),
//    T(1.0061e+03, 2.4149e+02, 1.0650e+03, 2.5220e+02),
//    T(9.9244e+02, 2.5261e+02, 1.0593e+03, 3.4437e+02),
//    T(4.3199e+02, 3.5664e+02, 5.3698e+02, 4.0158e+02),
//    T(9.2581e+02, 2.8429e+02, 9.6125e+02, 3.2127e+02),
//    T(9.5517e+02, 2.9362e+02, 9.8833e+02, 3.4192e+02),
//    T(4.9349e+02, 2.2879e+02, 6.0267e+02, 2.6573e+02),
//    T(4.4024e+02, 3.9102e+02, 4.6112e+02, 4.0691e+02),
//    T(5.2226e+02, 2.2565e+02, 5.9155e+02, 2.5215e+02),
//    T(5.0172e+02, 2.4029e+02, 5.1924e+02, 2.5390e+02),
//    T(1.2857e+02, 2.5177e+02, 1.4518e+02, 2.5693e+02),
//    T(9.3083e+02, 3.4152e+02, 9.5259e+02, 3.5617e+02),
//    T(2.6672e+02, 2.4048e+02, 3.1362e+02, 2.5234e+02),
//    T(9.5826e+02, 2.7677e+02, 9.8236e+02, 2.9005e+02),
//    T(5.7649e+02, 2.1711e+02, 7.5473e+02, 2.6183e+02),
//    T(9.5296e+02, 2.7218e+02, 1.0363e+03, 2.8542e+02),
//    T(4.0637e+02, 4.0699e+02, 4.3454e+02, 4.2970e+02),
//    T(9.9220e+02, 2.8947e+02, 1.0158e+03, 3.3990e+02),
//    T(1.1720e+02, 2.4412e+02, 1.7273e+02, 2.5699e+02),
//    T(2.9050e+02, 3.6087e+02, 3.0362e+02, 3.8918e+02),
//    T(1.9623e+02, 2.4326e+02, 2.1054e+02, 2.5281e+02),
//    T(5.4683e+02, 2.1672e+02, 5.7786e+02, 2.4047e+02),
//    T(5.0783e+02, 2.2075e+02, 5.2411e+02, 2.3454e+02),
//    T(9.4385e+02, 3.0001e+02, 9.7980e+02, 3.4069e+02),
//    T(4.0120e+02, 3.8475e+02, 5.3072e+02, 4.1691e+02),
//    T(9.2296e+02, 2.8614e+02, 9.5318e+02, 3.3765e+02),
//    T(5.1435e+02, 2.1923e+02, 5.8713e+02, 2.3876e+02),
//    T(3.2360e+02, 3.6800e+02, 4.3584e+02, 4.1512e+02),
//    T(4.7110e+02, 2.3388e+02, 4.9711e+02, 2.4385e+02),
//    T(3.5608e+02, 3.5048e+02, 4.4773e+02, 4.0972e+02),
//    T(8.8292e+02, 3.1074e+02, 9.2998e+02, 3.6530e+02),
//    T(1.0056e+03, 2.4010e+02, 1.0231e+03, 2.4579e+02),
//    T(2.8616e+02, 2.4575e+02, 3.0307e+02, 2.5163e+02),
//    T(5.5521e+02, 2.3714e+02, 5.7863e+02, 2.5458e+02),
//    T(8.4911e+02, 3.8284e+02, 8.6410e+02, 3.9077e+02),
//    T(3.9658e+02, 4.0281e+02, 4.2190e+02, 4.1587e+02),
//    T(1.2821e+02, 2.4957e+02, 1.4595e+02, 2.5554e+02),
//    T(9.0347e+02, 3.1975e+02, 9.3524e+02, 3.5747e+02),
//    T(4.0356e+02, 4.0343e+02, 4.2732e+02, 4.1856e+02),
//    T(9.0811e+02, 3.0829e+02, 1.0056e+03, 3.8354e+02),
//    T(8.9765e+02, 3.1112e+02, 9.2532e+02, 3.5430e+02),
//    T(1.0035e+03, 2.4051e+02, 1.0191e+03, 2.4654e+02),
//    T(0.0000e+00, 0.0000e+00, 6.0858e+02, 4.0675e+02),
//    T(5.0753e+02, 2.2566e+02, 5.8366e+02, 2.4797e+02),
//    T(9.6016e+02, 3.0102e+02, 9.9330e+02, 3.3965e+02),
//    T(5.7988e+02, 2.2205e+02, 7.0707e+02, 2.6202e+02),
//    T(1.2572e+02, 2.5192e+02, 1.4192e+02, 2.5728e+02),
//    T(4.7154e+02, 2.3940e+02, 4.9751e+02, 2.4726e+02),
//    T(9.7107e+02, 2.7401e+02, 9.9103e+02, 2.8979e+02),
//    T(9.3679e+02, 3.0222e+02, 9.6329e+02, 3.4672e+02),
//    T(2.6189e+02, 3.9851e+02, 5.1851e+02, 4.5178e+02),
//    T(9.8894e+02, 2.6273e+02, 9.9842e+02, 2.8346e+02),
//    T(1.0520e+03, 3.0458e+02, 1.0650e+03, 3.2701e+02),
//    T(5.1101e+02, 1.5388e+02, 5.8882e+02, 4.0416e+02),
//    T(9.4514e+02, 2.4377e+02, 1.0650e+03, 2.7022e+02),
//    T(9.8118e+02, 2.4852e+02, 9.9835e+02, 2.5651e+02),
//    T(4.1458e+02, 3.9296e+02, 4.4019e+02, 4.5348e+02),
//    T(5.0345e+02, 2.3792e+02, 5.7327e+02, 2.6107e+02),
//    T(2.1623e+02, 2.4221e+02, 2.3494e+02, 2.5020e+02),
//    T(9.6711e+02, 3.2506e+02, 1.0002e+03, 3.5839e+02),
//    T(1.3620e+02, 2.3513e+02, 1.9847e+02, 2.5043e+02),
//    T(8.6613e+02, 3.1819e+02, 9.6669e+02, 3.7706e+02),
//    T(4.0032e+02, 3.8046e+02, 5.3150e+02, 4.0868e+02),
//    T(9.4783e+02, 2.7772e+02, 9.7840e+02, 3.0291e+02),
//    T(9.5814e+02, 2.8670e+02, 9.7926e+02, 3.0466e+02),
//    T(4.1532e+02, 3.9576e+02, 4.3604e+02, 4.0877e+02),
//    T(2.8884e+02, 2.4593e+02, 3.0673e+02, 2.5214e+02),
//    T(9.4001e+02, 3.0648e+02, 9.9487e+02, 3.4319e+02),
//    T(5.4147e+02, 2.2731e+02, 5.6170e+02, 2.4773e+02),
//    T(7.6784e+02, 3.1853e+02, 1.0650e+03, 4.7465e+02),
//    T(9.2898e+02, 3.1994e+02, 9.5168e+02, 3.4107e+02),
//    T(9.4634e+02, 3.1585e+02, 1.0058e+03, 3.7253e+02),
//    T(2.6065e+02, 4.3381e+02, 3.4050e+02, 4.9417e+02),
//    T(9.3868e+02, 2.9792e+02, 9.6834e+02, 3.4480e+02),
//    T(8.6950e+02, 2.3315e+02, 8.8360e+02, 2.4199e+02),
//    T(5.0330e+02, 2.1917e+02, 5.7075e+02, 2.4222e+02),
//    T(2.0546e+02, 3.6968e+02, 4.9537e+02, 4.1879e+02),
//    T(8.7494e+02, 3.4110e+02, 9.0826e+02, 3.8324e+02),
//    T(8.9552e+02, 3.4824e+02, 9.1642e+02, 3.7804e+02),
//    T(9.9076e+02, 2.6215e+02, 1.0007e+03, 2.8194e+02),
//    T(5.5019e+02, 2.2120e+02, 5.9044e+02, 2.4688e+02),
//    T(9.5793e+02, 3.0148e+02, 1.0060e+03, 3.5958e+02),
//    T(9.4446e+02, 2.7938e+02, 9.7334e+02, 3.0999e+02),
//    T(4.7628e+02, 2.4109e+02, 5.0117e+02, 2.4792e+02),
//    T(8.1978e+02, 2.3428e+02, 8.6635e+02, 2.4153e+02),
//    T(1.1722e+02, 2.3803e+02, 1.8097e+02, 2.5296e+02),
//    T(5.4077e+02, 2.0476e+02, 5.9287e+02, 2.5299e+02),
//    T(7.2342e+02, 2.4330e+02, 7.3794e+02, 2.5300e+02),
//    T(2.7189e+02, 4.6278e+02, 2.9305e+02, 4.7367e+02),
//    T(4.3757e+02, 2.3691e+02, 4.4767e+02, 2.4288e+02),
//    T(4.8345e+02, 2.3952e+02, 5.3053e+02, 2.5704e+02),
//    T(3.9625e+02, 3.9051e+02, 4.1939e+02, 4.1511e+02),
//    T(3.8682e+02, 2.3284e+02, 4.6015e+02, 2.4679e+02),
//    T(9.2651e+02, 2.3569e+02, 9.3877e+02, 2.4281e+02),
//    T(9.8824e+02, 2.4959e+02, 1.0040e+03, 2.6192e+02),
//    T(4.0706e+02, 3.8633e+02, 4.7115e+02, 4.0147e+02),
//    T(1.9695e+02, 2.3923e+02, 2.1143e+02, 2.4986e+02),
//    T(9.0007e+02, 3.4959e+02, 9.1974e+02, 3.7601e+02),
//    T(9.6688e+02, 3.0226e+02, 9.9495e+02, 3.3315e+02),
//    T(2.1148e+02, 2.4199e+02, 2.5606e+02, 2.5467e+02),
//    T(9.3195e+02, 3.1820e+02, 9.5749e+02, 3.4232e+02),
//    T(9.2914e+02, 3.2925e+02, 9.5194e+02, 3.4381e+02),
//    T(4.5227e+02, 3.9078e+02, 4.7128e+02, 4.1071e+02),
//    T(4.8180e+02, 2.4105e+02, 5.0494e+02, 2.4865e+02),
//    T(9.7972e+02, 2.9347e+02, 1.0273e+03, 3.4799e+02),
//    T(9.5665e+02, 2.8088e+02, 9.8270e+02, 2.9617e+02),
//    T(4.6495e+02, 2.3258e+02, 5.0444e+02, 2.4568e+02),
//    T(9.2280e+02, 2.8626e+02, 9.6757e+02, 3.3402e+02),
//    T(3.6737e+02, 2.3407e+02, 4.4719e+02, 2.4713e+02),
//    T(2.5475e+02, 2.3739e+02, 2.9429e+02, 2.4858e+02),
//    T(1.0420e+03, 2.3209e+02, 1.0595e+03, 2.4175e+02),
//    T(3.8580e+02, 3.8352e+02, 4.1702e+02, 4.0890e+02),
//    T(9.1897e+02, 2.8324e+02, 9.6615e+02, 3.3371e+02),
//    T(7.2768e+02, 2.4252e+02, 7.4018e+02, 2.5194e+02),
//    T(9.7528e+02, 2.5375e+02, 9.9099e+02, 2.6635e+02),
//    T(1.8212e+02, 2.3635e+02, 2.0178e+02, 2.4629e+02),
//    T(2.7332e+02, 2.3907e+02, 2.8992e+02, 2.4613e+02),
//    T(9.8053e+02, 2.5057e+02, 9.9322e+02, 2.8377e+02),
//    T(1.2546e+02, 2.5034e+02, 1.4213e+02, 2.5612e+02),
//    T(5.4042e+02, 3.7398e+02, 5.4897e+02, 3.8421e+02),
//    T(8.9210e+02, 3.1635e+02, 9.4114e+02, 3.5029e+02),
//    T(5.1084e+02, 2.3105e+02, 5.2265e+02, 2.4315e+02),
//    T(9.6577e+02, 2.7169e+02, 9.8832e+02, 2.8690e+02),
//    T(9.7219e+02, 2.5870e+02, 1.0650e+03, 3.4690e+02),
//    T(0.0000e+00, 5.5692e+02, 2.6098e+02, 7.9900e+02),
//    T(9.2209e+02, 2.8191e+02, 1.0156e+03, 3.2205e+02),
//    T(2.4837e+02, 4.0578e+02, 5.0071e+02, 4.6270e+02),
//    T(0.0000e+00, 0.0000e+00, 2.4676e+02, 2.6387e+02),
//    T(9.2400e+02, 2.7692e+02, 9.9085e+02, 3.2800e+02),
//    T(4.1034e+02, 3.9162e+02, 4.6311e+02, 4.4847e+02),
//    T(8.0825e+02, 7.0708e+02, 1.0650e+03, 7.9900e+02),
//    T(1.0986e+02, 2.4046e+02, 2.1956e+02, 2.6183e+02),
//    T(7.9786e+02, 5.2276e+02, 1.0650e+03, 7.9900e+02),
//    T(5.0312e+02, 2.0649e+02, 5.6192e+02, 2.6250e+02),
//    T(4.5692e+02, 3.3283e+02, 5.0623e+02, 3.9237e+02),
//    T(1.2158e+02, 2.2611e+02, 2.1822e+02, 2.5728e+02),
//    T(4.7797e+02, 2.1639e+02, 5.7335e+02, 2.5547e+02),
//    T(8.9075e+01, 2.3572e+02, 2.1326e+02, 2.6101e+02),
//    T(2.0249e+02, 3.9615e+02, 4.9381e+02, 4.4656e+02),
//    T(9.0265e+02, 3.2993e+02, 9.5320e+02, 3.8019e+02),
//    T(3.4973e+02, 3.4997e+02, 5.8015e+02, 4.1854e+02),
//    T(4.1196e+02, 3.9405e+02, 4.5240e+02, 4.6026e+02),
//    T(1.3654e+01, 2.0237e+01, 1.4101e+02, 6.3190e+02),
//    T(4.0242e+02, 3.8979e+02, 5.2141e+02, 4.2679e+02),
//    T(9.3419e+02, 2.7397e+02, 1.0073e+03, 3.2734e+02),
//    T(9.7906e+02, 2.4975e+02, 1.0650e+03, 2.9208e+02),
//    T(8.5021e+02, 3.4796e+02, 1.0051e+03, 3.8717e+02),
//    T(9.2123e+02, 2.3085e+02, 1.0610e+03, 3.2979e+02),
//    T(5.0781e+02, 1.8905e+02, 5.8867e+02, 2.5757e+02),
//    T(2.3756e+02, 4.1654e+02, 5.1865e+02, 4.7850e+02),
//    T(3.4538e+02, 3.7400e+02, 4.7597e+02, 4.1663e+02),
//    T(0.0000e+00, 7.1351e+02, 3.0688e+02, 7.9900e+02),
//    T(7.9057e+02, 1.3268e+02, 1.0650e+03, 5.9167e+02),
//    T(9.3714e+02, 3.1091e+02, 9.9842e+02, 3.9327e+02),
//    T(4.9088e+02, 2.0857e+02, 7.5595e+02, 2.6575e+02),
//    T(6.2098e+02, 1.8666e+02, 7.4761e+02, 2.6701e+02),
//    T(9.8283e+02, 2.7727e+02, 1.0506e+03, 3.3674e+02),
//    T(5.1802e+02, 2.1934e+02, 5.9795e+02, 2.6070e+02),
//    T(9.2924e+02, 2.9166e+02, 1.0442e+03, 3.4911e+02),
//    T(6.0938e+02, 2.0195e+02, 7.4268e+02, 2.5115e+02),
//    T(9.4472e+02, 3.2600e+02, 1.0037e+03, 3.8206e+02),
//    T(1.0266e+03, 2.9125e+02, 1.0650e+03, 3.3646e+02),
//    T(7.7249e+02, 8.0440e+01, 1.0650e+03, 2.8680e+02),
//    T(5.1722e+02, 1.9547e+02, 7.4324e+02, 2.6003e+02),
//    T(1.0141e+03, 2.3301e+02, 1.0636e+03, 3.2510e+02),
//    T(1.0243e+03, 2.6585e+02, 1.0650e+03, 3.5404e+02),
//    T(3.4168e+02, 3.8376e+02, 4.5948e+02, 4.2162e+02),
//    T(2.6265e+02, 3.8206e+02, 5.1562e+02, 4.4571e+02),
//    T(9.6272e+02, 1.0649e+02, 1.0650e+03, 3.5139e+02),
//    T(4.1735e+02, 3.7806e+02, 5.5311e+02, 4.1664e+02),
//    T(6.3010e+01, 5.6047e+02, 3.8893e+02, 7.2129e+02),
//    T(0.0000e+00, 0.0000e+00, 1.1119e+02, 1.3870e+02),
//    T(9.4222e+02, 2.4183e+02, 1.0650e+03, 3.0628e+02),
//    T(3.9560e+02, 3.9113e+02, 4.9266e+02, 4.3319e+02),
//    T(9.1722e+02, 3.0248e+02, 1.0012e+03, 3.5656e+02),
//    T(4.8324e+02, 2.2411e+02, 5.7446e+02, 2.5905e+02),
//    T(3.5965e+02, 3.4248e+02, 4.1485e+02, 3.9777e+02),
//    T(0.0000e+00, 0.0000e+00, 1.0133e+02, 4.7166e+02),
//    T(0.0000e+00, 4.1925e+01, 6.3499e+02, 5.2014e+02),
//    T(2.1882e+02, 3.7796e+02, 4.7837e+02, 4.3217e+02),
//    T(3.1999e+02, 4.0692e+02, 4.6072e+02, 4.4433e+02),
//    T(9.3195e+02, 2.9918e+02, 1.0215e+03, 3.6021e+02),
//    T(9.6205e+02, 2.7135e+02, 1.0401e+03, 3.2953e+02),
//    T(4.3409e+02, 3.3001e+02, 4.9262e+02, 4.2626e+02),
//    T(3.8079e+02, 3.8770e+02, 4.9650e+02, 4.2143e+02),
//    T(3.4994e+02, 3.6060e+02, 4.7039e+02, 4.1225e+02),
//    T(9.3818e+02, 2.8198e+02, 9.9114e+02, 3.5656e+02),
//    T(2.6557e+02, 3.5980e+02, 5.1001e+02, 4.2699e+02),
//    T(9.8667e+02, 2.1814e+02, 1.0638e+03, 3.5151e+02),
//    T(3.1505e+02, 3.5809e+02, 4.2843e+02, 4.1200e+02),
//    T(8.9666e+02, 3.0899e+02, 9.4095e+02, 3.6451e+02),
//    T(7.7092e+02, 3.4565e+02, 1.0650e+03, 5.0728e+02),
//    T(9.7076e+02, 2.7972e+02, 1.0330e+03, 3.3783e+02),
//    T(4.3350e+02, 2.1244e+02, 7.3367e+02, 2.6391e+02),
//    T(0.0000e+00, 1.7493e+02, 4.8849e+02, 7.2888e+02),
//    T(0.0000e+00, 0.0000e+00, 5.3107e+02, 1.7582e+02),
//    T(0.0000e+00, 6.2983e+02, 7.3497e+02, 7.9900e+02),
//    T(3.2944e+02, 3.6303e+02, 5.6388e+02, 4.2770e+02),
//    T(4.0977e+02, 3.9899e+02, 4.4287e+02, 4.7196e+02),
//    T(9.1511e+02, 3.3363e+02, 9.6936e+02, 3.8200e+02),
//    T(3.4679e+02, 3.4357e+02, 4.4273e+02, 4.3418e+02),
//    T(3.6333e+02, 3.4847e+02, 4.3062e+02, 4.3771e+02),
//    T(3.1134e+02, 3.8624e+02, 4.4301e+02, 4.1699e+02),
//    T(9.7688e+02, 2.6721e+02, 1.0650e+03, 3.1756e+02),
//    T(9.7546e+02, 2.9919e+02, 1.0648e+03, 3.4011e+02),
//    T(1.0595e+03, 2.3609e+02, 1.0650e+03, 3.5529e+02),
//    T(9.5022e+02, 6.4738e+02, 1.0650e+03, 7.9900e+02),
//    T(3.5753e+02, 2.2707e+02, 4.8220e+02, 2.5133e+02),
//    T(9.5422e+02, 2.9558e+02, 1.0650e+03, 3.4442e+02),
//    T(8.4415e+02, 3.1879e+02, 1.0431e+03, 3.8207e+02),
//    T(0.0000e+00, 6.4962e+02, 1.3308e+02, 7.9900e+02),
//    T(5.7774e+02, 2.0515e+02, 8.0284e+02, 2.6150e+02),
//    T(1.0597e+03, 2.8149e+02, 1.0650e+03, 3.3533e+02),
//    T(2.5119e+01, 0.0000e+00, 1.0650e+03, 4.3845e+02),
//    T(3.3543e+02, 3.4600e+02, 4.2992e+02, 4.0331e+02),
//    T(1.2215e+02, 2.3706e+02, 2.6345e+02, 2.5903e+02),
//    T(0.0000e+00, 0.0000e+00, 1.2726e+02, 1.1118e+02),
//    T(9.8178e+02, 2.8638e+02, 1.0380e+03, 3.4255e+02),
//    T(0.0000e+00, 1.2746e+02, 3.4591e+02, 3.6403e+02),
//    T(4.8247e+02, 1.7381e+02, 5.9111e+02, 2.6984e+02),
//    T(8.6962e+02, 3.3960e+02, 9.2262e+02, 3.8749e+02),
//    T(7.6720e+02, 1.5689e+02, 1.0650e+03, 7.1504e+02),
//    T(9.8727e+02, 2.8768e+02, 1.0650e+03, 3.2908e+02),
//    T(1.0074e+03, 2.9110e+02, 1.0650e+03, 3.3595e+02),
//    T(5.0809e+02, 2.1136e+02, 5.7030e+02, 2.6747e+02),
//    T(1.3723e+02, 5.8791e+02, 3.5757e+02, 7.0482e+02),
//    T(4.4180e+02, 3.3042e+02, 5.3459e+02, 4.2646e+02),
//    T(0.0000e+00, 0.0000e+00, 1.4795e+02, 7.3741e+01),
//    T(0.0000e+00, 5.3150e+02, 5.3435e+02, 7.9900e+02),
//    T(2.0541e+02, 3.6199e+02, 4.9899e+02, 4.0759e+02),
//    T(9.1720e+02, 3.2087e+02, 9.8175e+02, 3.8111e+02),
//    T(8.2479e+02, 2.1727e+02, 1.0650e+03, 3.3244e+02),
//    T(0.0000e+00, 8.0343e+00, 5.5334e+01, 5.7385e+02),
//    T(3.0022e+02, 3.8263e+02, 5.8365e+02, 4.4281e+02),
//    T(7.8078e+02, 6.5146e+02, 1.0650e+03, 7.9900e+02),
//    T(3.9775e+02, 6.8561e+02, 1.0650e+03, 7.9900e+02),
//    T(0.0000e+00, 0.0000e+00, 2.5165e+02, 4.0997e+02),
//    T(7.7839e+02, 3.4465e+02, 1.0506e+03, 3.9240e+02),
//    T(3.8921e+02, 3.9889e+02, 4.7931e+02, 4.5337e+02),
//    T(0.0000e+00, 3.8292e+02, 2.5686e+02, 6.3379e+02),
//    T(2.2275e+02, 3.9530e+02, 3.4628e+02, 4.2574e+02),
//    T(4.1311e+02, 3.8815e+02, 4.7024e+02, 4.3846e+02),
//    T(8.9576e+02, 0.0000e+00, 1.0650e+03, 5.3636e+02),
//    T(8.5913e+02, 3.4852e+02, 9.6895e+02, 3.8634e+02),
//    T(8.3254e+02, 2.9896e+02, 1.0392e+03, 3.7165e+02),
//    T(3.5582e+02, 3.3214e+02, 4.2883e+02, 4.3862e+02),
//    T(9.7742e+02, 2.7853e+02, 1.0650e+03, 3.2352e+02),
//    T(4.9841e+02, 1.3368e+02, 5.7888e+02, 3.7937e+02),
//    T(1.0551e+02, 2.4039e+02, 2.7596e+02, 2.6155e+02),
//    T(0.0000e+00, 4.4956e+02, 2.8550e+02, 7.9900e+02),
//    T(8.8481e+02, 3.0100e+02, 1.0650e+03, 3.6951e+02),
//    T(8.7700e+02, 3.1644e+02, 9.8373e+02, 3.6636e+02),
//    T(5.9175e+02, 2.1458e+02, 6.5352e+02, 2.5828e+02),
//    T(8.5926e+02, 3.1700e+02, 9.4437e+02, 3.8073e+02),
//    T(5.9397e+02, 1.9566e+02, 7.1864e+02, 2.2500e+02),
//    T(9.6941e+02, 2.4283e+02, 1.0650e+03, 2.6614e+02),
//    T(9.0781e+02, 2.1684e+02, 1.0650e+03, 2.8550e+02),
//    T(7.7049e+02, 4.3269e+01, 1.0650e+03, 2.5121e+02),
//    T(8.7797e+02, 3.2266e+02, 9.1744e+02, 3.9048e+02),
//    T(8.9499e+02, 3.3388e+02, 9.4668e+02, 3.8434e+02),
//    T(3.1858e+02, 4.1097e+02, 4.6595e+02, 4.5576e+02),
//    T(4.3459e+02, 3.1911e+02, 5.0627e+02, 4.4005e+02),
//    T(9.6698e+02, 2.5278e+02, 1.0395e+03, 3.1649e+02),
//    T(2.6776e+02, 3.9696e+02, 5.8596e+02, 4.4580e+02),
//    T(0.0000e+00, 1.6241e+02, 2.8807e+02, 3.5599e+02),
//    T(5.5587e+02, 0.0000e+00, 1.0650e+03, 1.7037e+02),
//    T(0.0000e+00, 0.0000e+00, 1.6187e+02, 1.6054e+02),
//    T(9.7153e+02, 2.6317e+02, 1.0650e+03, 3.0639e+02),
//    T(9.0888e+02, 2.9632e+02, 9.9979e+02, 3.4695e+02),
//    T(9.1900e+02, 2.7593e+02, 1.0237e+03, 3.1433e+02),
//    T(1.0286e+03, 2.4836e+02, 1.0650e+03, 3.4594e+02),
//    T(0.0000e+00, 0.0000e+00, 1.0650e+03, 3.0732e+02),
//    T(8.5464e+02, 3.2713e+02, 9.3459e+02, 3.8417e+02),
//    T(1.8296e+02, 7.3420e+02, 7.2929e+02, 7.9900e+02),
//    T(4.5613e+02, 3.5587e+02, 5.0828e+02, 4.2494e+02),
//    T(4.0150e+02, 7.3429e+02, 9.6824e+02, 7.9900e+02),
//    T(0.0000e+00, 0.0000e+00, 2.8882e+02, 9.2178e+01),
//    T(7.9304e+02, 0.0000e+00, 1.0650e+03, 8.5766e+01),
//    T(0.0000e+00, 7.3176e+02, 3.9346e+02, 7.9900e+02),
//    T(9.4813e+02, 2.5556e+02, 1.0137e+03, 3.1419e+02),
//    T(4.7438e+02, 2.0845e+02, 5.7528e+02, 2.5029e+02),
//    T(9.3701e+02, 2.7678e+02, 1.0172e+03, 3.3953e+02),
//    T(0.0000e+00, 2.7816e+02, 2.7198e+02, 7.9900e+02),
//    T(0.0000e+00, 1.0433e+02, 2.9988e+02, 3.2392e+02),
//    T(4.3332e+02, 3.8199e+02, 5.6233e+02, 4.1351e+02),
//    T(0.0000e+00, 5.0384e+02, 2.2981e+02, 7.0910e+02),
//    T(0.0000e+00, 4.5376e+02, 2.3724e+02, 6.8413e+02),
//    T(4.3218e+02, 3.7769e+02, 4.9059e+02, 4.2864e+02),
//    T(4.0176e+02, 2.2791e+02, 7.4428e+02, 2.7307e+02),
//    T(8.7006e+02, 3.1177e+02, 9.4828e+02, 3.7201e+02),
//    T(4.6346e+02, 2.0347e+02, 6.8253e+02, 2.5906e+02),
//    T(9.6425e+02, 1.9137e+02, 1.0603e+03, 3.4583e+02),
//    T(3.3209e+02, 3.9526e+02, 4.6021e+02, 4.3121e+02),
//    T(0.0000e+00, 7.3483e+01, 4.6843e+01, 4.5050e+02),
//    T(0.0000e+00, 0.0000e+00, 1.1633e+02, 2.3650e+02),
//    T(4.0171e+02, 3.8839e+02, 4.5373e+02, 4.4360e+02),
//    T(0.0000e+00, 0.0000e+00, 5.6701e+02, 2.9241e+02),
//    T(7.8788e+02, 3.2912e+02, 1.0519e+03, 3.8375e+02),
//    T(5.3175e+02, 1.8402e+02, 5.9125e+02, 2.4937e+02),
//    T(1.4403e+01, 3.9019e+02, 4.7213e+02, 7.9900e+02),
//    T(7.6066e+02, 4.0101e+02, 1.0650e+03, 7.9900e+02),
//    T(9.9912e+02, 2.8626e+02, 1.0582e+03, 3.3788e+02),
//    T(3.5275e+02, 3.4157e+02, 4.0832e+02, 4.1970e+02),
//    T(1.4077e+02, 2.1376e+02, 2.0149e+02, 2.6211e+02),
//    T(9.7973e+02, 2.6337e+02, 1.0259e+03, 3.5367e+02),
//    T(7.4488e+02, 0.0000e+00, 1.0650e+03, 1.4102e+02),
//    T(8.1949e+02, 0.0000e+00, 1.0650e+03, 2.8805e+02),
//    T(2.2122e+02, 3.8916e+02, 3.4850e+02, 4.1882e+02),
//    T(9.1698e+01, 3.7445e+02, 6.4213e+02, 4.7442e+02),
//    T(9.4640e+02, 2.7185e+02, 1.0253e+03, 3.2756e+02),
//    T(1.7190e+02, 3.8108e+02, 5.2495e+02, 4.2634e+02),
//    T(9.0790e+02, 3.1844e+02, 9.6959e+02, 3.7998e+02),
//    T(4.8740e+02, 2.3908e+02, 6.0903e+02, 2.7079e+02),
//    T(5.0291e+02, 7.3614e+02, 1.0650e+03, 7.9900e+02),
//    T(0.0000e+00, 4.8393e+02, 7.6855e+02, 7.9646e+02),
//    T(0.0000e+00, 3.1399e+02, 2.5015e+02, 5.6325e+02),
//    T(0.0000e+00, 7.0698e+01, 2.9803e+02, 2.7137e+02),
//    T(0.0000e+00, 2.2970e+02, 9.2812e+02, 4.7279e+02),
//    T(4.5262e+02, 3.4513e+02, 5.1626e+02, 4.1556e+02),
//    T(1.2070e+02, 2.4194e+02, 2.4879e+02, 2.6340e+02),
//    T(9.2263e+02, 2.9752e+02, 1.0316e+03, 3.7656e+02),
//    T(8.0300e+02, 4.6128e+02, 1.0650e+03, 6.4547e+02),
//    T(2.5048e+02, 3.5355e+02, 5.2696e+02, 4.1582e+02),
//    T(2.5606e+02, 4.2994e+02, 3.3371e+02, 4.8192e+02),
//    T(0.0000e+00, 1.9377e+02, 2.5767e+02, 3.9989e+02),
//    T(0.0000e+00, 6.6788e+02, 9.0677e+02, 7.9900e+02),
//    T(9.6373e+02, 2.4815e+02, 1.0301e+03, 3.0521e+02),
//    T(0.0000e+00, 2.0502e+02, 8.6219e+01, 7.3976e+02),
//    T(0.0000e+00, 0.0000e+00, 3.2319e+02, 6.8917e+01),
//    T(0.0000e+00, 0.0000e+00, 6.6718e+02, 1.4189e+02),
//    T(7.9457e+02, 6.1080e+02, 1.0650e+03, 7.8155e+02),
//    T(3.2952e+02, 3.7555e+02, 5.8778e+02, 4.3263e+02),
//    T(3.8638e+02, 3.9921e+02, 4.3832e+02, 4.5308e+02),
//    T(9.4898e+02, 2.0649e+01, 1.0650e+03, 3.2561e+02),
//    T(8.5617e+02, 3.4742e+02, 9.4058e+02, 3.8915e+02),
//    T(9.5066e+02, 2.8022e+02, 1.0055e+03, 3.5943e+02),
//    T(3.4145e+02, 3.5347e+02, 4.4794e+02, 4.5161e+02),
//    T(7.8267e+02, 3.7863e+02, 1.0650e+03, 5.3702e+02),
//    T(3.0994e+02, 3.5006e+02, 5.4141e+02, 4.1397e+02),
//    T(7.5841e+02, 1.5998e+01, 1.0650e+03, 2.0782e+02),
//    T(3.7003e+02, 3.9837e+02, 4.6612e+02, 4.5554e+02),
//    T(9.6274e+02, 0.0000e+00, 1.0650e+03, 1.5127e+02),
//    T(3.8148e+02, 3.8277e+02, 4.9938e+02, 4.1086e+02),
//    T(3.8629e+02, 3.5406e+02, 5.2476e+02, 3.9633e+02),
//    T(4.3977e+02, 2.0568e+02, 6.4720e+02, 2.5576e+02),
//    T(2.7753e+02, 7.3691e+02, 8.4041e+02, 7.9900e+02),
//    T(4.6977e+02, 2.2716e+02, 5.4977e+02, 2.5658e+02),
//    T(0.0000e+00, 6.0169e+02, 2.7281e+02, 7.7968e+02),
//    T(8.3631e+02, 2.6329e+02, 1.0650e+03, 3.3847e+02),
//    T(1.0606e+03, 2.5274e+02, 1.0650e+03, 3.6531e+02),
//    T(7.9823e+02, 4.3177e+02, 1.0650e+03, 6.0861e+02),
//    T(0.0000e+00, 0.0000e+00, 9.9767e+02, 1.4835e+02),
//    T(9.0450e+01, 3.9598e+02, 6.3808e+02, 4.9958e+02),
//    T(3.9954e+02, 3.9179e+02, 4.3524e+02, 4.6243e+02),
//    T(9.7534e+02, 2.4702e+02, 1.0518e+03, 3.0883e+02),
//    T(0.0000e+00, 4.2966e+00, 3.1043e+02, 1.9174e+02),
//    T(1.8122e+02, 1.5691e+02, 1.0650e+03, 5.0345e+02),
//    T(9.9702e+02, 0.0000e+00, 1.0650e+03, 3.8941e+02),
//    T(1.2619e+02, 6.0866e+02, 2.0614e+02, 7.0729e+02),
//    T(6.7971e+02, 7.3980e+02, 1.0650e+03, 7.9900e+02),
//    T(9.7208e+02, 2.7415e+02, 1.0192e+03, 3.5724e+02),
//    T(3.5242e+02, 3.4619e+02, 4.4070e+02, 3.9199e+02),
//    T(4.2134e+02, 2.1616e+02, 6.5984e+02, 2.6550e+02),
//    T(1.0602e+03, 2.6587e+02, 1.0650e+03, 3.2057e+02),
//    T(1.9603e+01, 2.2483e+02, 4.0397e+02, 2.6804e+02),
//    T(7.3027e+01, 2.1450e+02, 4.3598e+02, 2.5818e+02),
//    T(8.6938e+02, 3.1111e+02, 9.6962e+02, 3.5874e+02),
//    T(9.2032e+02, 2.0375e+02, 1.0650e+03, 2.7379e+02),
//    T(9.6222e+02, 1.7431e+02, 1.0650e+03, 4.0456e+02),
//    T(3.9895e+02, 3.7993e+02, 4.4085e+02, 4.5706e+02),
//    T(9.0483e+02, 3.3899e+02, 9.6163e+02, 3.8352e+02),
//    T(0.0000e+00, 6.2995e+02, 1.7906e+02, 7.9900e+02),
//    T(5.0186e+02, 1.8651e+02, 5.6406e+02, 2.5781e+02),
//    T(1.2382e+01, 6.0480e+01, 6.5867e+01, 5.6340e+02),
//    T(8.0072e+02, 4.9572e+02, 1.0650e+03, 6.8116e+02),
//    T(5.9176e+02, 1.9507e+02, 7.0724e+02, 2.3745e+02),
//    T(9.5155e+01, 2.2336e+02, 2.0554e+02, 2.5684e+02),
//    T(3.7552e+02, 3.4704e+02, 4.3213e+02, 4.1272e+02),
//    T(1.3991e+01, 2.3629e+02, 4.2227e+02, 2.6873e+02),
//    T(3.2685e+02, 1.3369e+02, 8.5524e+02, 3.0098e+02),
//    T(9.6240e+02, 2.1896e+02, 1.0650e+03, 3.1851e+02),
//    T(8.3568e+02, 2.4891e+02, 1.0650e+03, 3.4440e+02),
//    T(9.4362e+02, 3.3936e+02, 1.0003e+03, 3.8752e+02),
//    T(4.4677e+02, 1.8735e+02, 6.2976e+02, 2.5260e+02),
//    T(2.8008e+02, 4.3183e+02, 3.3158e+02, 5.1463e+02),
//    T(0.0000e+00, 3.6671e+02, 8.7807e+02, 7.2858e+02),
//    T(0.0000e+00, 0.0000e+00, 3.8623e+02, 6.7624e+02),
//    T(9.5164e+02, 2.5037e+02, 1.0118e+03, 3.0354e+02),
//    T(4.1841e+02, 3.4584e+02, 5.1679e+02, 4.0322e+02),
//    T(9.9582e+02, 2.4205e+02, 1.0650e+03, 3.6470e+02),
//    T(7.8821e+02, 4.0329e+02, 1.0650e+03, 5.7608e+02),
//    T(5.7944e+02, 2.1906e+02, 8.0270e+02, 2.6766e+02),
//    T(5.4221e+02, 1.7776e+02, 5.9528e+02, 2.5506e+02),
//    T(9.5147e+02, 2.6055e+02, 1.0373e+03, 3.2272e+02),
//    T(1.1707e+02, 5.0788e+02, 3.6227e+02, 7.3010e+02),
//    T(9.3206e+02, 3.1895e+02, 1.0165e+03, 3.7044e+02),
//    T(1.1016e+02, 2.4456e+02, 2.8711e+02, 2.6350e+02),
//    T(0.0000e+00, 6.4189e+02, 3.2895e+02, 7.9900e+02),
//    T(4.4761e+02, 3.6622e+02, 5.0099e+02, 4.2801e+02),
//    T(8.4071e+02, 3.4769e+02, 9.2205e+02, 3.8886e+02),
//    T(4.4106e+02, 1.6098e+02, 9.7485e+02, 2.9190e+02),
//    T(9.3571e+02, 5.8281e+02, 1.0650e+03, 7.9900e+02),
//    T(9.3950e+02, 2.6834e+02, 9.9808e+02, 3.5190e+02),
//    T(4.5766e+02, 1.0874e+02, 1.0650e+03, 4.6104e+02),
//    T(9.8532e+02, 2.5854e+02, 1.0334e+03, 3.4923e+02),
//    T(2.8003e+02, 0.0000e+00, 7.8516e+02, 4.7013e+02),
//    T(1.2934e+02, 3.5818e+02, 6.5785e+02, 4.4611e+02),
//    T(2.2712e+02, 2.2886e+02, 3.5992e+02, 2.5258e+02),
//    T(9.3407e+02, 3.1101e+02, 1.0321e+03, 3.6363e+02),
//    T(2.9926e+02, 3.9510e+02, 4.5179e+02, 4.2362e+02),
//    T(3.1728e+02, 4.0143e+02, 4.5895e+02, 4.3521e+02),
//    T(2.6399e+02, 4.3136e+02, 3.1789e+02, 4.8953e+02),
//    T(7.6459e+02, 3.5643e+02, 1.0568e+03, 3.9548e+02),
//    T(0.0000e+00, 0.0000e+00, 2.7626e+02, 5.3976e+02),
//    T(0.0000e+00, 1.6868e+02, 8.1839e+02, 5.5573e+02),
//    T(0.0000e+00, 7.1799e+02, 5.0149e+02, 7.9900e+02),
//    T(0.0000e+00, 5.5145e+02, 2.4341e+02, 7.4218e+02),
//    T(5.8355e+02, 1.7941e+02, 7.4930e+02, 2.5804e+02),
//    T(2.0626e+02, 4.2345e+02, 4.9649e+02, 4.8362e+02),
//    T(1.0195e+02, 6.8820e+02, 1.0650e+03, 7.9900e+02),
//    T(1.0595e+03, 2.9402e+02, 1.0650e+03, 3.4701e+02),
//    T(8.6930e+02, 2.3111e+02, 1.0650e+03, 2.9448e+02),
//    T(0.0000e+00, 4.5850e+02, 1.1647e+02, 7.5822e+02),
//    T(5.6058e+01, 5.8796e+02, 4.3674e+02, 7.4366e+02),
//    T(7.2796e+01, 7.2618e+02, 6.2843e+02, 7.9900e+02),
//    T(9.4507e+02, 2.3857e+02, 1.0650e+03, 2.6042e+02),
//    T(8.9076e+02, 2.9324e+02, 9.9397e+02, 3.7293e+02),
//    T(0.0000e+00, 2.2750e+02, 2.4531e+02, 4.3026e+02),
//    T(4.6297e+02, 0.0000e+00, 6.0423e+02, 4.2511e+02),
//    T(3.3881e+02, 2.2306e+02, 4.6577e+02, 2.4838e+02),
//    T(9.4945e+02, 2.3137e+02, 1.0650e+03, 5.2288e+02),
//    T(4.7121e+02, 2.0055e+02, 5.7889e+02, 2.4332e+02),
//    T(4.3364e+02, 3.8780e+02, 4.8520e+02, 4.3282e+02),
//    T(3.2961e+01, 0.0000e+00, 6.7493e+02, 4.8953e+01),
//    T(9.2969e+02, 2.6670e+02, 1.0025e+03, 3.1993e+02),
//    T(0.0000e+00, 7.4474e+02, 5.6391e+01, 7.9900e+02),
//    T(8.6566e+02, 3.1661e+02, 9.8888e+02, 3.8868e+02),
//    T(7.3561e+02, 0.0000e+00, 1.0650e+03, 6.9224e+01),
//    T(9.7731e+02, 2.4346e+02, 1.0434e+03, 3.4502e+02),
//    T(0.0000e+00, 3.3721e+02, 9.0769e+02, 6.0054e+02),
//    T(4.1661e+02, 3.8803e+02, 5.6664e+02, 4.2186e+02),
//    T(4.6325e+02, 2.2176e+02, 5.4059e+02, 2.5424e+02),
//    T(6.7263e+01, 2.2337e+02, 4.5941e+02, 2.6262e+02),
//    T(8.3198e+02, 3.6111e+02, 1.0234e+03, 3.9043e+02),
//    T(1.0523e+03, 2.8867e+02, 1.0650e+03, 3.4013e+02),
//    T(4.9710e+02, 2.1064e+02, 5.5126e+02, 2.6217e+02),
//    T(9.2147e+02, 2.8881e+02, 9.7918e+02, 3.6622e+02),
//    T(4.2479e+01, 4.4921e+02, 4.0260e+02, 7.9900e+02),
//    T(3.5612e+02, 3.8231e+02, 4.7870e+02, 4.1167e+02),
//    T(9.6649e+02, 2.3273e+02, 1.0577e+03, 3.5398e+02),
//    T(5.3224e+02, 2.1502e+02, 6.2432e+02, 2.5617e+02),
//    T(2.0978e+02, 2.3251e+02, 5.3813e+02, 2.7112e+02),
//    T(8.0490e+02, 5.7289e+02, 1.0650e+03, 7.4371e+02),
//    T(3.4520e+02, 2.3275e+02, 4.8640e+02, 2.5467e+02),
//    T(3.6242e+02, 3.9507e+02, 4.7764e+02, 4.3402e+02),
//    T(4.9517e+02, 1.8707e+02, 6.0062e+02, 2.7780e+02),
//    T(8.7465e+02, 1.3712e+02, 1.0650e+03, 3.5930e+02),
//    T(4.7360e+02, 2.1489e+02, 5.2897e+02, 2.5968e+02),
//    T(2.7840e+02, 3.7858e+02, 4.4429e+02, 4.1362e+02),
//    T(7.6064e+02, 2.7452e+02, 1.0650e+03, 3.6301e+02),
//    T(1.0268e+03, 2.4184e+02, 1.0650e+03, 3.3245e+02),
//    T(1.0283e+03, 7.2998e+02, 1.0650e+03, 7.9900e+02),
//    T(2.2685e+02, 2.1525e+02, 3.5157e+02, 2.4795e+02),
//    T(3.1556e+02, 3.3825e+02, 5.6698e+02, 4.0263e+02),
//    T(4.5067e+02, 3.1783e+02, 5.1781e+02, 4.3392e+02),
//    T(8.2775e+02, 2.3293e+02, 1.0650e+03, 2.7814e+02),
//    T(3.4800e+02, 3.9880e+02, 4.6053e+02, 4.4257e+02),
//    T(1.4563e+02, 2.2278e+02, 2.0766e+02, 2.6563e+02),
//    T(3.3692e+02, 1.8315e+02, 9.0660e+02, 3.2470e+02),
//    T(2.2716e+02, 3.7942e+02, 3.5708e+02, 4.0955e+02),
//    T(9.9098e+02, 2.4267e+02, 1.0618e+03, 3.0101e+02),
//    T(8.1951e+02, 2.5015e+02, 1.0650e+03, 3.1575e+02),
//    T(9.6120e+02, 2.7617e+02, 1.0124e+03, 3.5863e+02),
//    T(1.0305e+03, 2.7647e+02, 1.0650e+03, 3.2498e+02),
//    T(3.8658e+00, 2.4858e+02, 1.3330e+02, 7.9900e+02),
//    T(2.7244e+01, 2.3367e+02, 4.9799e+02, 2.6500e+02),
//    T(5.7884e+02, 1.9776e+02, 8.6580e+02, 2.5322e+02),
//    T(2.7155e+02, 4.4452e+02, 3.2855e+02, 5.0246e+02),
//    T(2.0784e+02, 4.3365e+02, 5.1653e+02, 4.9439e+02),
//    T(0.0000e+00, 0.0000e+00, 1.2872e+02, 3.1027e+02),
//    T(2.9043e+02, 3.6753e+02, 4.3537e+02, 4.0887e+02),
//    T(3.5984e+02, 3.8971e+02, 4.8105e+02, 4.2029e+02),
//    T(5.2736e+02, 1.8191e+02, 5.9156e+02, 4.0827e+02),
//    T(3.9267e+02, 3.9187e+02, 5.1637e+02, 4.3984e+02),
//    T(9.8504e+02, 2.8802e+02, 1.0226e+03, 3.5312e+02),
//    T(3.8981e+02, 0.0000e+00, 1.0326e+03, 5.9079e+01),
//    T(6.0628e+02, 1.9939e+02, 7.3486e+02, 2.3697e+02),
//    T(2.7343e+02, 2.3078e+02, 4.4110e+02, 2.5233e+02),
//    T(0.0000e+00, 4.9068e+01, 1.0650e+03, 5.5169e+02),
//    T(1.0583e+03, 0.0000e+00, 1.0650e+03, 3.0901e+01),
//    T(4.5246e+02, 1.4803e+02, 8.5569e+02, 2.9081e+02),
//    T(8.7516e+02, 3.1225e+02, 9.9434e+02, 3.5472e+02),
//    T(0.0000e+00, 2.3311e+02, 3.4022e+02, 2.7143e+02),
//    T(5.4850e+02, 2.1147e+02, 5.9818e+02, 2.5842e+02),
//    T(5.4978e+02, 2.1401e+02, 8.7983e+02, 2.6733e+02),
//    T(1.3047e+01, 4.1205e+00, 1.1236e+02, 9.3784e+01),
//    T(1.2598e+02, 6.0629e+02, 2.7040e+02, 7.2241e+02),
//    T(9.2148e+02, 2.8401e+02, 1.0637e+03, 3.7397e+02),
//    T(0.0000e+00, 3.5158e+02, 1.9786e+02, 7.9900e+02),
//    T(5.9549e+02, 3.9757e+02, 1.0650e+03, 7.7692e+02),
//    T(4.1963e+02, 3.2245e+02, 4.9753e+02, 4.5078e+02),
//    T(0.0000e+00, 3.5548e+02, 6.6972e+02, 7.9900e+02),
//    T(9.5155e+02, 3.8276e+02, 1.0650e+03, 6.9825e+02),
//    T(1.9492e+01, 0.0000e+00, 1.6810e+02, 5.1121e+02),
//    T(0.0000e+00, 1.6748e+02, 6.7612e+02, 7.9900e+02),
//    T(1.6961e+02, 2.2150e+02, 5.2377e+02, 2.6168e+02),
//    T(3.8639e+02, 2.2679e+02, 6.5131e+02, 2.8270e+02),
//    T(9.4522e+02, 0.0000e+00, 1.0650e+03, 1.9757e+02),
//    T(0.0000e+00, 1.3194e+02, 4.5570e+01, 5.3809e+02),
//    T(1.5377e+01, 2.2060e+02, 3.5047e+02, 2.6284e+02),
//    T(0.0000e+00, 5.4909e+02, 1.1751e+02, 7.9900e+02),
//    T(9.2624e+02, 2.3968e+02, 1.0154e+03, 3.6619e+02),
//    T(7.2553e+02, 2.9521e+02, 1.0650e+03, 4.0915e+02),
//    T(9.4756e+02, 2.8842e+02, 1.0650e+03, 6.0138e+02),
//    T(7.2015e+02, 2.1611e+02, 1.0650e+03, 3.4205e+02),
//    T(9.8815e+02, 5.9676e+02, 1.0650e+03, 7.9900e+02),
//    T(5.1701e+02, 2.2168e+02, 9.8279e+02, 2.6194e+02),
//    T(6.2874e+02, 1.7743e+02, 1.0650e+03, 3.3352e+02),
//    T(1.9563e+02, 4.1524e+02, 5.2477e+02, 4.6272e+02),
//    T(0.0000e+00, 0.0000e+00, 3.8602e+02, 3.4546e+02),
//    T(5.1024e+02, 1.5457e+02, 5.8736e+02, 3.1715e+02),
//    T(2.4471e+02, 4.1821e+02, 3.5563e+02, 5.1397e+02),
//    T(4.0091e+02, 3.5771e+02, 5.0998e+02, 4.5184e+02),
//    T(0.0000e+00, 0.0000e+00, 8.4593e+02, 1.1866e+02),
//    T(0.0000e+00, 3.8194e+02, 1.3043e+02, 6.9556e+02),
//    T(1.7578e+02, 3.5106e+02, 5.2861e+02, 3.9607e+02),
//    T(2.2159e+02, 2.0619e+02, 5.1890e+02, 2.5499e+02),
//    T(0.0000e+00, 2.8514e+02, 2.4362e+02, 5.0884e+02),
//    T(7.7899e+02, 2.2980e+02, 1.0650e+03, 2.7184e+02),
//    T(1.2308e+02, 2.1404e+02, 5.0153e+02, 2.5623e+02),
//    T(3.4062e+02, 3.3363e+02, 4.1743e+02, 4.6185e+02),
//    T(8.3565e+02, 9.4200e+01, 1.0650e+03, 5.3861e+02),
//    T(6.6578e+02, 2.4916e+02, 1.0650e+03, 3.7469e+02),
//    T(3.9596e+02, 3.4568e+02, 4.9528e+02, 4.3716e+02),
//    T(6.4717e+01, 3.5798e+02, 6.1222e+02, 4.6267e+02),
//    T(9.0349e+02, 4.3747e+02, 1.0650e+03, 7.9900e+02),
//    T(2.3794e+02, 2.2161e+02, 5.5054e+02, 2.6571e+02),
//    T(9.3286e+02, 7.4968e+02, 1.0650e+03, 7.9900e+02),
//    T(9.6263e+02, 1.9470e+02, 1.0650e+03, 2.9815e+02),
//    T(1.5313e+02, 0.0000e+00, 7.6291e+02, 4.4171e+01),
//    T(4.9599e+02, 1.1502e+02, 5.7508e+02, 3.1907e+02),
//    T(9.9150e+02, 1.5355e+02, 1.0650e+03, 3.4264e+02),
//    T(0.0000e+00, 0.0000e+00, 1.1125e+02, 5.2224e+01),
//    T(0.0000e+00, 2.3782e+02, 1.6735e+02, 7.9900e+02),
//    T(1.3621e+02, 4.4711e+02, 3.5427e+02, 7.4327e+02),
//    T(4.2465e+02, 3.2454e+02, 5.2403e+02, 4.1775e+02),
//    T(2.5276e+02, 2.3277e+02, 6.0227e+02, 2.7586e+02),
//    T(1.0092e+03, 2.5423e+02, 1.0650e+03, 3.3667e+02),
//    T(0.0000e+00, 2.4882e+02, 4.4370e+02, 2.8100e+02),
//    T(1.0284e+03, 0.0000e+00, 1.0650e+03, 6.1871e+01),
//    T(8.7963e+02, 2.0298e+02, 1.0650e+03, 3.9829e+02),
//    T(0.0000e+00, 0.0000e+00, 6.9349e+01, 3.2259e+02),
//    T(0.0000e+00, 7.5089e+02, 1.5329e+02, 7.9900e+02),
//    T(1.0264e+03, 2.1689e+02, 1.0650e+03, 3.2168e+02),
//    T(0.0000e+00, 5.9595e+02, 9.6382e+02, 7.9900e+02),
//    T(5.0153e+02, 2.3494e+02, 1.0102e+03, 2.7040e+02),
//    T(4.6101e+02, 1.4700e+02, 5.7921e+02, 2.7087e+02),
//    T(8.6808e+01, 2.3508e+02, 5.4554e+02, 2.6842e+02),
//    T(6.6203e+02, 2.9066e+02, 1.0650e+03, 3.9096e+02),
//    T(8.4148e+02, 3.3397e+02, 1.0650e+03, 3.7967e+02),
//    T(0.0000e+00, 5.9919e+01, 1.3299e+02, 4.0227e+02),
//    T(0.0000e+00, 1.2664e+02, 1.3159e+02, 4.6221e+02),
//    T(4.4196e+02, 2.2126e+02, 7.8839e+02, 2.6892e+02),
//    T(1.2296e+00, 0.0000e+00, 1.0280e+02, 8.1494e+01),
//    T(0.0000e+00, 0.0000e+00, 4.5656e+02, 5.4505e+01),
//    T(3.1387e+02, 3.7551e+02, 6.5960e+02, 4.2247e+02),
//    T(0.0000e+00, 0.0000e+00, 4.6834e+01, 6.1716e+01),
//    T(2.4398e+02, 0.0000e+00, 8.0097e+02, 5.1797e+01),
//    T(1.3865e+01, 8.1833e+01, 1.4540e+02, 7.9900e+02),
//    T(1.1409e+02, 6.0103e+02, 2.4883e+02, 7.0456e+02),
//    T(2.7880e+02, 2.0417e+02, 5.5860e+02, 2.5437e+02),
//    T(3.3085e+02, 1.9864e+02, 5.7814e+02, 2.5233e+02),
//    T(9.3933e+02, 1.8443e+02, 1.0650e+03, 2.6223e+02),
//    T(8.0487e+02, 2.3840e+02, 1.0650e+03, 2.9503e+02),
//    T(1.0385e+02, 5.6041e+02, 5.6355e+02, 7.9900e+02),
//    T(7.2726e+02, 3.3730e+02, 1.0640e+03, 3.8540e+02),
//    T(3.3727e+02, 3.3932e+02, 4.3048e+02, 4.2358e+02),
//    T(0.0000e+00, 2.6136e+02, 1.5243e+02, 6.8628e+02),
//    T(1.9285e+02, 4.3387e+02, 4.3603e+02, 5.0619e+02),
//    T(3.7449e+02, 3.4540e+02, 4.6820e+02, 4.3817e+02),
//    T(9.3353e+02, 2.6715e+02, 1.0277e+03, 3.7779e+02),
//    T(1.5058e+02, 1.0163e+02, 6.9994e+02, 3.1998e+02),
//    T(1.0286e+02, 2.0682e+02, 4.2391e+02, 2.5288e+02),
//    T(1.9069e+02, 0.0000e+00, 1.0650e+03, 1.3349e+02),
//    T(9.5018e+02, 4.4736e+02, 1.0650e+03, 7.6132e+02),
//    T(6.7222e+02, 5.4478e+02, 1.0650e+03, 7.9900e+02),
//    T(3.4104e+02, 3.4223e+02, 6.2545e+02, 4.0606e+02),
//    T(0.0000e+00, 1.0137e+02, 9.5728e+02, 4.8638e+02),
//    T(8.9648e+02, 3.2750e+02, 1.0650e+03, 3.8867e+02),
//    T(1.1975e+02, 6.4366e+02, 3.7039e+02, 7.9900e+02),
//    T(9.4563e+02, 2.1261e+02, 1.0494e+03, 3.5969e+02),
//    T(5.6673e+00, 2.2217e+02, 2.7379e+02, 2.7124e+02),
//    T(2.5623e+02, 4.0333e+02, 3.3735e+02, 5.2576e+02),
//    T(9.7298e+02, 1.3000e+02, 1.0602e+03, 3.1782e+02),
//    T(4.3495e+02, 0.0000e+00, 5.8284e+02, 4.3734e+02),
//    T(1.4858e+02, 2.0567e+02, 4.8938e+02, 2.5142e+02),
//    T(9.9797e+02, 3.4798e+02, 1.0650e+03, 7.7133e+02),
//    T(1.5020e+02, 3.6532e+02, 7.5028e+02, 4.5668e+02),
//    T(8.9885e+02, 2.7310e+01, 1.0650e+03, 3.8864e+02),
//    T(0.0000e+00, 2.0897e+02, 6.3773e+02, 3.2845e+02),
//    T(3.4735e+02, 2.0822e+02, 9.0168e+02, 3.7665e+02),
//    T(0.0000e+00, 2.4625e+02, 5.4028e+02, 3.7302e+02),
//    T(4.8411e+02, 1.1755e+02, 5.5975e+02, 3.2564e+02),
//    T(1.7809e+02, 3.4984e+02, 7.4457e+02, 4.4283e+02),
//    T(3.7031e+02, 0.0000e+00, 7.0530e+02, 5.9822e+02),
//    T(0.0000e+00, 1.3957e+02, 5.3229e+02, 2.9939e+02),
//    T(3.5728e+02, 1.8821e+02, 6.0084e+02, 2.5531e+02),
//    T(3.3862e+02, 3.7471e+02, 4.5035e+02, 4.6314e+02),
//    T(6.2145e+01, 4.1018e+02, 6.5539e+02, 5.4480e+02),
//    T(4.7817e+01, 3.3235e+02, 6.1191e+02, 4.4989e+02),
//    T(0.0000e+00, 2.3678e+02, 2.8330e+02, 4.6918e+02),
//    T(2.8395e+02, 3.9076e+02, 6.5602e+02, 4.3117e+02),
//    T(4.3451e+02, 1.3268e+02, 1.0416e+03, 2.8075e+02),
//    T(9.0784e+02, 1.5466e+02, 1.0650e+03, 7.9900e+02),
//    T(1.3887e+02, 1.5439e+02, 6.8341e+02, 3.3767e+02),
//    T(2.2800e+01, 2.6366e+02, 1.6675e+02, 7.9900e+02),
//    T(5.5911e+01, 3.2367e+02, 4.1573e+02, 7.9900e+02),
//    T(8.7257e+02, 2.9901e+02, 9.8521e+02, 3.7868e+02),
//    T(9.1753e+02, 1.5066e+02, 1.0650e+03, 3.7681e+02),
//    T(5.7359e+02, 1.6929e+02, 7.0145e+02, 2.6130e+02),
//    T(6.5621e+02, 0.0000e+00, 1.0650e+03, 5.6873e+01),
//    T(3.9372e+02, 1.0242e+02, 9.0970e+02, 3.1604e+02)))
//
//  override def updateOutput(input: Activity): Activity = {
//    val n1 = model.asInstanceOf[Graph[Float]].node("featureExtractor")
//    val n2 = model.asInstanceOf[Graph[Float]].node("cls_score")
//    val n3 = model.asInstanceOf[Graph[Float]].node("bbox_pred")
//    val n4 = model.asInstanceOf[Graph[Float]].node("postProcessor")
//
//
//    val features = input.toTable[Table](1)
//    val proposals = input.toTable[Table](2)
//
//    println(input.toTable[Tensor[Float]](2))
//
//    val boxFeatures = n1.element.forward(input)
//    val classLogits = n2.element.forward(boxFeatures)
//    val boxRegression = n3.element.forward(boxFeatures)
//    val result = n4.element.forward(T(classLogits, boxRegression, proposals))
//
//    output = T(boxFeatures, result) // model.updateOutput(input)
//    output
//  }

  private[nn] def clsPredictor(numClass: Int,
                               inChannels: Int): Module[Float] = {
    val cls_score = Linear[Float](inChannels, numClass).setName("cls_score")
    cls_score.weight.apply1(_ => RNG.normal(0, 0.01).toFloat)
    cls_score.bias.fill(0.0f)
    cls_score.asInstanceOf[Module[Float]]
  }

  private[nn] def bboxPredictor(numClass: Int,
                               inChannels: Int): Module[Float] = {
    val bbox_pred = Linear[Float](inChannels, numClass * 4).setName("bbox_pred")
    bbox_pred.weight.apply1(_ => RNG.normal(0, 0.001).toFloat)
    bbox_pred.bias.fill(0.0f)
    bbox_pred.asInstanceOf[Module[Float]]
  }

  private[nn] def featureExtractor(inChannels: Int,
                                   resolution: Int,
                                   scales: Array[Float], samplingRatio: Int,
                                   representationSize: Int): Module[Float] = {
    val pooler = new Pooler(resolution, scales, samplingRatio)
    val inputSize = inChannels * math.pow(resolution, 2).toInt

    val fc1 = Linear[Float](inputSize, representationSize, withBias = true)
      .setInitMethod(Xavier, Zeros)
      .setName("fc6")
    val fc2 = Linear[Float](representationSize, representationSize, withBias = true)
      .setInitMethod(Xavier, Zeros)
      .setName("fc7")

    val model = Sequential[Float]()
      .add(pooler)
      .add(InferReshape(Array(0, -1)))
      .add(fc1)
      .add(ReLU[Float]())
      .add(fc2)
      .add(ReLU[Float]())

    model
  }
}

private[nn] class BoxPostProcessor(
    val scoreThresh: Float,
    val nmsThresh: Float,
    val maxPerImage: Int,
    val nClasses: Int,
    val weight: Array[Float] = Array(10.0f, 10.0f, 5.0f, 5.0f)
  ) (implicit ev: TensorNumeric[Float]) extends AbstractModule[Table, Table, Float] {

  private val softMax = SoftMax[Float]()
  private val nmsTool: Nms = new Nms
  @transient  private var boxesBuf: Tensor[Float] = null
  @transient  private var concatBoxes: Tensor[Float] = null

  /**
   * Returns bounding-box detection results by thresholding on scores and
   * applying non-maximum suppression (NMS).
   */
  private[nn] def filterResults(boxes: Tensor[Float], scores: Tensor[Float],
                                numOfClasses: Int): Array[RoiLabel] = {
    val dim = numOfClasses * 4
    boxes.resize(Array(boxes.nElement() / dim, dim))
    scores.resize(Array(scores.nElement() / numOfClasses, numOfClasses))

    val results = new Array[RoiLabel](numOfClasses)
    // skip clsInd = 0, because it's the background class
    var clsInd = 1
    while (clsInd < numOfClasses) {
      results(clsInd) = postProcessOneClass(scores, boxes, clsInd)
      clsInd += 1
    }
    // Limit to max_per_image detections *over all classes*
    if (maxPerImage > 0) {
      limitMaxPerImage(results)
    }
    results
  }

  private def postProcessOneClass(scores: Tensor[Float], boxes: Tensor[Float],
                                  clsInd: Int): RoiLabel = {
    val inds = (1 to scores.size(1)).filter(ind =>
      scores.valueAt(ind, clsInd + 1) > scoreThresh).toArray
    if (inds.length == 0) return null
    val clsScores = selectTensor(scores.select(2, clsInd + 1), inds, 1)
    val clsBoxes = selectTensor(boxes.narrow(2, clsInd * 4 + 1, 4), inds, 1)

    val keepN = nmsTool.nms(clsScores, clsBoxes, nmsThresh, inds, bboxIdx = true)

    val bboxNms = selectTensor(clsBoxes, inds, 1, keepN)
    val scoresNms = selectTensor(clsScores, inds, 1, keepN)

    RoiLabel(scoresNms, bboxNms)
  }

  private def selectTensor(matrix: Tensor[Float], indices: Array[Int],
    dim: Int, indiceLen: Int = -1, out: Tensor[Float] = null): Tensor[Float] = {
    require(dim == 1 || dim == 2, s"dim should be 1 or 2, but get ${dim}")
    var i = 1
    val n = if (indiceLen == -1) indices.length else indiceLen
    if (matrix.nDimension() == 1) {
      val res = if (out == null) {
        Tensor[Float](n)
      } else {
        out.resize(n)
      }
      while (i <= n) {
        res.update(i, matrix.valueAt(indices(i - 1)))
        i += 1
      }
      return res
    }
    // select rows
    if (dim == 1) {
      val res = if (out == null) {
        Tensor[Float](n, matrix.size(2))
      } else {
        out.resize(n, matrix.size(2))
      }
      while (i <= n) {
        res.update(i, matrix(indices(i - 1)))
        i += 1
      }
      res
    } else {
      val res = if (out == null) {
        Tensor[Float](matrix.size(1), n)
      } else {
        out.resize(matrix.size(1), n)
      }
      while (i <= n) {
        var rid = 1
        val value = matrix.select(2, indices(i - 1))
        while (rid <= res.size(1)) {
          res.setValue(rid, i, value.valueAt(rid))
          rid += 1
        }
        i += 1
      }
      res
    }
  }

  private def resultToTensor(results: Array[RoiLabel],
                             labels: Array[Float], labelsOffset: Int,
                             bbox: Array[Float], bboxOffset : Int,
                             scores: Array[Float], scoresOffset: Int)
    : Unit = {
    var bboxPos = bboxOffset
    var labelsPos = labelsOffset
    var scoresPos = scoresOffset

    (0 until nClasses).foreach(c => {
      val label = results(c)
      if (null != label) {
        (1 to label.size()).foreach(j => {
          labels(labelsPos) = c
          scores(scoresPos) = label.classes.valueAt(j)
          bbox(bboxPos) = label.bboxes.valueAt(j, 1)
          bbox(bboxPos + 1) = label.bboxes.valueAt(j, 2)
          bbox(bboxPos + 2) = label.bboxes.valueAt(j, 3)
          bbox(bboxPos + 3) = label.bboxes.valueAt(j, 4)

          bboxPos += 4
          scoresPos += 1
          labelsPos += 1
        })
      }
    })
  }

  private def limitMaxPerImage(results: Array[RoiLabel]): Unit = {
    val nImageScores = (1 until nClasses).map(j => if (results(j) == null) 0
    else results(j).classes.size(1)).sum
    if (nImageScores > maxPerImage) {
      val imageScores = ArrayBuffer[Float]()
      var j = 1
      while (j < nClasses) {
        if (results(j) != null) {
          val res = results(j).classes
          if (res.nElement() > 0) {
            res.apply1(x => {
              imageScores.append(x)
              x
            })
          }
        }
        j += 1
      }
      val imageThresh = imageScores.sortWith(_ < _)(imageScores.length - maxPerImage)
      j = 1
      while (j < nClasses) {
        if (results(j) != null) {
          val box = results(j).classes
          val keep = (1 to box.size(1)).filter(x =>
            box.valueAt(x) >= imageThresh).toArray
          val selectedScores = selectTensor(results(j).classes, keep, 1)
          val selectedBoxes = selectTensor(results(j).bboxes, keep, 1)
          if (selectedScores.nElement() == 0) {
            results(j).classes.set()
            results(j).bboxes.set()
          } else {
            results(j).classes.resizeAs(selectedScores).copy(selectedScores)
            results(j).bboxes.resizeAs(selectedBoxes).copy(selectedBoxes)
          }
        }
        j += 1
      }
    }
  }

  /**
   * input contains:the class logits, the box_regression and
   * bounding boxes that are used as reference, one for ech image
   * @param input
   * @return labels and bbox
   */
  override def updateOutput(input: Table): Table = {
    if (isTraining()) {
      output = input
      return output
    }
    val classLogits = input[Tensor[Float]](1)
    val boxRegression = input[Tensor[Float]](2)
    val bbox = input[Table](3)

    val boxesInImage = new Array[Int](bbox.length())
    for (i <- 0 to boxesInImage.length - 1) {
      boxesInImage(i) = bbox[Tensor[Float]](i + 1).size(1)
    }

    if (boxesBuf == null) boxesBuf = Tensor[Float]
    boxesBuf.resizeAs(boxRegression)
    if (concatBoxes == null) concatBoxes = Tensor[Float]
    concatBoxes.resize(boxesInImage.product, 4)
    var start = 1
    for (i <- 0 to boxesInImage.length - 1) {
      val length = boxesInImage(i)
      concatBoxes.narrow(1, start, length).copy(bbox[Tensor[Float]](i + 1))
      start += length
    }

    val classProb = softMax.forward(classLogits)
    BboxUtil.decodeWithWeight(boxRegression, concatBoxes, weight, boxesBuf)

    if (output.toTable.length() == 0) {
      output.toTable(1) = Tensor[Float]() // for labels
      output.toTable(2) = T() // for bbox, use table in case of batch
      output.toTable(3) = Tensor[Float]() // for scores
    }

    val outLabels = output.toTable[Tensor[Float]](1)
    val outBBoxs = output.toTable[Table](2)
    val outScores = output.toTable[Tensor[Float]](3)

    val totalROILables = T()
    var totalDetections = 0
    start = 1
    for (i <- 0 to boxesInImage.length - 1) {
      val boxNum = boxesInImage(i)

      val proposalNarrow = boxesBuf.narrow(1, start, boxNum)
      val classProbNarrow = classProb.narrow(1, start, boxNum)
//      // debug
//      classProbNarrow.fill(0.012345679f)
      val roilabels = filterResults(proposalNarrow, classProbNarrow, nClasses)
      if (outBBoxs.getOrElse[Tensor[Float]](i + 1, null) == null) {
        outBBoxs(i + 1) = Tensor[Float]()
      }
      var maxDetection = 0
      roilabels.foreach(res => {
        if (null != res) {
          maxDetection += res.size()
        }
      })
      totalDetections += maxDetection
      outBBoxs[Tensor[Float]](i + 1).resize(maxDetection, 4)
      totalROILables(i + 1) = roilabels
    }

    // resize labels and scores
    outLabels.resize(totalDetections)
    outScores.resize(totalDetections)

    val labels = outLabels.storage().array()
    val scores = outScores.storage().array()
    var labelsOffset = outLabels.storageOffset() - 1
    var scoresOffset = outScores.storageOffset() - 1
    for (i <- 0 to boxesInImage.length - 1) {
      val roilabels = totalROILables[Array[RoiLabel]](i + 1)
      val bbox = outBBoxs[Tensor[Float]](i + 1).storage().array()
      val bboxOffset = outBBoxs[Tensor[Float]](i + 1).storageOffset() - 1

      resultToTensor(roilabels, labels, labelsOffset, bbox, bboxOffset, scores, scoresOffset)
      labelsOffset += outBBoxs[Tensor[Float]](i + 1).size(1)
      scoresOffset += outBBoxs[Tensor[Float]](i + 1).size(1)
    }

    output
  }

  override def updateGradInput(input: Table, gradOutput: Table): Table = {
    gradInput = gradOutput.toTable
    gradInput
  }
}

object BoxHead {
  def apply(inChannels: Int,
  resolution: Int = 7,
  scales: Array[Float] = Array[Float](0.25f, 0.125f, 0.0625f, 0.03125f),
  samplingRatio: Int = 2,
  scoreThresh: Float = 0.05f,
  nmsThresh: Float = 0.5f,
  maxPerImage: Int = 100,
  outputSize: Int = 1024,
  numClasses: Int = 81 // coco dataset class number
  ) ( implicit ev: TensorNumeric[Float]): BoxHead =
    new BoxHead(inChannels, resolution, scales, samplingRatio,
      scoreThresh, nmsThresh, maxPerImage, outputSize, numClasses)
}
