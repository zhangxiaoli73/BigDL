/*
 * Copyright 2016 The BigDL Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.intel.analytics.bigdl.models.maskrcnn

import com.intel.analytics.bigdl.dataset.segmentation.{RLEMasks, SegmentationMasks}
import com.intel.analytics.bigdl.tensor.Tensor
import com.intel.analytics.bigdl.utils.T

import scala.collection.mutable.ArrayBuffer
import scala.io.Source

object GroudTrue {
  val masks = new ArrayBuffer[RLEMasks]()
  var bbox: Tensor[Float] = null
  var scores: Tensor[Float] = null
  var labels: Tensor[Float] = null

  def getMasks(height: Int = 426, wide: Int = 640): Array[RLEMasks] = {
    var path = "/home/zhangli/workspace/masks"

    for (line <- Source.fromFile(path).getLines) {
      var arr = new ArrayBuffer[Int]
      val ss = line.split(",")
      for (i <- 0 to ss.length - 1) {
        if (ss(i) != "") {
          arr.append(ss(i).trim.toInt)
        }
      }
      if (arr.length > 0) {
        // masks.append(RLEMasks(counts = arr.toArray, height = 640, width = 586))
        masks.append(RLEMasks(counts = arr.toArray, height, wide))
      }
    }
    masks.toArray
  }

//  bbox = Tensor[Float](T(T(1.9018,  62.7829, 576.7942, 640.0000)))
//  scores = Tensor[Float](T(0.9869))
//  labels = Tensor[Float](T(21)).add(1.0f)


  bbox = Tensor[Float](T(T(417.3330, 159.2703, 464.9938, 302.2726),
    T(294.7574, 220.0893, 350.0277, 316.5251),
    T( 11.6049, 167.7169, 155.3136, 264.1229),
    T(359.8092, 215.1318, 436.3222, 319.8548),
    T(240.7738, 198.4755, 253.5157, 212.7435),
    T(492.7740, 171.5571, 512.9583, 282.2723),
    T(555.2320, 208.8113, 639.8688, 292.7082),
    T(447.0240, 168.0221, 512.8489, 294.3395),
    T(230.3621, 175.2054, 266.8032, 213.6975),
    T(383.5909, 172.0776, 401.5500, 209.0266),
    T(472.7927, 353.6064, 636.8519, 424.6614),
    T(414.8894, 218.7193, 440.8969, 305.4766),
    T(352.1938, 208.2727, 360.2498, 220.6076),
    T(449.2537, 121.4660, 461.4013, 142.1426),
    T(352.4830, 207.7335, 361.3525, 229.8628),
    T(166.6290, 233.8112, 186.4726, 268.5609),
    T(304.9292, 216.5568, 347.2451, 231.9525),
    T(549.5795, 302.5143, 587.2719, 400.7771),
    T(475.6705, 170.9484, 511.7452, 284.5328),
    T(312.3893, 217.8235, 444.0247, 319.9958),
    T(360.2480, 215.1518, 373.5209, 231.2549),
    T(343.6124, 176.9225, 369.6238, 229.7721),
    T(304.1451, 216.5622, 352.2842, 280.2068),
    T(350.8064, 200.3972, 361.1484, 220.1822),
    T(314.4720, 192.9891, 323.3147, 215.5589),
    T(549.3422, 299.5941, 588.2065, 400.5704),
    T(345.6223, 205.4728, 361.0250, 217.3935),
    T(512.5486, 205.6213, 527.0131, 221.0674),
    T(321.8412, 229.2600, 386.3385, 235.8410),
    T(458.8822, 201.6611, 504.8474, 287.7690),
    T(312.6845, 214.5589, 352.5573, 254.0251),
    T(391.7673, 213.9978, 449.2121, 305.7839),
    T(491.1425, 153.2469, 503.5897, 172.4736),
    T(381.1419, 214.6591, 428.8497, 221.8952),
    T(295.6874, 224.8351, 391.2964, 313.8422),
    T(433.1376, 228.6608, 446.6098, 305.6834),
    T(360.0443, 221.8805, 390.3745, 309.5915),
    T(360.9703, 216.0269, 373.8470, 232.0872),
    T(338.9099, 202.8355, 347.0397, 215.5913),
    T(326.9630, 174.9713, 393.5737, 222.8819),
    T(299.2465, 216.2854, 367.4844, 233.3541),
    T(318.3905, 226.0262, 354.0516, 294.9078),
    T(319.4571, 231.8695, 387.1717, 265.0665),
    T(167.1438, 234.4066, 185.6409, 266.5588),
    T(333.0560, 182.0946, 364.0111, 224.7381),
    T(346.0088, 207.4512, 354.3376, 217.9982),
    T(313.9731, 191.8802, 324.3637, 215.9196),
    T(335.3662, 188.2675, 347.3576, 215.2973),
    T(333.4103, 215.5735, 351.7478, 230.2999),
    T(206.1072, 206.4902, 241.3318, 213.6281),
    T(475.3551, 136.8423, 516.7148, 171.8852),
    T(177.6569, 280.6164, 196.1420, 286.0707),
    T(352.9689, 217.7092, 362.7998, 230.7489),
    T(326.5261, 217.5819, 353.5474, 271.5482),
    T(495.1349, 139.3269, 525.1579, 173.6843),
    T(382.8256, 213.2945, 421.2440, 219.5880),
    T(462.4598, 223.5161, 492.2391, 297.4342),
    T(211.2538, 299.4154, 257.5159, 328.0514),
    T(511.9982, 223.1339, 542.0101, 282.1082),
    T(346.6712, 214.1534, 355.2430, 230.1398),
    T(360.1985, 215.7165, 374.3994, 231.8573),
    T(554.9628, 290.8138, 575.6541, 330.6915),
    T(126.5746, 358.1570, 484.5521, 421.3526),
    T(241.0349, 353.4987, 622.5386, 423.8275),
    T(175.2074, 293.0035, 188.3094, 301.2628),
    T(335.4746, 213.8899, 384.3273, 311.4037),
    T(554.3781, 290.0441, 576.9283, 331.6401),
    T(415.4587, 219.8282, 439.7774, 261.8254),
    T(356.7599, 213.4676, 376.8476, 310.6098),
    T(209.4841, 300.2274, 256.3551, 328.2820),
    T(356.9963, 215.8219, 435.0373, 231.3062),
    T(384.3533, 206.7908, 405.2127, 215.7961),
    T(458.0618, 204.0039, 505.6426, 286.4716),
    T(345.2252, 204.2198, 352.8401, 216.1332),
    T(457.8359, 158.8803, 467.7336, 167.6521),
    T(320.4307, 228.9287, 386.0320, 244.8296),
    T(314.2557, 226.7700, 389.5470, 238.3541),
    T(325.9111, 219.8407, 424.9819, 234.2269),
    T(360.3146, 212.7550, 373.8352, 230.9861),
    T(300.9426, 213.3153, 356.4877, 222.1488),
    T(399.7146, 200.9678, 407.3983, 217.1702),
    T(217.2957, 230.7468, 295.4615, 305.5939),
    T(359.3582, 214.9621, 386.7526, 270.9482),
    T(342.0008, 204.7746, 362.2255, 231.2142),
    T(549.4850, 292.6289, 590.2820, 401.3653),
    T(359.9647, 210.9669, 429.9320, 222.6413),
    T(209.5694, 299.5525, 256.3651, 328.9471),
    T(363.7507, 218.6233, 391.2826, 252.4771),
    T(304.0944, 212.8238, 339.5256, 217.7692),
    T(552.5105, 261.2242, 601.2972, 380.2779),
    T(554.9523, 290.7096, 575.2975, 330.5609)))

  scores = Tensor[Float](T(0.9950, 0.9947, 0.9941, 0.9748, 0.9420, 0.9400, 0.9205, 0.9132, 0.8335,
    0.7685, 0.7531, 0.7357, 0.7131, 0.7129, 0.7060, 0.6774, 0.6639, 0.6634,
    0.6372, 0.5656, 0.5307, 0.4887, 0.4641, 0.4260, 0.4230, 0.3446, 0.3145,
    0.2711, 0.2535, 0.2430, 0.2278, 0.1963, 0.1791, 0.1759, 0.1738, 0.1717,
    0.1616, 0.1578, 0.1578, 0.1558, 0.1510, 0.1437, 0.1437, 0.1386, 0.1277,
    0.1197, 0.1120, 0.1079, 0.1053, 0.1030, 0.1021, 0.1001, 0.0993, 0.0991,
    0.0965, 0.0946, 0.0866, 0.0863, 0.0862, 0.0860, 0.0859, 0.0823, 0.0817,
    0.0804, 0.0799, 0.0791, 0.0788, 0.0780, 0.0775, 0.0738, 0.0737, 0.0723,
    0.0715, 0.0711, 0.0709, 0.0686, 0.0678, 0.0673, 0.0661, 0.0643, 0.0639,
    0.0638, 0.0630, 0.0628, 0.0625, 0.0593, 0.0591, 0.0584, 0.0547, 0.0538,
    0.0513))

  labels = Tensor[Float](
    T(0, 56, 62, 56, 75, 72, 62, 72, 58,  0, 60, 56, 75, 74, 75, 75, 56, 39,
    72, 60, 75, 58, 56, 75, 75, 75, 75, 68, 60, 72, 56, 56, 58, 60, 60, 56,
    56, 40, 75, 58, 60, 56, 60, 41, 58, 75, 40, 58, 56, 73, 62, 73, 75, 56,
    62, 60, 56, 28, 72, 56, 56, 73, 60, 60, 73, 56, 56, 56, 56, 26, 56, 73,
    69, 75,  0, 60, 60, 56, 58, 60, 39, 56, 56, 75, 58, 60, 56, 56, 56, 58,
    41)).add(1.0f)

}
