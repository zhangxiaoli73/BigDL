/*
 * Copyright 2016 The BigDL Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intel.analytics.bigdl.nn

import com.intel.analytics.bigdl.tensor.Tensor
import com.intel.analytics.bigdl.transform.vision.image.util.{BboxUtil, BoundingBox}
import com.intel.analytics.bigdl.utils.T
import org.dmg.pmml.False
import org.scalatest.{BeforeAndAfter, FlatSpec, Matchers}

class FPNPostProcessorSpec extends FlatSpec with Matchers {

  "FPNPostProcessor" should "be ok" in {
    val score_thresh: Float = 0.05f
    val nms_thresh: Float = 0.5f
    val detections_per_img: Int = 100
    val cls_agnostic_bbox_reg: Boolean = false
    val bbox_aug_enabled: Boolean = false

    val input1 = Tensor[Float](T(
      T(-0.1371,  0.0440,  0.0278, -0.0497,  0.0230, -0.0891,  0.1412,  0.0145,
        0.0362, -0.0595,  0.1749, -0.0165,  0.1108, -0.0236,  0.1802, -0.0237,
        0.0933, -0.0465,  0.2292,  0.0397,  0.0810, -0.0129,  0.0196,  0.0730,
        0.0106,  0.0211,  0.1229,  0.1161, -0.1645,  0.1126, -0.0950,  0.0710,
        0.0730, -0.0665,  0.1186,  0.0752, -0.0329, -0.0617,  0.0648,  0.1061,
        0.2008,  0.0369, -0.0168, -0.0779,  0.0057, -0.0270,  0.0768,  0.0263,
        -0.0930, -0.1117, -0.0054, -0.1119,  0.0947,  0.1996,  0.1357, -0.1661,
        0.0306,  0.0887,  0.1627,  0.2318,  0.0244,  0.0745, -0.0021,  0.0362,
        0.0597,  0.0019, -0.0447,  0.0604,  0.0849,  0.0856,  0.0782,  0.0053,
        -0.0013,  0.1373,  0.0098,  0.0908, -0.0976,  0.0185,  0.0041, -0.1326,
        -0.0009),
      T(-0.1668,  0.0371,  0.0283, -0.0709,  0.0243, -0.0598,  0.1368,  0.0151,
        0.0014, -0.0516,  0.1817,  0.0419,  0.1410, -0.0400,  0.1492, -0.0280,
        0.0917, -0.0229,  0.2183,  0.0348,  0.1033, -0.0093,  0.0492,  0.0146,
        0.0336, -0.0272,  0.0998,  0.0833, -0.1424,  0.0875, -0.1054,  0.0507,
        0.0463, -0.0451,  0.0982,  0.1029, -0.0622, -0.0312,  0.0771,  0.1414,
        0.1023,  0.0049, -0.0598, -0.0352, -0.0151, -0.0293,  0.0722,  0.0727,
        -0.0390, -0.1173,  0.0153, -0.1377,  0.1180,  0.1748,  0.1008, -0.1194,
        -0.0097,  0.0877,  0.1579,  0.2225,  0.0006,  0.0838, -0.0093,  0.0194,
        0.0839, -0.0007, -0.0418,  0.0403,  0.0656,  0.0942,  0.1191, -0.0235,
        0.0167,  0.1526,  0.0084,  0.0994, -0.0562,  0.1054,  0.0539, -0.1054,
        -0.0425)))

    val input2 = Tensor[Float](T(
      T(1.3661e-02, -1.5969e-02, -5.9290e-03,  1.8143e-02,  1.6237e-02,
        1.3777e-02,  1.7327e-02,  2.7747e-03,  2.3234e-03, -2.4683e-02,
        -4.6764e-03, -1.5181e-02,  2.2511e-03, -1.0680e-02, -8.6638e-03,
        -8.1392e-04,  4.3010e-03,  2.2984e-03, -1.1075e-04,  2.5192e-03,
        3.7293e-03,  4.5914e-03,  7.4328e-04,  1.3598e-02,  2.1697e-02,
        -1.2982e-02, -2.7786e-03, -5.5487e-03, -1.4818e-02, -6.6994e-03,
        7.2817e-05,  1.7714e-02,  9.4883e-03, -1.3120e-02,  8.2604e-03,
        -2.5319e-04,  2.0901e-03, -1.5276e-03,  3.0417e-03,  6.4315e-03,
        -2.0766e-02,  1.7414e-02, -1.2154e-02,  8.9248e-03,  2.8219e-03,
        8.8979e-03, -1.6514e-02, -5.6355e-03,  1.6068e-02,  4.5205e-03,
        1.6125e-03, -7.3517e-03,  1.8342e-02, -6.5888e-05, -2.1047e-04,
        -9.0755e-04, -8.0835e-03,  2.9841e-03,  1.3073e-02, -3.6516e-03,
        1.2379e-02,  1.2722e-02, -2.4802e-03, -1.9914e-02, -6.1535e-04,
        -8.5233e-03,  6.6699e-03,  2.1765e-03, -3.8606e-03,  7.3144e-03,
        -1.8051e-03,  4.9700e-03, -1.1121e-02,  4.1682e-03, -8.6669e-03,
        -9.2954e-04,  3.7563e-04, -6.9444e-03,  1.4729e-03,  6.4981e-03,
        7.7078e-03,  8.9667e-03, -3.6054e-03, -1.6158e-02, -6.5347e-03,
        1.4964e-02, -7.3836e-03, -2.5321e-03,  3.9948e-03, -5.4285e-04,
        -1.5295e-02,  2.7546e-03, -8.4908e-03, -4.6551e-03,  5.5927e-04,
        1.5543e-02, -4.7723e-03,  1.0493e-02,  6.4895e-03,  1.4147e-02,
        -1.8565e-02, -1.9299e-02,  9.7874e-04,  1.4433e-02, -2.1955e-03,
        1.6294e-02,  1.3044e-02, -9.5193e-03, -6.6752e-03, -9.5884e-04,
        2.9285e-03, -9.7279e-03,  1.4390e-02,  6.0092e-03,  5.0495e-03,
        -3.8071e-03,  1.9877e-03,  4.2515e-03, -1.5387e-02, -1.6682e-02,
        -6.0809e-03, -1.1329e-02, -6.7931e-03,  1.6494e-02,  4.9138e-03,
        -1.2627e-03,  1.4018e-02,  3.5096e-04, -8.4504e-04, -9.2940e-03,
        4.2522e-03, -2.3363e-02,  6.3998e-03,  2.2115e-03, -9.9258e-03,
        -7.0226e-03,  6.2844e-03, -1.1065e-02, -1.3531e-02,  2.1513e-03,
        5.6689e-03, -1.0604e-03,  5.6464e-03, -6.4182e-03, -7.1815e-03,
        -1.4931e-02, -8.3965e-04, -9.3323e-03, -1.8467e-03, -1.0281e-03,
        -6.5093e-03,  3.2346e-03, -4.3760e-03, -1.9013e-02,  1.0435e-02,
        1.5070e-02,  4.2301e-03,  1.6412e-03, -1.7103e-02, -6.4496e-03,
        -3.8278e-03,  3.6479e-03, -2.8994e-03,  1.6793e-02, -2.9968e-03,
        3.1172e-03,  2.5375e-03,  7.0270e-03,  3.6239e-03, -7.0860e-03,
        -1.8149e-02, -3.7942e-03, -1.2530e-02, -1.1264e-02, -3.3323e-03,
        3.4543e-03,  1.0063e-02, -3.6748e-03,  1.4239e-02, -7.5735e-03,
        7.3133e-03, -1.9782e-03, -2.2172e-03, -1.0912e-03, -3.7825e-03,
        -7.4081e-04,  4.5590e-03,  5.3438e-03, -2.0137e-02, -1.9620e-03,
        6.2416e-03,  4.0682e-03,  1.3567e-03, -9.5075e-04,  4.6717e-04,
        -1.7814e-02, -7.7103e-04, -1.0783e-03,  1.3706e-02,  7.0475e-04,
        -4.9925e-04,  8.7880e-04, -1.7428e-02, -8.9522e-03,  3.8191e-03,
        2.9673e-03,  9.2092e-03,  4.4823e-03, -5.5942e-03,  3.2957e-03,
        1.7243e-02,  1.2292e-02,  2.9729e-03,  1.2354e-02, -2.6377e-03,
        -5.8388e-04, -6.0909e-03,  1.9190e-03, -1.5601e-03,  2.6388e-03,
        1.6506e-02, -1.2885e-03,  3.3878e-03,  2.5893e-02, -5.4612e-05,
        6.4574e-03, -2.3816e-03,  9.2435e-03, -6.6578e-03,  5.4547e-03,
        1.5704e-03, -2.0293e-03, -2.6737e-03,  8.7105e-03,  2.1711e-02,
        -2.4641e-02,  6.1686e-03,  8.8161e-04, -3.0827e-03, -8.8028e-03,
        6.9194e-03,  8.3028e-04, -1.0538e-02, -2.9566e-03, -1.2682e-02,
        9.2352e-03,  5.3863e-03,  7.6400e-03,  2.2716e-03, -8.4753e-03,
        -1.1846e-02,  2.5826e-02, -6.1796e-03, -2.9242e-03,  1.4730e-03,
        -1.3617e-02,  6.2193e-03,  1.9359e-02,  8.1467e-04,  5.5846e-03,
        -1.4939e-02,  1.0488e-02, -1.8130e-03,  5.7163e-03, -6.2896e-03,
        -5.6848e-03,  8.5823e-03,  7.5564e-03,  3.7059e-03,  7.8826e-03,
        2.0233e-03,  4.2189e-03,  2.7457e-03, -9.6326e-03, -3.5484e-03,
        -3.7892e-04, -9.1349e-03, -2.7773e-03, -1.9159e-03,  3.8842e-03,
        1.2862e-02, -4.7707e-03,  3.5862e-03,  1.2511e-02,  1.3060e-03,
        -3.8291e-03,  1.6206e-03,  2.5615e-03,  1.1594e-03, -8.1862e-03,
        -7.3836e-03, -1.4762e-02,  1.4097e-02, -2.9509e-03,  1.8827e-02,
        -4.2922e-03, -2.3085e-03,  4.6543e-03,  1.9951e-03, -3.1339e-03,
        -2.9166e-03,  4.1162e-03, -1.9522e-02, -1.4711e-02,  5.7154e-04,
        -1.3359e-02,  1.6769e-02,  5.1254e-03,  2.4062e-04,  5.0682e-03,
        -3.3154e-03,  1.1630e-02,  1.1256e-02, -1.2214e-02,  1.2074e-02,
        1.1045e-02,  3.1662e-03, -3.9489e-03, -1.1755e-03, -2.0921e-02,
        8.7897e-04,  6.8785e-03,  7.2665e-03,  2.4340e-03),
      T( 1.2621e-02, -2.1212e-02, -4.8419e-03,  1.8352e-02,  1.4309e-02,
        7.7016e-03,  1.5640e-02,  3.5949e-03,  1.7785e-03, -2.3214e-02,
        -3.1563e-03, -1.2737e-02,  2.2589e-03, -1.2418e-02, -5.2792e-03,
        -2.9588e-03,  5.2810e-03,  6.9386e-03,  2.4073e-03,  1.5306e-03,
        3.1790e-03,  6.7547e-03,  2.5636e-03,  1.6852e-02,  2.0628e-02,
        -1.6845e-02, -5.7982e-04, -6.6146e-03, -9.2885e-03, -3.6907e-03,
        3.4162e-03,  1.5163e-02,  5.6014e-03, -1.3949e-02,  5.7968e-03,
        1.7021e-03,  6.8812e-03,  1.5124e-04,  5.0120e-03,  6.8222e-03,
        -1.5536e-02,  1.5584e-02, -1.4665e-02,  7.6578e-03,  6.4390e-03,
        7.9877e-03, -1.6974e-02, -5.0131e-03,  1.9200e-02,  5.7378e-03,
        -2.1136e-03, -7.0412e-03,  1.7766e-02, -2.5316e-03, -4.5450e-03,
        1.7952e-03, -1.0353e-02,  6.4365e-04,  1.3593e-02, -8.1278e-03,
        1.4217e-02,  8.3415e-03, -2.2200e-03, -1.9228e-02,  7.6278e-04,
        -1.0273e-02,  8.6297e-03, -2.1147e-03, -2.6936e-03,  9.8119e-03,
        -3.7311e-04,  2.7479e-03, -1.1043e-02,  1.6820e-03, -8.5669e-03,
        1.2694e-03,  4.4525e-03, -1.2690e-02,  1.9066e-03,  5.2323e-03,
        5.8080e-03,  8.5452e-03,  3.6153e-05, -1.6958e-02, -1.2980e-02,
        8.8372e-03, -8.5977e-03, -5.9714e-03,  5.5263e-03, -6.2011e-03,
        -1.2598e-02,  1.7239e-03, -4.3963e-03, -2.2388e-03,  2.9121e-03,
        1.6235e-02, -6.3379e-03,  7.2674e-03,  1.7298e-03,  1.1801e-02,
        -1.7498e-02, -1.8339e-02, -7.9902e-04,  1.1260e-02, -2.2013e-03,
        1.4529e-02,  1.0201e-02, -7.9079e-03, -7.3301e-03, -5.2648e-03,
        2.5809e-03, -1.0160e-02,  1.7324e-02,  2.2929e-03,  4.1363e-03,
        -1.8203e-03, -1.4399e-03,  3.0207e-03, -1.4282e-02, -1.4859e-02,
        1.5763e-04, -1.1507e-02, -5.4306e-03,  1.4394e-02,  7.1215e-03,
        7.5245e-04,  1.2570e-02,  1.1300e-03, -2.3292e-03, -9.6025e-03,
        5.9678e-03, -1.7275e-02,  5.5973e-03,  1.5008e-03, -7.9663e-03,
        -8.0280e-03,  5.7592e-03, -1.3230e-02, -8.2239e-03,  2.2626e-03,
        8.1192e-03, -5.1489e-05,  4.2694e-03, -7.4514e-03, -4.1249e-03,
        -8.0771e-03, -2.6722e-03, -1.2477e-02,  1.7695e-03,  3.1197e-04,
        -3.9191e-03,  5.3806e-03, -5.4086e-03, -1.9949e-02,  8.5008e-03,
        8.1793e-03,  4.4004e-03,  7.2492e-04, -1.4310e-02, -1.0314e-02,
        3.2957e-03,  1.0393e-04, -3.9220e-03,  1.5991e-02,  1.3799e-03,
        6.2671e-03,  3.7742e-03,  5.8839e-03,  1.2226e-03, -5.8550e-03,
        -1.6242e-02, -4.6316e-03, -1.3484e-02, -8.9989e-03, -4.7459e-04,
        5.7019e-03,  9.5214e-03, -4.7693e-03,  1.2359e-02, -3.2113e-03,
        7.4007e-03,  3.8718e-03,  1.9313e-04, -8.5847e-05, -4.0087e-03,
        -2.1550e-03,  4.8936e-03,  1.9627e-03, -1.9694e-02, -4.3090e-03,
        1.0197e-02,  9.1722e-03,  2.0254e-03, -2.5325e-03, -5.4694e-03,
        -1.5716e-02,  1.2401e-03,  9.0511e-04,  1.0689e-02, -1.3818e-03,
        -1.7211e-03, -3.1243e-03, -1.8217e-02, -5.9788e-03,  1.6706e-03,
        1.5755e-03,  1.2467e-02,  3.7459e-03, -5.2582e-03,  2.0117e-03,
        1.6675e-02,  1.4236e-02,  2.6192e-03,  1.1884e-02, -5.1248e-04,
        -1.0401e-03, -4.7287e-03,  4.8131e-03, -1.8929e-05,  3.4035e-03,
        1.6172e-02, -4.0935e-03,  1.8113e-03,  2.1257e-02, -1.2091e-03,
        1.3943e-04, -3.8267e-03,  2.2029e-03, -5.6691e-03, -1.4794e-04,
        4.0543e-05, -2.9341e-03, -4.5355e-03,  6.6832e-03,  2.0869e-02,
        -2.3335e-02,  6.3507e-03,  2.1044e-04, -2.8030e-03, -8.8646e-03,
        9.4434e-03, -3.7360e-03, -1.4233e-02,  1.2009e-03, -1.2412e-02,
        8.6193e-03,  2.3621e-03,  9.2802e-03,  2.8975e-03, -1.0630e-02,
        -1.3402e-02,  2.6146e-02, -4.4324e-03, -2.9439e-03,  2.8298e-03,
        -8.8711e-03,  6.1780e-04,  1.5983e-02,  1.6677e-03,  3.8481e-03,
        -1.6531e-02,  1.2274e-02, -2.5816e-03,  8.8967e-03, -4.8722e-03,
        -6.5742e-03,  1.0454e-02,  4.0878e-03,  4.6893e-03,  9.0270e-03,
        2.8767e-03,  2.7505e-03, -2.8669e-04, -7.4599e-03,  1.8388e-04,
        -1.4939e-03, -7.5892e-03, -6.4918e-04,  5.3663e-04,  3.0753e-03,
        1.0855e-02, -8.4266e-04,  1.6654e-03,  1.3610e-02,  7.3313e-04,
        -5.6062e-03,  3.8173e-03,  5.6876e-03, -1.3710e-04, -9.1370e-03,
        -6.3609e-03, -1.4027e-02,  1.6917e-02, -1.7411e-03,  1.4715e-02,
        -8.5485e-03, -4.3225e-04,  5.7140e-03,  6.9674e-03, -5.6322e-03,
        -3.6362e-03,  4.5843e-03, -1.3959e-02, -1.6063e-02,  1.8512e-03,
        -1.2314e-02,  1.3943e-02,  2.5980e-03, -1.8464e-03, -1.2093e-03,
        -2.5367e-03,  8.3252e-03,  1.1078e-02, -1.5850e-02,  8.6851e-03,
        1.0877e-02,  4.1188e-03, -3.6878e-03, -2.4422e-03, -1.7540e-02,
        -2.0604e-03,  6.6689e-03,  9.2843e-03,  2.3915e-03)))

    val imageInfo = Tensor[Float](T(10, 15))
    val bbox = Tensor[Float](T((1.0f,  3.0f,  2.0f,  6.0f), (3.0f,  5.0f,  6.0f, 10.0f)))
  }

  "boxdecoder" should "be ok" in {

    val input2 = Tensor[Float](T(
      T(1.3661e-02, -1.5969e-02, -5.9290e-03,  1.8143e-02,  1.6237e-02,
        1.3777e-02,  1.7327e-02,  2.7747e-03,  2.3234e-03, -2.4683e-02,
        -4.6764e-03, -1.5181e-02,  2.2511e-03, -1.0680e-02, -8.6638e-03,
        -8.1392e-04,  4.3010e-03,  2.2984e-03, -1.1075e-04,  2.5192e-03,
        3.7293e-03,  4.5914e-03,  7.4328e-04,  1.3598e-02,  2.1697e-02,
        -1.2982e-02, -2.7786e-03, -5.5487e-03, -1.4818e-02, -6.6994e-03,
        7.2817e-05,  1.7714e-02,  9.4883e-03, -1.3120e-02,  8.2604e-03,
        -2.5319e-04,  2.0901e-03, -1.5276e-03,  3.0417e-03,  6.4315e-03,
        -2.0766e-02,  1.7414e-02, -1.2154e-02,  8.9248e-03,  2.8219e-03,
        8.8979e-03, -1.6514e-02, -5.6355e-03,  1.6068e-02,  4.5205e-03,
        1.6125e-03, -7.3517e-03,  1.8342e-02, -6.5888e-05, -2.1047e-04,
        -9.0755e-04, -8.0835e-03,  2.9841e-03,  1.3073e-02, -3.6516e-03,
        1.2379e-02,  1.2722e-02, -2.4802e-03, -1.9914e-02, -6.1535e-04,
        -8.5233e-03,  6.6699e-03,  2.1765e-03, -3.8606e-03,  7.3144e-03,
        -1.8051e-03,  4.9700e-03, -1.1121e-02,  4.1682e-03, -8.6669e-03,
        -9.2954e-04,  3.7563e-04, -6.9444e-03,  1.4729e-03,  6.4981e-03,
        7.7078e-03,  8.9667e-03, -3.6054e-03, -1.6158e-02, -6.5347e-03,
        1.4964e-02, -7.3836e-03, -2.5321e-03,  3.9948e-03, -5.4285e-04,
        -1.5295e-02,  2.7546e-03, -8.4908e-03, -4.6551e-03,  5.5927e-04,
        1.5543e-02, -4.7723e-03,  1.0493e-02,  6.4895e-03,  1.4147e-02,
        -1.8565e-02, -1.9299e-02,  9.7874e-04,  1.4433e-02, -2.1955e-03,
        1.6294e-02,  1.3044e-02, -9.5193e-03, -6.6752e-03, -9.5884e-04,
        2.9285e-03, -9.7279e-03,  1.4390e-02,  6.0092e-03,  5.0495e-03,
        -3.8071e-03,  1.9877e-03,  4.2515e-03, -1.5387e-02, -1.6682e-02,
        -6.0809e-03, -1.1329e-02, -6.7931e-03,  1.6494e-02,  4.9138e-03,
        -1.2627e-03,  1.4018e-02,  3.5096e-04, -8.4504e-04, -9.2940e-03,
        4.2522e-03, -2.3363e-02,  6.3998e-03,  2.2115e-03, -9.9258e-03,
        -7.0226e-03,  6.2844e-03, -1.1065e-02, -1.3531e-02,  2.1513e-03,
        5.6689e-03, -1.0604e-03,  5.6464e-03, -6.4182e-03, -7.1815e-03,
        -1.4931e-02, -8.3965e-04, -9.3323e-03, -1.8467e-03, -1.0281e-03,
        -6.5093e-03,  3.2346e-03, -4.3760e-03, -1.9013e-02,  1.0435e-02,
        1.5070e-02,  4.2301e-03,  1.6412e-03, -1.7103e-02, -6.4496e-03,
        -3.8278e-03,  3.6479e-03, -2.8994e-03,  1.6793e-02, -2.9968e-03,
        3.1172e-03,  2.5375e-03,  7.0270e-03,  3.6239e-03, -7.0860e-03,
        -1.8149e-02, -3.7942e-03, -1.2530e-02, -1.1264e-02, -3.3323e-03,
        3.4543e-03,  1.0063e-02, -3.6748e-03,  1.4239e-02, -7.5735e-03,
        7.3133e-03, -1.9782e-03, -2.2172e-03, -1.0912e-03, -3.7825e-03,
        -7.4081e-04,  4.5590e-03,  5.3438e-03, -2.0137e-02, -1.9620e-03,
        6.2416e-03,  4.0682e-03,  1.3567e-03, -9.5075e-04,  4.6717e-04,
        -1.7814e-02, -7.7103e-04, -1.0783e-03,  1.3706e-02,  7.0475e-04,
        -4.9925e-04,  8.7880e-04, -1.7428e-02, -8.9522e-03,  3.8191e-03,
        2.9673e-03,  9.2092e-03,  4.4823e-03, -5.5942e-03,  3.2957e-03,
        1.7243e-02,  1.2292e-02,  2.9729e-03,  1.2354e-02, -2.6377e-03,
        -5.8388e-04, -6.0909e-03,  1.9190e-03, -1.5601e-03,  2.6388e-03,
        1.6506e-02, -1.2885e-03,  3.3878e-03,  2.5893e-02, -5.4612e-05,
        6.4574e-03, -2.3816e-03,  9.2435e-03, -6.6578e-03,  5.4547e-03,
        1.5704e-03, -2.0293e-03, -2.6737e-03,  8.7105e-03,  2.1711e-02,
        -2.4641e-02,  6.1686e-03,  8.8161e-04, -3.0827e-03, -8.8028e-03,
        6.9194e-03,  8.3028e-04, -1.0538e-02, -2.9566e-03, -1.2682e-02,
        9.2352e-03,  5.3863e-03,  7.6400e-03,  2.2716e-03, -8.4753e-03,
        -1.1846e-02,  2.5826e-02, -6.1796e-03, -2.9242e-03,  1.4730e-03,
        -1.3617e-02,  6.2193e-03,  1.9359e-02,  8.1467e-04,  5.5846e-03,
        -1.4939e-02,  1.0488e-02, -1.8130e-03,  5.7163e-03, -6.2896e-03,
        -5.6848e-03,  8.5823e-03,  7.5564e-03,  3.7059e-03,  7.8826e-03,
        2.0233e-03,  4.2189e-03,  2.7457e-03, -9.6326e-03, -3.5484e-03,
        -3.7892e-04, -9.1349e-03, -2.7773e-03, -1.9159e-03,  3.8842e-03,
        1.2862e-02, -4.7707e-03,  3.5862e-03,  1.2511e-02,  1.3060e-03,
        -3.8291e-03,  1.6206e-03,  2.5615e-03,  1.1594e-03, -8.1862e-03,
        -7.3836e-03, -1.4762e-02,  1.4097e-02, -2.9509e-03,  1.8827e-02,
        -4.2922e-03, -2.3085e-03,  4.6543e-03,  1.9951e-03, -3.1339e-03,
        -2.9166e-03,  4.1162e-03, -1.9522e-02, -1.4711e-02,  5.7154e-04,
        -1.3359e-02,  1.6769e-02,  5.1254e-03,  2.4062e-04,  5.0682e-03,
        -3.3154e-03,  1.1630e-02,  1.1256e-02, -1.2214e-02,  1.2074e-02,
        1.1045e-02,  3.1662e-03, -3.9489e-03, -1.1755e-03, -2.0921e-02,
        8.7897e-04,  6.8785e-03,  7.2665e-03,  2.4340e-03),
      T( 1.2621e-02, -2.1212e-02, -4.8419e-03,  1.8352e-02,  1.4309e-02,
        7.7016e-03,  1.5640e-02,  3.5949e-03,  1.7785e-03, -2.3214e-02,
        -3.1563e-03, -1.2737e-02,  2.2589e-03, -1.2418e-02, -5.2792e-03,
        -2.9588e-03,  5.2810e-03,  6.9386e-03,  2.4073e-03,  1.5306e-03,
        3.1790e-03,  6.7547e-03,  2.5636e-03,  1.6852e-02,  2.0628e-02,
        -1.6845e-02, -5.7982e-04, -6.6146e-03, -9.2885e-03, -3.6907e-03,
        3.4162e-03,  1.5163e-02,  5.6014e-03, -1.3949e-02,  5.7968e-03,
        1.7021e-03,  6.8812e-03,  1.5124e-04,  5.0120e-03,  6.8222e-03,
        -1.5536e-02,  1.5584e-02, -1.4665e-02,  7.6578e-03,  6.4390e-03,
        7.9877e-03, -1.6974e-02, -5.0131e-03,  1.9200e-02,  5.7378e-03,
        -2.1136e-03, -7.0412e-03,  1.7766e-02, -2.5316e-03, -4.5450e-03,
        1.7952e-03, -1.0353e-02,  6.4365e-04,  1.3593e-02, -8.1278e-03,
        1.4217e-02,  8.3415e-03, -2.2200e-03, -1.9228e-02,  7.6278e-04,
        -1.0273e-02,  8.6297e-03, -2.1147e-03, -2.6936e-03,  9.8119e-03,
        -3.7311e-04,  2.7479e-03, -1.1043e-02,  1.6820e-03, -8.5669e-03,
        1.2694e-03,  4.4525e-03, -1.2690e-02,  1.9066e-03,  5.2323e-03,
        5.8080e-03,  8.5452e-03,  3.6153e-05, -1.6958e-02, -1.2980e-02,
        8.8372e-03, -8.5977e-03, -5.9714e-03,  5.5263e-03, -6.2011e-03,
        -1.2598e-02,  1.7239e-03, -4.3963e-03, -2.2388e-03,  2.9121e-03,
        1.6235e-02, -6.3379e-03,  7.2674e-03,  1.7298e-03,  1.1801e-02,
        -1.7498e-02, -1.8339e-02, -7.9902e-04,  1.1260e-02, -2.2013e-03,
        1.4529e-02,  1.0201e-02, -7.9079e-03, -7.3301e-03, -5.2648e-03,
        2.5809e-03, -1.0160e-02,  1.7324e-02,  2.2929e-03,  4.1363e-03,
        -1.8203e-03, -1.4399e-03,  3.0207e-03, -1.4282e-02, -1.4859e-02,
        1.5763e-04, -1.1507e-02, -5.4306e-03,  1.4394e-02,  7.1215e-03,
        7.5245e-04,  1.2570e-02,  1.1300e-03, -2.3292e-03, -9.6025e-03,
        5.9678e-03, -1.7275e-02,  5.5973e-03,  1.5008e-03, -7.9663e-03,
        -8.0280e-03,  5.7592e-03, -1.3230e-02, -8.2239e-03,  2.2626e-03,
        8.1192e-03, -5.1489e-05,  4.2694e-03, -7.4514e-03, -4.1249e-03,
        -8.0771e-03, -2.6722e-03, -1.2477e-02,  1.7695e-03,  3.1197e-04,
        -3.9191e-03,  5.3806e-03, -5.4086e-03, -1.9949e-02,  8.5008e-03,
        8.1793e-03,  4.4004e-03,  7.2492e-04, -1.4310e-02, -1.0314e-02,
        3.2957e-03,  1.0393e-04, -3.9220e-03,  1.5991e-02,  1.3799e-03,
        6.2671e-03,  3.7742e-03,  5.8839e-03,  1.2226e-03, -5.8550e-03,
        -1.6242e-02, -4.6316e-03, -1.3484e-02, -8.9989e-03, -4.7459e-04,
        5.7019e-03,  9.5214e-03, -4.7693e-03,  1.2359e-02, -3.2113e-03,
        7.4007e-03,  3.8718e-03,  1.9313e-04, -8.5847e-05, -4.0087e-03,
        -2.1550e-03,  4.8936e-03,  1.9627e-03, -1.9694e-02, -4.3090e-03,
        1.0197e-02,  9.1722e-03,  2.0254e-03, -2.5325e-03, -5.4694e-03,
        -1.5716e-02,  1.2401e-03,  9.0511e-04,  1.0689e-02, -1.3818e-03,
        -1.7211e-03, -3.1243e-03, -1.8217e-02, -5.9788e-03,  1.6706e-03,
        1.5755e-03,  1.2467e-02,  3.7459e-03, -5.2582e-03,  2.0117e-03,
        1.6675e-02,  1.4236e-02,  2.6192e-03,  1.1884e-02, -5.1248e-04,
        -1.0401e-03, -4.7287e-03,  4.8131e-03, -1.8929e-05,  3.4035e-03,
        1.6172e-02, -4.0935e-03,  1.8113e-03,  2.1257e-02, -1.2091e-03,
        1.3943e-04, -3.8267e-03,  2.2029e-03, -5.6691e-03, -1.4794e-04,
        4.0543e-05, -2.9341e-03, -4.5355e-03,  6.6832e-03,  2.0869e-02,
        -2.3335e-02,  6.3507e-03,  2.1044e-04, -2.8030e-03, -8.8646e-03,
        9.4434e-03, -3.7360e-03, -1.4233e-02,  1.2009e-03, -1.2412e-02,
        8.6193e-03,  2.3621e-03,  9.2802e-03,  2.8975e-03, -1.0630e-02,
        -1.3402e-02,  2.6146e-02, -4.4324e-03, -2.9439e-03,  2.8298e-03,
        -8.8711e-03,  6.1780e-04,  1.5983e-02,  1.6677e-03,  3.8481e-03,
        -1.6531e-02,  1.2274e-02, -2.5816e-03,  8.8967e-03, -4.8722e-03,
        -6.5742e-03,  1.0454e-02,  4.0878e-03,  4.6893e-03,  9.0270e-03,
        2.8767e-03,  2.7505e-03, -2.8669e-04, -7.4599e-03,  1.8388e-04,
        -1.4939e-03, -7.5892e-03, -6.4918e-04,  5.3663e-04,  3.0753e-03,
        1.0855e-02, -8.4266e-04,  1.6654e-03,  1.3610e-02,  7.3313e-04,
        -5.6062e-03,  3.8173e-03,  5.6876e-03, -1.3710e-04, -9.1370e-03,
        -6.3609e-03, -1.4027e-02,  1.6917e-02, -1.7411e-03,  1.4715e-02,
        -8.5485e-03, -4.3225e-04,  5.7140e-03,  6.9674e-03, -5.6322e-03,
        -3.6362e-03,  4.5843e-03, -1.3959e-02, -1.6063e-02,  1.8512e-03,
        -1.2314e-02,  1.3943e-02,  2.5980e-03, -1.8464e-03, -1.2093e-03,
        -2.5367e-03,  8.3252e-03,  1.1078e-02, -1.5850e-02,  8.6851e-03,
        1.0877e-02,  4.1188e-03, -3.6878e-03, -2.4422e-03, -1.7540e-02,
        -2.0604e-03,  6.6689e-03,  9.2843e-03,  2.3915e-03)))

    val imageInfo = Tensor[Float](T(10, 15))
    val bbox = Tensor[Float](T(T(1.0f,  3.0f,  2.0f,  6.0f), T(3.0f,  5.0f,  6.0f, 10.0f)))

    val priorBoxes: Tensor[Float] = bbox // .select(1, 1)
    val priorVariances: Tensor[Float] = input2
    val isClipBoxes: Boolean = false
    val bboxes: Tensor[Float] = input2 // .select(1, 1)
    val varianceEncodedInTarget: Boolean = false
    val output: Tensor[Float] = null
    val decodedBoxes = Tensor[Float]().resizeAs(bboxes)

//    BboxUtil.decodeSingleBbox(1, priorBoxes, priorVariances,
//      isClipBoxes, bbox, varianceEncodedInTarget, decodedBoxes)

    BboxUtil.decodeSignalBoxNew(bboxes.select(1, 1), priorBoxes.select(1, 1),
      Tensor[Float](T(1.0f, 1.0f, 1.0f, 1.0f)), decodedBoxes.select(1, 1))

    BboxUtil.decode(bboxes, priorBoxes, Tensor[Float](T(1.0f, 1.0f, 1.0f, 1.0f)), decodedBoxes)

    val expectedOutput = Tensor[Float](T(
      T(1.0039,  2.9863,  2.0015,  6.0009,  0.9998,  3.0044,  2.0067,  6.0066,
      1.0014,  2.9962,  1.9995,  5.9841,  1.0022,  2.9961,  1.9987,  5.9954,
      1.0009,  2.9999,  2.0008,  6.0019,  1.0006,  2.9964,  2.0009,  6.0073,
      1.0049,  2.9970,  2.0038,  5.9926,  0.9970,  2.9902,  1.9971,  6.0044,
      1.0002,  2.9949,  2.0036,  5.9947,  0.9998,  2.9968,  2.0010,  6.0020,
      0.9983,  3.0034,  1.9934,  6.0105,  1.0039,  3.0058,  1.9973,  6.0013,
      1.0029,  3.0047,  2.0035,  5.9989,  1.0037,  3.0003,  2.0036,  5.9996,
      0.9958,  3.0027,  2.0010,  5.9997,  1.0030,  3.0130,  2.0020,  5.9971,
      0.9985,  2.9957,  2.0012,  5.9975,  0.9996,  3.0009,  1.9989,  6.0049,
      0.9995,  3.0020,  1.9960,  6.0013,  0.9998,  2.9946,  2.0004,  5.9998,
      1.0023,  3.0100,  2.0008,  5.9971,  1.0002,  3.0070,  1.9972,  6.0050,
      1.0039,  2.9987,  1.9977,  6.0009,  0.9982,  2.9919,  1.9984,  6.0044,
      0.9977,  2.9985,  2.0003,  6.0099,  0.9961,  2.9865,  1.9965,  5.9981,
      0.9969,  3.0103,  2.0022,  6.0027,  0.9981,  3.0035,  1.9993,  5.9957,
      1.0019,  3.0039,  2.0039,  6.0009,  1.0035,  3.0084,  1.9973,  5.9950,
      1.0001,  2.9889,  1.9974,  6.0021,  0.9982,  2.9994,  2.0038,  5.9996,
      0.9990,  3.0056,  2.0007,  5.9870,  1.0033,  3.0037,  1.9993,  5.9981,
      1.0040,  2.9947,  1.9986,  5.9964,  1.0000,  3.0021,  2.0023,  5.9970,
      0.9987,  2.9978,  1.9984,  5.9903,  1.0009,  2.9983,  1.9983,  6.0009,
      0.9970,  2.9864,  2.0012,  5.9984,  1.0043,  3.0032,  1.9974,  5.9981,
      0.9998,  2.9947,  1.9987,  6.0082,  0.9989,  2.9984,  1.9999,  6.0041,
      1.0043,  2.9987,  1.9971,  5.9956,  0.9982,  2.9941,  1.9968,  5.9969,
      0.9992,  3.0016,  2.0049,  5.9955,  1.0019,  2.9996,  2.0010,  5.9988,
      0.9983,  2.9976,  2.0002,  6.0018,  0.9947,  2.9976,  1.9972,  6.0008,
      1.0002,  3.0067,  2.0004,  5.9925,  0.9971,  2.9993,  2.0026,  5.9999,
      1.0034,  3.0039,  1.9964,  5.9968,  0.9989,  2.9994,  2.0026,  6.0030,
      0.9954,  2.9964,  2.0023,  6.0062,  1.0011,  3.0052,  2.0001,  6.0047,
      0.9991,  2.9997,  1.9985,  6.0018,  1.0026,  2.9891,  2.0040,  6.0099,
      1.0005,  2.9989,  1.9995,  6.0063,  0.9984,  3.0030,  1.9990,  6.0014,
      0.9951,  3.0133,  2.0038,  5.9937,  1.0019,  3.0039,  2.0006,  5.9968,
      1.0035,  3.0015,  1.9993,  5.9991,  0.9964,  3.0006,  1.9985,  6.0068,
      1.0028,  2.9863,  1.9981,  6.0070,  0.9985,  3.0043,  1.9991,  5.9934,
      1.0011,  3.0055,  2.0014,  6.0100,  0.9974,  3.0019,  1.9966,  6.0065,
      0.9970,  2.9947,  2.0005,  6.0008,  1.0003,  3.0015,  2.0011,  6.0048,
      1.0013,  2.9963,  1.9998,  5.9960,  0.9986,  2.9973,  1.9978,  6.0004,
      1.0019,  2.9931,  2.0033,  6.0031,  0.9999,  2.9974,  2.0006,  5.9995,
      1.0017,  3.0026,  1.9988,  5.9908,  0.9990,  3.0005,  2.0066,  5.9971,
      0.9991,  3.0031,  1.9999,  6.0006,  1.0033,  3.0075,  1.9955,  5.9958,
      0.9968,  2.9926,  2.0035,  5.9967,  1.0007,  2.9974,  1.9994,  6.0067,
      0.9998,  2.9907,  2.0047,  5.9995,  1.0009,  3.0068,  2.0004,  5.9901,
      0.9987,  3.0018,  2.0016,  6.0037),
      T( 3.0070,  4.9762,  6.0031,  9.9983,  2.9995,  5.0025,  6.0120, 10.0068,
        3.0020,  4.9937,  5.9994,  9.9784,  3.0030,  4.9943,  5.9988,  9.9908,
        3.0011,  5.0032,  6.0031, 10.0051,  3.0002,  4.9939,  6.0023, 10.0142,
        3.0085,  4.9939,  6.0080,  9.9859,  2.9949,  4.9887,  5.9977, 10.0069,
        2.9999,  4.9906,  6.0046,  9.9927,  3.0007,  4.9960,  6.0048, 10.0042,
        2.9996,  5.0048,  5.9879, 10.0139,  3.0094,  5.0078,  5.9958, 10.0018,
        3.0085,  5.0077,  6.0068,  9.9992,  3.0089,  4.9974,  6.0053,  9.9996,
        2.9904,  5.0053,  6.0013,  9.9955,  3.0066,  5.0165,  6.0048,  9.9935,
        2.9969,  4.9951,  6.0038,  9.9926,  2.9991,  5.0042,  5.9988, 10.0075,
        2.9990,  5.0002,  5.9922, 10.0018,  3.0010,  4.9892,  6.0025,  9.9955,
        3.0023,  5.0153,  6.0023,  9.9950,  2.9982,  5.0089,  5.9914, 10.0017,
        3.0072,  4.9952,  5.9972,  9.9973,  2.9971,  4.9889,  5.9994, 10.0084,
        2.9968,  4.9973,  5.9982, 10.0114,  2.9933,  4.9822,  5.9927,  9.9958,
        2.9950,  5.0135,  6.0032, 10.0040,  2.9960,  5.0029,  5.9981,  9.9908,
        3.0053,  5.0025,  6.0086, 10.0003,  3.0051,  5.0107,  5.9937,  9.9929,
        3.0022,  4.9844,  5.9979, 10.0017,  2.9978,  4.9998,  6.0079, 10.0011,
        2.9967,  5.0046,  6.0015,  9.9839,  3.0054,  5.0057,  5.9991,  9.9961,
        3.0056,  4.9907,  5.9990,  9.9934,  3.0015,  5.0044,  6.0050,  9.9955,
        2.9994,  5.0026,  5.9973,  9.9877,  3.0023,  4.9970,  5.9991, 10.0034,
        2.9944,  4.9831,  6.0012,  9.9929,  3.0075,  5.0066,  5.9960,  9.9943,
        3.0029,  4.9905,  5.9998, 10.0097,  2.9990,  5.0002,  6.0021, 10.0073,
        3.0070,  4.9993,  5.9940,  9.9937,  2.9948,  4.9912,  5.9944,  9.9980,
        2.9989,  4.9991,  6.0088,  9.9952,  3.0029,  5.0024,  6.0030, 10.0023,
        2.9964,  4.9975,  6.0004,  9.9999,  2.9880,  4.9919,  5.9962, 10.0029,
        3.0030,  5.0079,  5.9986,  9.9891,  2.9962,  5.0014,  6.0048,  9.9997,
        3.0066,  5.0017,  5.9920,  9.9945,  2.9957,  4.9987,  6.0057, 10.0032,
        2.9912,  4.9927,  6.0046, 10.0098,  3.0013,  5.0078,  6.0008, 10.0065,
        2.9981,  5.0008,  5.9981, 10.0049,  3.0057,  4.9848,  6.0072, 10.0103,
        3.0010,  4.9988,  5.9980, 10.0014,  2.9977,  5.0017,  5.9977,  9.9982,
        2.9898,  5.0180,  6.0066,  9.9900,  3.0037,  5.0054,  6.0014,  9.9948,
        3.0095,  4.9970,  5.9981,  9.9985,  2.9941,  4.9996,  5.9960, 10.0107,
        3.0065,  4.9779,  5.9958, 10.0094,  2.9971,  5.0036,  5.9994,  9.9929,
        2.9996,  5.0073,  6.0009, 10.0119,  2.9944,  5.0020,  5.9924, 10.0127,
        2.9939,  4.9936,  6.0022,  9.9985,  3.0007,  5.0038,  6.0030, 10.0071,
        2.9998,  4.9964,  6.0000,  9.9946,  2.9967,  4.9978,  5.9972, 10.0015,
        3.0037,  4.9913,  6.0050, 10.0077,  2.9988,  4.9932,  6.0018, 10.0001,
        3.0025,  5.0029,  5.9974,  9.9861,  3.0009,  5.0041,  6.0127,  9.9938,
        2.9970,  5.0068,  6.0026, 10.0001,  3.0041,  5.0124,  5.9930,  9.9931,
        2.9952,  4.9911,  6.0063,  9.9942,  3.0003,  4.9943,  5.9982, 10.0043,
        3.0010,  4.9840,  6.0079,  9.9970,  3.0026,  5.0083,  6.0007,  9.9873,
        2.9955,  5.0026,  6.0029, 10.0054)))

    println("done")
  }

  "filter result" should "be ok" in {
    val input = Tensor[Float](T(
      T(1.0039,  2.9863,  2.0015,  6.0009,  0.9998,  3.0044,  2.0067,  6.0066,
        1.0014,  2.9962,  1.9995,  5.9841,  1.0022,  2.9961,  1.9987,  5.9954,
        1.0009,  2.9999,  2.0008,  6.0019,  1.0006,  2.9964,  2.0009,  6.0073,
        1.0049,  2.9970,  2.0038,  5.9926,  0.9970,  2.9902,  1.9971,  6.0044,
        1.0002,  2.9949,  2.0036,  5.9947,  0.9998,  2.9968,  2.0010,  6.0020,
        0.9983,  3.0034,  1.9934,  6.0105,  1.0039,  3.0058,  1.9973,  6.0013,
        1.0029,  3.0047,  2.0035,  5.9989,  1.0037,  3.0003,  2.0036,  5.9996,
        0.9958,  3.0027,  2.0010,  5.9997,  1.0030,  3.0130,  2.0020,  5.9971,
        0.9985,  2.9957,  2.0012,  5.9975,  0.9996,  3.0009,  1.9989,  6.0049,
        0.9995,  3.0020,  1.9960,  6.0013,  0.9998,  2.9946,  2.0004,  5.9998,
        1.0023,  3.0100,  2.0008,  5.9971,  1.0002,  3.0070,  1.9972,  6.0050,
        1.0039,  2.9987,  1.9977,  6.0009,  0.9982,  2.9919,  1.9984,  6.0044,
        0.9977,  2.9985,  2.0003,  6.0099,  0.9961,  2.9865,  1.9965,  5.9981,
        0.9969,  3.0103,  2.0022,  6.0027,  0.9981,  3.0035,  1.9993,  5.9957,
        1.0019,  3.0039,  2.0039,  6.0009,  1.0035,  3.0084,  1.9973,  5.9950,
        1.0001,  2.9889,  1.9974,  6.0021,  0.9982,  2.9994,  2.0038,  5.9996,
        0.9990,  3.0056,  2.0007,  5.9870,  1.0033,  3.0037,  1.9993,  5.9981,
        1.0040,  2.9947,  1.9986,  5.9964,  1.0000,  3.0021,  2.0023,  5.9970,
        0.9987,  2.9978,  1.9984,  5.9903,  1.0009,  2.9983,  1.9983,  6.0009,
        0.9970,  2.9864,  2.0012,  5.9984,  1.0043,  3.0032,  1.9974,  5.9981,
        0.9998,  2.9947,  1.9987,  6.0082,  0.9989,  2.9984,  1.9999,  6.0041,
        1.0043,  2.9987,  1.9971,  5.9956,  0.9982,  2.9941,  1.9968,  5.9969,
        0.9992,  3.0016,  2.0049,  5.9955,  1.0019,  2.9996,  2.0010,  5.9988,
        0.9983,  2.9976,  2.0002,  6.0018,  0.9947,  2.9976,  1.9972,  6.0008,
        1.0002,  3.0067,  2.0004,  5.9925,  0.9971,  2.9993,  2.0026,  5.9999,
        1.0034,  3.0039,  1.9964,  5.9968,  0.9989,  2.9994,  2.0026,  6.0030,
        0.9954,  2.9964,  2.0023,  6.0062,  1.0011,  3.0052,  2.0001,  6.0047,
        0.9991,  2.9997,  1.9985,  6.0018,  1.0026,  2.9891,  2.0040,  6.0099,
        1.0005,  2.9989,  1.9995,  6.0063,  0.9984,  3.0030,  1.9990,  6.0014,
        0.9951,  3.0133,  2.0038,  5.9937,  1.0019,  3.0039,  2.0006,  5.9968,
        1.0035,  3.0015,  1.9993,  5.9991,  0.9964,  3.0006,  1.9985,  6.0068,
        1.0028,  2.9863,  1.9981,  6.0070,  0.9985,  3.0043,  1.9991,  5.9934,
        1.0011,  3.0055,  2.0014,  6.0100,  0.9974,  3.0019,  1.9966,  6.0065,
        0.9970,  2.9947,  2.0005,  6.0008,  1.0003,  3.0015,  2.0011,  6.0048,
        1.0013,  2.9963,  1.9998,  5.9960,  0.9986,  2.9973,  1.9978,  6.0004,
        1.0019,  2.9931,  2.0033,  6.0031,  0.9999,  2.9974,  2.0006,  5.9995,
        1.0017,  3.0026,  1.9988,  5.9908,  0.9990,  3.0005,  2.0066,  5.9971,
        0.9991,  3.0031,  1.9999,  6.0006,  1.0033,  3.0075,  1.9955,  5.9958,
        0.9968,  2.9926,  2.0035,  5.9967,  1.0007,  2.9974,  1.9994,  6.0067,
        0.9998,  2.9907,  2.0047,  5.9995,  1.0009,  3.0068,  2.0004,  5.9901,
        0.9987,  3.0018,  2.0016,  6.0037),
      T( 3.0070,  4.9762,  6.0031,  9.9983,  2.9995,  5.0025,  6.0120, 10.0068,
        3.0020,  4.9937,  5.9994,  9.9784,  3.0030,  4.9943,  5.9988,  9.9908,
        3.0011,  5.0032,  6.0031, 10.0051,  3.0002,  4.9939,  6.0023, 10.0142,
        3.0085,  4.9939,  6.0080,  9.9859,  2.9949,  4.9887,  5.9977, 10.0069,
        2.9999,  4.9906,  6.0046,  9.9927,  3.0007,  4.9960,  6.0048, 10.0042,
        2.9996,  5.0048,  5.9879, 10.0139,  3.0094,  5.0078,  5.9958, 10.0018,
        3.0085,  5.0077,  6.0068,  9.9992,  3.0089,  4.9974,  6.0053,  9.9996,
        2.9904,  5.0053,  6.0013,  9.9955,  3.0066,  5.0165,  6.0048,  9.9935,
        2.9969,  4.9951,  6.0038,  9.9926,  2.9991,  5.0042,  5.9988, 10.0075,
        2.9990,  5.0002,  5.9922, 10.0018,  3.0010,  4.9892,  6.0025,  9.9955,
        3.0023,  5.0153,  6.0023,  9.9950,  2.9982,  5.0089,  5.9914, 10.0017,
        3.0072,  4.9952,  5.9972,  9.9973,  2.9971,  4.9889,  5.9994, 10.0084,
        2.9968,  4.9973,  5.9982, 10.0114,  2.9933,  4.9822,  5.9927,  9.9958,
        2.9950,  5.0135,  6.0032, 10.0040,  2.9960,  5.0029,  5.9981,  9.9908,
        3.0053,  5.0025,  6.0086, 10.0003,  3.0051,  5.0107,  5.9937,  9.9929,
        3.0022,  4.9844,  5.9979, 10.0017,  2.9978,  4.9998,  6.0079, 10.0011,
        2.9967,  5.0046,  6.0015,  9.9839,  3.0054,  5.0057,  5.9991,  9.9961,
        3.0056,  4.9907,  5.9990,  9.9934,  3.0015,  5.0044,  6.0050,  9.9955,
        2.9994,  5.0026,  5.9973,  9.9877,  3.0023,  4.9970,  5.9991, 10.0034,
        2.9944,  4.9831,  6.0012,  9.9929,  3.0075,  5.0066,  5.9960,  9.9943,
        3.0029,  4.9905,  5.9998, 10.0097,  2.9990,  5.0002,  6.0021, 10.0073,
        3.0070,  4.9993,  5.9940,  9.9937,  2.9948,  4.9912,  5.9944,  9.9980,
        2.9989,  4.9991,  6.0088,  9.9952,  3.0029,  5.0024,  6.0030, 10.0023,
        2.9964,  4.9975,  6.0004,  9.9999,  2.9880,  4.9919,  5.9962, 10.0029,
        3.0030,  5.0079,  5.9986,  9.9891,  2.9962,  5.0014,  6.0048,  9.9997,
        3.0066,  5.0017,  5.9920,  9.9945,  2.9957,  4.9987,  6.0057, 10.0032,
        2.9912,  4.9927,  6.0046, 10.0098,  3.0013,  5.0078,  6.0008, 10.0065,
        2.9981,  5.0008,  5.9981, 10.0049,  3.0057,  4.9848,  6.0072, 10.0103,
        3.0010,  4.9988,  5.9980, 10.0014,  2.9977,  5.0017,  5.9977,  9.9982,
        2.9898,  5.0180,  6.0066,  9.9900,  3.0037,  5.0054,  6.0014,  9.9948,
        3.0095,  4.9970,  5.9981,  9.9985,  2.9941,  4.9996,  5.9960, 10.0107,
        3.0065,  4.9779,  5.9958, 10.0094,  2.9971,  5.0036,  5.9994,  9.9929,
        2.9996,  5.0073,  6.0009, 10.0119,  2.9944,  5.0020,  5.9924, 10.0127,
        2.9939,  4.9936,  6.0022,  9.9985,  3.0007,  5.0038,  6.0030, 10.0071,
        2.9998,  4.9964,  6.0000,  9.9946,  2.9967,  4.9978,  5.9972, 10.0015,
        3.0037,  4.9913,  6.0050, 10.0077,  2.9988,  4.9932,  6.0018, 10.0001,
        3.0025,  5.0029,  5.9974,  9.9861,  3.0009,  5.0041,  6.0127,  9.9938,
        2.9970,  5.0068,  6.0026, 10.0001,  3.0041,  5.0124,  5.9930,  9.9931,
        2.9952,  4.9911,  6.0063,  9.9942,  3.0003,  4.9943,  5.9982, 10.0043,
        3.0010,  4.9840,  6.0079,  9.9970,  3.0026,  5.0083,  6.0007,  9.9873,
        2.9955,  5.0026,  6.0029, 10.0054)))

    val scores = Tensor[Float](
      T(0.0104, 0.0125, 0.0123, 0.0113, 0.0122, 0.0109, 0.0137, 0.0121, 0.0124,
      0.0112, 0.0142, 0.0117, 0.0133, 0.0116, 0.0143, 0.0116, 0.0131, 0.0114,
      0.0150, 0.0124, 0.0129, 0.0118, 0.0122, 0.0128, 0.0121, 0.0122, 0.0135,
      0.0134, 0.0101, 0.0133, 0.0108, 0.0128, 0.0128, 0.0112, 0.0134, 0.0129,
      0.0115, 0.0112, 0.0127, 0.0133, 0.0146, 0.0124, 0.0117, 0.0110, 0.0120,
      0.0116, 0.0129, 0.0122, 0.0109, 0.0107, 0.0119, 0.0107, 0.0131, 0.0146,
      0.0137, 0.0101, 0.0123, 0.0130, 0.0140, 0.0150, 0.0122, 0.0128, 0.0119,
      0.0124, 0.0127, 0.0119, 0.0114, 0.0127, 0.0130, 0.0130, 0.0129, 0.0120,
      0.0119, 0.0137, 0.0120, 0.0131, 0.0108, 0.0121, 0.0120, 0.0104, 0.0119,
      0.0101, 0.0124, 0.0123, 0.0111, 0.0122, 0.0112, 0.0137, 0.0121, 0.0120,
      0.0113, 0.0143, 0.0124, 0.0137, 0.0115, 0.0139, 0.0116, 0.0131, 0.0117,
      0.0148, 0.0124, 0.0132, 0.0118, 0.0125, 0.0121, 0.0123, 0.0116, 0.0132,
      0.0130, 0.0104, 0.0130, 0.0107, 0.0126, 0.0125, 0.0114, 0.0132, 0.0132,
      0.0112, 0.0116, 0.0129, 0.0137, 0.0132, 0.0120, 0.0112, 0.0115, 0.0118,
      0.0116, 0.0128, 0.0128, 0.0115, 0.0106, 0.0121, 0.0104, 0.0134, 0.0142,
      0.0132, 0.0106, 0.0118, 0.0130, 0.0140, 0.0149, 0.0119, 0.0130, 0.0118,
      0.0122, 0.0130, 0.0119, 0.0114, 0.0124, 0.0127, 0.0131, 0.0134, 0.0117,
      0.0121, 0.0139, 0.0120, 0.0132, 0.0113, 0.0133, 0.0126, 0.0107, 0.0114))

    val imgInfo = Tensor[Float](T(10, 15))

    val score_thresh: Float = 0.05f
    val nms_thresh: Float = 0.5f
    val detections_per_img: Int = 100
    val cls_agnostic_bbox_reg: Boolean = false
    val bbox_aug_enabled: Boolean = false

    val layer = new FPNPostProcessor(score_thresh, nms_thresh, detections_per_img,
      cls_agnostic_bbox_reg, bbox_aug_enabled)

    val num_classes = 81
    val fun = layer.filterResults(input, scores, num_classes, imgInfo)

    println("done")
  }
}
