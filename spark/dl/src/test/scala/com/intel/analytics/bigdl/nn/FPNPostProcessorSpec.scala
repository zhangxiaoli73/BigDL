/*
 * Copyright 2016 The BigDL Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intel.analytics.bigdl.nn

import com.intel.analytics.bigdl.tensor.Tensor
import com.intel.analytics.bigdl.transform.vision.image.util.{BboxUtil, BoundingBox}
import com.intel.analytics.bigdl.utils.T
import org.dmg.pmml.False
import org.scalatest.{BeforeAndAfter, FlatSpec, Matchers}

class FPNPostProcessorSpec extends FlatSpec with Matchers {

  "FPNPostProcessor" should "be ok" in {
    val score_thresh: Float = 0.012f
    val nms_thresh: Float = 0.5f
    val detections_per_img: Int = 100
    val cls_agnostic_bbox_reg: Boolean = false
    val bbox_aug_enabled: Boolean = false

    val input1 = Tensor[Float](T(
      T(-0.0528, -0.0655,  0.0210, -0.0236,  0.0304,  0.0539,  0.0205, -0.0206,
      0.0193,  0.0102, -0.0113, -0.0410,  0.0137,  0.0221,  0.0177,  0.0281,
      0.0170, -0.0221, -0.0169, -0.0192, -0.0067,  0.0034, -0.0007, -0.0145,
      -0.0284,  0.0241, -0.0102,  0.0215,  0.0540, -0.0031,  0.0354,  0.0144,
      -0.0344, -0.0072, -0.0043, -0.0095,  0.0070, -0.0351,  0.0069,  0.0278,
      0.0066,  0.0029, -0.0182, -0.0384, -0.0035,  0.0164, -0.0298,  0.0142,
      -0.0271,  0.0079,  0.0004,  0.0110,  0.0131, -0.0070, -0.0395, -0.0311,
      0.0047, -0.0249,  0.0003, -0.0099, -0.0135, -0.0135,  0.0331, -0.0057,
      0.0182, -0.0398,  0.0186,  0.0384,  0.0094, -0.0281, -0.0142,  0.0150,
      -0.0122,  0.0196,  0.0477, -0.0283, -0.0273, -0.0093,  0.0181,  0.0411, 0.0029),
      T(-0.0607, -0.0839,  0.0465, -0.0258,  0.0330,  0.0615,  0.0298, -0.0318,
        0.0391,  0.0199, -0.0182, -0.0317,  0.0316,  0.0245,  0.0175,  0.0272,
        0.0250, -0.0411, -0.0105, -0.0174, -0.0038,  0.0135,  0.0017, -0.0221,
        -0.0248,  0.0229, -0.0129,  0.0321,  0.0556,  0.0039,  0.0448,  0.0231,
        -0.0411, -0.0061,  0.0040, -0.0158, -0.0027, -0.0350,  0.0063,  0.0209,
        0.0116, -0.0050,  0.0071, -0.0349, -0.0168,  0.0377, -0.0245,  0.0073,
        -0.0187,  0.0115,  0.0029,  0.0075,  0.0254, -0.0056, -0.0389, -0.0365,
        0.0047, -0.0402, -0.0094, -0.0084, -0.0103, -0.0152,  0.0224,  0.0078,
        0.0258, -0.0352,  0.0133,  0.0468,  0.0049, -0.0433, -0.0069,  0.0180,
        0.0071,  0.0202,  0.0644, -0.0318, -0.0327,  0.0063,  0.0190,  0.0375, -0.0056)))

    val input2 = Tensor[Float](T(
      T(1.2547e-04,  1.3180e-03,  6.2370e-03, -5.0890e-04, -2.6153e-03,
      -1.3165e-03, -7.7025e-05,  4.3028e-03, -2.3636e-03, -3.5590e-03,
      3.0244e-03, -2.8263e-04, -1.4246e-03,  1.7372e-03, -2.0461e-03,
      -5.1238e-04,  2.5481e-03, -1.0470e-03,  2.6192e-04, -4.5874e-03,
      2.7446e-04, -7.4885e-03,  4.0601e-03, -3.8246e-03, -1.8869e-04,
      -5.6163e-04, -3.4610e-03, -4.3590e-03, -2.2148e-04, -7.2285e-05,
      6.6384e-04,  9.8126e-04,  8.6726e-04, -5.3341e-03,  3.7110e-04,
      -3.6599e-03, -1.5917e-03, -6.2317e-03,  2.3629e-03, -1.0170e-03,
      -1.1190e-03, -5.7000e-05, -1.9603e-03,  7.4092e-04, -4.1113e-04,
      3.3686e-03,  2.0960e-03,  6.7256e-04, -4.7453e-04, -8.5099e-03,
      -6.8604e-03, -1.7202e-03, -3.6288e-03, -2.7019e-03, -3.9469e-03,
      -1.8690e-03, -8.1173e-04,  4.8375e-04,  3.2714e-04, -3.6870e-03,
      3.0509e-03, -1.7746e-03,  1.3610e-03,  4.0934e-03,  1.8814e-03,
      1.0661e-04, -3.1919e-03, -3.1101e-03, -3.2069e-05, -1.9496e-03,
      -1.1305e-03, -2.0706e-03,  1.2004e-03,  3.5999e-04, -1.1997e-03,
      1.2142e-03,  2.5322e-03, -3.5478e-03, -9.4953e-04, -3.8600e-03,
      5.5009e-04,  4.1875e-03,  2.6525e-03,  1.8470e-03, -1.5804e-03,
      -2.3700e-03, -4.4702e-03,  1.5000e-03, -2.1067e-03, -8.2335e-04,
      -5.8987e-04, -3.7969e-04,  4.1929e-04, -1.0704e-03,  6.8700e-04,
      -9.1043e-04, -1.8597e-03, -3.1535e-03, -1.9745e-03, -3.3934e-03,
      -3.4488e-03, -3.5896e-03, -4.1041e-04,  1.2471e-03, -3.2536e-03,
      -2.7781e-03,  4.3688e-03, -1.3853e-03,  3.6649e-03, -3.0219e-04,
      7.2934e-04,  2.6153e-05,  4.5653e-04,  1.8671e-03, -3.0123e-04,
      -1.0145e-03, -1.5652e-03, -2.7175e-03, -1.3560e-03, -8.6581e-04,
      -1.2318e-03, -5.7794e-03,  1.8507e-03,  7.0207e-04,  2.5725e-04,
      -1.8590e-03, -3.4898e-03,  3.1864e-03, -2.7901e-03, -3.9743e-03,
      -1.8329e-04, -1.1244e-03, -3.0022e-04, -7.1399e-04,  1.3607e-03,
      -6.1945e-03,  5.7463e-03,  2.5205e-03, -9.9873e-04, -3.0996e-03,
      -1.4434e-03, -3.7868e-03, -4.7267e-03, -5.2086e-03,  2.6148e-03,
      1.6013e-03,  5.3207e-03,  5.8119e-04, -1.1772e-03,  1.1398e-04,
      -2.4140e-03,  7.4481e-04,  1.6567e-03, -4.5060e-03, -1.9124e-03,
      -5.3363e-03,  4.1623e-04, -2.4256e-03,  5.2634e-04, -2.5097e-03,
      -5.6461e-04, -1.7744e-06, -1.5488e-03,  1.9109e-03, -2.0331e-03,
      -8.4710e-04, -1.5173e-04, -1.0355e-03, -2.2363e-03, -3.3267e-03,
      -1.7480e-04,  2.9302e-03, -3.8510e-03,  2.1867e-03, -2.1955e-03,
      -1.9767e-03,  1.6668e-04,  2.3617e-03, -9.6806e-04, -8.9541e-04,
      9.8058e-04,  2.8194e-04,  2.4970e-03, -1.5939e-03,  1.7911e-03,
      7.9169e-04, -1.8732e-04,  2.9243e-03,  1.0848e-03, -2.4439e-03,
      2.2703e-03,  4.1261e-03, -6.7240e-03, -5.8238e-04,  3.9993e-03,
      -5.8518e-04,  1.7747e-03,  2.2055e-03,  1.2058e-03, -1.9879e-03,
      2.2771e-03,  3.2529e-03, -2.4272e-03, -5.3428e-03, -3.0797e-03,
      -3.9725e-03, -2.0866e-03, -3.0151e-03, -1.3349e-03,  1.1952e-04,
      8.4809e-04, -1.3335e-03,  1.6291e-03,  2.6560e-03, -3.2451e-03,
      6.3419e-03, -7.8543e-04,  2.1343e-03,  5.4681e-04, -9.9867e-04,
      -6.4662e-03,  2.5444e-03,  1.8487e-03, -9.1505e-04, -6.0683e-04,
      1.1152e-03, -1.9008e-03, -1.1936e-03, -4.1405e-03, -1.6007e-03,
      2.5440e-03,  1.7949e-03, -3.5139e-03, -2.3631e-03, -3.4074e-03,
      -3.6473e-04,  2.4223e-03, -4.3325e-05,  6.6050e-04,  3.8668e-03,
      -1.5435e-03, -4.3313e-03,  4.7613e-05,  2.3067e-03, -1.1187e-03,
      2.6942e-03, -2.2420e-03,  9.8901e-04,  1.2066e-03, -1.7490e-03,
      -2.8142e-03,  8.8403e-04, -1.5011e-03, -8.4006e-05,  3.3641e-03,
      1.3462e-04, -5.1158e-04,  2.2294e-03, -3.6063e-03, -4.6227e-03,
      -7.5198e-04,  2.6893e-05, -7.6683e-04,  6.8989e-04, -6.6826e-04,
      -1.4900e-03,  1.0988e-03,  1.1232e-03, -4.2167e-03,  2.8338e-03,
      4.5330e-03, -5.5163e-04, -3.4200e-03, -2.3059e-03, -8.8648e-04,
      -2.5544e-03,  1.8715e-03, -6.5712e-04, -1.0842e-03, -4.4011e-03,
      -4.8931e-03, -6.1327e-04, -5.5561e-03,  4.2332e-03, -1.0610e-03,
      2.7961e-04, -8.0012e-04, -6.1453e-06,  1.0649e-03, -5.2977e-03,
      -3.9317e-03, -5.2246e-03,  3.7472e-03, -2.0485e-03, -4.9102e-03,
      -1.7684e-04,  2.4095e-04, -5.2979e-04,  1.8817e-03, -1.7311e-03,
      6.6962e-04,  3.8880e-03,  1.3622e-03,  5.6563e-04,  2.5267e-03,
      -7.0162e-04,  9.9567e-04, -4.6943e-03, -2.6881e-03, -2.0852e-03,
      -3.2363e-03, -2.1857e-03, -6.0548e-04,  2.8350e-03,  3.3523e-03,
      -5.6042e-04,  1.3532e-03,  3.8028e-03, -2.0392e-03,  4.9505e-03,
      -3.0452e-03,  1.1829e-03,  1.7991e-03, -4.0136e-03),
      T(-3.8151e-04,  4.5916e-04,  7.2216e-03,  1.6524e-03, -2.1517e-03,
        -1.7142e-04,  2.3043e-04,  5.2298e-03, -1.8294e-03, -4.3029e-03,
        3.4370e-03, -5.1266e-04, -1.7894e-03,  2.0899e-03, -3.4736e-04,
        -1.9172e-03,  2.9115e-03, -3.5623e-04, -4.9033e-04, -5.0919e-03,
        -7.8984e-04, -8.3909e-03,  4.7718e-03, -4.0685e-03,  4.3845e-05,
        -1.5555e-03, -3.9894e-03, -5.9163e-03,  8.5862e-04,  1.5850e-04,
        1.0105e-03,  1.0443e-03,  7.3303e-04, -7.1319e-03,  1.0061e-03,
        -4.1571e-03, -1.8867e-03, -6.8725e-03,  2.9443e-03, -1.7743e-03,
        -9.4784e-04, -8.2571e-04, -1.8636e-03,  7.4623e-04, -9.5193e-04,
        4.2232e-03,  4.6671e-04,  2.5017e-03,  5.4434e-04, -9.4216e-03,
        -7.1586e-03, -1.3388e-03, -5.7878e-03, -2.9447e-03, -3.8578e-03,
        -1.9441e-03, -1.5706e-03,  5.7911e-04,  5.4366e-04, -4.1621e-03,
        4.7838e-03, -2.1569e-03,  7.0980e-04,  3.3229e-03,  2.7565e-03,
        -1.0463e-03, -2.5594e-03, -3.5401e-03, -8.3204e-05, -3.0557e-04,
        -2.2076e-03, -1.5366e-03,  1.4174e-03, -1.8350e-03, -1.2513e-03,
        2.2268e-03,  3.5314e-03, -3.0468e-03, -5.2363e-04, -3.7137e-03,
        2.8601e-03,  4.1313e-03,  3.3950e-03,  2.1851e-03, -3.6829e-03,
        -1.3376e-03, -4.4806e-03,  1.6112e-03, -2.2764e-03,  1.1388e-03,
        -4.1688e-04, -9.8302e-04, -1.1034e-03, -9.4393e-05,  1.8231e-03,
        -3.3224e-04, -1.6604e-03, -3.5839e-03, -7.5806e-04, -3.8569e-03,
        -5.1578e-03, -4.2717e-03,  2.4337e-03,  1.0395e-03, -2.3169e-03,
        -4.2825e-03,  3.9096e-03, -2.2783e-03,  3.0404e-03, -1.3094e-03,
        -8.8270e-04,  2.0582e-03,  4.5275e-05,  2.5770e-03, -1.6905e-04,
        3.6209e-04, -2.0340e-03, -3.8255e-03, -2.3881e-03, -1.1846e-03,
        -2.7321e-03, -6.2272e-03,  2.7176e-03,  1.6172e-03,  2.1875e-03,
        -1.1975e-03, -4.2350e-03,  2.6173e-03, -2.2742e-03, -5.5036e-03,
        -1.7773e-03, -2.0524e-03, -6.4782e-04, -1.7108e-03,  1.9265e-03,
        -7.6450e-03,  6.4372e-03,  1.5869e-03, -1.6941e-03, -3.5774e-03,
        -2.6147e-03, -3.2535e-03, -4.2110e-03, -4.9536e-03,  3.5979e-03,
        2.2648e-03,  4.7786e-03,  3.0771e-03, -2.7522e-03,  7.3139e-06,
        -2.5288e-03,  2.2877e-03,  2.3288e-03, -3.5635e-03, -2.3039e-03,
        -6.3346e-03,  5.8616e-05, -3.5463e-03, -6.0124e-04, -3.9845e-03,
        -4.5986e-04,  2.2118e-03, -1.8769e-03,  2.2506e-03, -2.3816e-03,
        -1.8786e-03,  4.4653e-04, -1.5864e-04, -2.0503e-03, -4.8448e-03,
        -6.1655e-04,  1.4725e-03, -2.6914e-03,  3.1877e-03, -1.6765e-03,
        -2.7342e-03,  1.4385e-04,  1.2240e-03, -2.1591e-03, -3.3786e-03,
        -4.8203e-04,  5.7407e-04,  3.4411e-03, -1.2131e-03,  2.1162e-04,
        -7.1395e-05, -9.6892e-04,  5.1899e-03,  2.9448e-03, -1.3484e-03,
        3.8788e-03,  2.5929e-03, -8.2051e-03, -2.0183e-03,  3.8629e-03,
        -8.8586e-04,  1.6901e-03,  2.0590e-03,  1.2419e-03, -9.8078e-04,
        -5.2457e-04,  3.7243e-03, -1.6736e-03, -5.7571e-03, -2.8407e-03,
        -5.0761e-03, -2.9211e-03, -3.1361e-03, -2.6441e-03,  3.7506e-04,
        1.4749e-04, -2.8327e-03,  2.3940e-03,  3.2698e-03, -3.8985e-03,
        8.3197e-03, -1.7487e-03,  3.2703e-03,  1.0544e-03, -5.8737e-04,
        -6.7221e-03,  2.6330e-03,  9.7796e-04, -1.9253e-04,  1.6262e-04,
        1.0755e-03, -8.6950e-04, -1.4318e-03, -3.9401e-03, -2.6725e-03,
        4.4849e-03,  2.4894e-03, -4.2844e-03, -2.6086e-03, -3.9916e-03,
        -1.1388e-03,  3.8936e-03, -3.3872e-04,  1.1594e-03,  5.2593e-03,
        -1.4818e-03, -3.3955e-03, -1.6063e-03,  3.8347e-03, -3.3131e-03,
        2.6213e-03, -1.0170e-03,  1.9123e-03,  1.6123e-03, -5.0714e-04,
        -3.2306e-03,  9.5459e-04, -3.3374e-04, -1.0957e-03,  3.5736e-03,
        -4.0108e-04, -8.2558e-04,  2.1009e-03, -3.1349e-03, -6.1256e-03,
        -1.5860e-03, -9.5273e-04,  8.1137e-05,  7.5751e-04, -2.5736e-04,
        -3.7939e-03,  2.7477e-05,  3.1675e-03, -5.9466e-03,  2.3588e-03,
        3.4690e-03, -5.6421e-04, -5.3533e-03, -4.5290e-03, -2.4467e-03,
        -3.4938e-03,  1.4770e-03, -1.1440e-03, -1.3769e-03, -6.0549e-03,
        -4.1708e-03, -6.7729e-04, -6.5952e-03,  4.8243e-03, -1.5407e-03,
        -8.3810e-04, -1.7264e-04, -6.0035e-04,  3.2877e-03, -7.1628e-03,
        -5.9375e-03, -6.6174e-03,  4.3117e-03, -1.6078e-03, -6.1852e-03,
        8.3503e-04,  1.0502e-03, -1.3511e-03,  3.0879e-03, -2.1045e-03,
        3.9012e-04,  5.3002e-03,  1.5866e-03, -3.8507e-04,  2.6121e-03,
        -3.6971e-04,  6.9879e-04, -6.2640e-03, -4.7607e-03, -1.0902e-03,
        -5.1047e-03, -1.7955e-03, -1.5077e-03,  3.0722e-03,  2.5561e-03,
        1.6600e-05,  1.5761e-03,  4.0219e-03, -2.3948e-03,  5.0930e-03,
        -2.7311e-03,  1.2098e-03,  1.0574e-03, -5.9505e-03)))

    val imageInfo = Tensor[Float](T(10, 15))
    val bbox = Tensor[Float](T(T(1.0f, 3.0f, 2.0f, 6.0f), T(3.0f, 5.0f, 6.0f, 10.0f)))

    val layer = new BoxPostProcessor(score_thresh, nms_thresh, detections_per_img, 81)

    val output = layer.forward(T(input1, input2, bbox))

    println("done")
  }
}
