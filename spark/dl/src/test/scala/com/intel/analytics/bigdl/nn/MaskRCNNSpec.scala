/*
 * Copyright 2016 The BigDL Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intel.analytics.bigdl.nn

import com.intel.analytics.bigdl.models.mask.MaskInference
import com.intel.analytics.bigdl.models.maskrcnn.{MaskRCNN, MaskUtils}
import com.intel.analytics.bigdl.models.resnet.ResNetMask
import com.intel.analytics.bigdl.nn.mkldnn.Equivalent
import com.intel.analytics.bigdl.tensor.Tensor
import com.intel.analytics.bigdl.transform.vision.image.label.roi.RoiLabel
import com.intel.analytics.bigdl.utils.{RandomGenerator, T, Table}
import org.scalatest.{FlatSpec, Matchers, path}

class MaskRCNNSpec extends FlatSpec with Matchers {
  "build maskrcnn" should "be ok" in {
    RandomGenerator.RNG.setSeed(100)
    val resNetOutChannels = 32
    val backboneOutChannels = 32
    val mask = new MaskRCNN(resNetOutChannels, backboneOutChannels)
    mask.evaluate()
    val input = Tensor[Float](1, 3, 224, 256).rand()
    val output = mask.forward(input)

    println("done")
  }

  "build maskrcnn with loaded weight" should "be ok" in {
    val resNetOutChannels = 256
    val backboneOutChannels = 256
    val mask = new MaskRCNN(resNetOutChannels, backboneOutChannels)

    val params = mask.getParametersTable()
    val keys = params.keySet
    val path = "/home/zhangli/workspace/tmp/mask/maskrcnn-benchmark/demo/weight/"
    for(i <- keys) {
      // for weight
      var p = params.get[Table](i).get.get[Tensor[Float]]("weight").get
      var size = p.size()
      var name = path + i.toString + ".weight"
      if (size(0) != 1) {
        size.foreach(n => name = name + s"_${n}")
      } else {
        size.slice(1, size.length).foreach(n => name = name + s"_${n}")
      }

      name = name + ".txt"
      val weight = MaskUtils.loadWeight(name, size)
      p.set(weight)

      // for bias
      p = params.get[Table](i).get.get[Tensor[Float]]("bias").getOrElse(null)
      if (p != null) {
        size = p.size()
        name = path + i.toString + ".bias"
        size.foreach(n => name = name + s"_${n}")
        name = name + ".txt"
        val bias = MaskUtils.loadWeight(name, size)
        p.set(bias)
      }

      println(s"${i} done")
    }

    val input = MaskUtils.loadWeight(path + "input.txt", Array(1, 3, 800, 1088))

    mask.evaluate()
    val out = mask.forward(input).toTable

    val proposalsBox = out[Tensor[Float]](1)
    val boxLabels = out[Tensor[Float]](2)
    val maskRes = out[Table](3)[Tensor[Float]](2)
    val scores = out[Tensor[Float]](4)

    val out2 = MaskInference.postProcessorForSingleImage(
      boxLabels, proposalsBox, scores, maskRes,
      imageHeight = 800, imageWidth = 1066)
    // input.size(3), input.size(4))

    val outMasks = out2.apply[Array[Tensor[Float]]](RoiLabel.MASKS)
    val expectedMask = T(1 ->
      Tensor[Float](T(288412, 4, 793, 7, 789, 11, 766, 34, 761, 39, 757, 43, 755, 45, 754, 46, 752, 48, 752, 48, 751, 49, 751, 49, 751, 49,750, 50, 750, 50, 749, 51, 739, 4, 6, 51, 736, 9, 3, 52, 734, 66, 732, 68, 731, 69, 730, 70, 730, 70, 729, 71, 729, 71, 729, 71, 729, 71, 729, 71, 729, 71, 729, 71, 729, 71, 730, 70, 731, 69, 733, 67, 734, 66, 736, 64, 737, 12, 5, 46, 739, 8, 8, 45, 756, 44, 757, 43, 758, 41, 761, 39, 764, 36, 768, 31, 771, 28, 774, 24, 778, 22, 779, 20, 782, 18, 783, 17, 784, 15, 786, 14, 787, 12, 789, 10, 790, 9, 792, 7, 793, 7, 794, 5, 518796)),
      2 ->
        Tensor[Float](T(367592, 1, 749, 6, 44, 3, 745, 10, 41, 6, 742, 14, 36, 9, 740, 17, 31, 12, 739, 19, 26, 18, 736, 21, 21, 26, 731, 24, 16, 35, 724, 26, 13, 41, 720, 27, 7, 47, 719, 81, 719, 79, 721, 79, 721, 79, 721, 78, 722, 77, 724, 76, 725, 74, 727, 73, 728, 72, 730, 70, 731, 69, 734, 65, 737, 63, 739, 61, 740, 60, 742, 58, 743, 57, 744, 56, 745, 55, 746, 54, 747, 53, 747, 53, 748, 51, 750, 50, 751, 48, 754, 46, 755, 44, 757, 38, 764, 32, 771, 21, 784, 10, 452417)),
      10 ->
        Tensor[Float](T(738692, 3, 796, 6, 794, 8, 2, 1, 790, 11, 790, 11, 789, 12, 788, 12, 788, 14, 786, 16, 785, 16, 784, 17, 784, 16, 785, 15, 787, 12, 789, 11, 790, 10, 790, 10, 792, 8, 793, 3, 1, 3, 794, 2, 1, 2, 795, 1, 3, 1, 818, 2, 797, 5, 792, 9, 791, 12, 788, 15, 785, 16, 783, 16, 784, 16, 783, 17, 782, 18, 781, 19, 780, 20, 779, 20, 779, 22, 777, 23, 776, 22, 776, 23, 776, 23, 775, 24, 774, 25, 769, 28, 770, 29, 770, 30, 769, 31, 769, 31, 769, 30, 770, 30, 770, 30, 770, 30, 770, 30, 770, 30, 771, 29, 772, 28, 773, 27, 776, 23, 782, 15, 788, 12, 789, 10, 792, 8, 793, 8, 793, 14, 786, 14, 787, 13, 63670)),
      20 ->
        Tensor[Float](T(739576, 7, 781, 19, 776, 25, 772, 27, 772, 28, 771, 29, 771, 29, 770, 30, 768, 31, 768, 31, 769, 29, 771, 29, 771, 29, 771, 29, 772, 18, 785, 6, 795, 3, 797, 3, 797, 4, 796, 4, 795, 6, 794, 10, 790, 11, 789, 11, 790, 10, 790, 10, 790, 10, 769, 4, 18, 11, 762, 10, 18, 15, 755, 12, 18, 15, 752, 15, 19, 15, 750, 17, 18, 16, 748, 18, 18, 17, 745, 21, 18, 17, 744, 21, 18, 18, 742, 23, 17, 18, 742, 24, 16, 18, 742, 24, 17, 17, 742, 25, 16, 17, 742, 25, 16, 5, 4, 8, 742, 25, 17, 4, 4, 8, 741, 26, 17, 4, 4, 8, 741, 26, 17, 4, 4, 8, 741, 26, 18, 3, 6, 5, 742, 27, 17, 2, 754, 27, 18, 1, 754, 27, 18, 1, 755, 26, 18, 1, 755, 26, 18, 1, 756, 25, 777, 23, 779, 21, 781, 18, 783, 17, 785, 15, 787, 13, 788, 12, 21, 10, 758, 7, 2, 1, 21, 13, 758, 8, 21, 13, 758, 8, 21, 13, 759, 8, 20, 11, 761, 8, 20, 9, 763, 8, 21, 2, 770, 7, 798, 2, 22, 4, 796, 4, 795, 8, 792, 18, 782, 19, 781, 19, 782, 18, 783, 17, 56416)),
      30 ->
        Tensor[Float](T(395445, 3, 795, 6, 792, 9, 789, 11, 787, 13, 785, 15, 783, 17, 781, 20, 780, 19, 781, 19, 782, 17, 784, 16, 785, 14, 787, 13, 787, 12, 788, 12, 788, 12, 788, 14, 786, 16, 783, 4, 6, 7, 784, 1, 9, 6, 794, 6, 796, 4, 439749)),
      40 ->
        Tensor[Float](T(230650, 2, 797, 3, 796, 4, 792, 8, 791, 9, 790, 10, 790, 10, 789, 11, 789, 11, 789, 11, 789, 11, 789, 11, 789, 11, 789, 11, 789, 11, 789, 11, 790, 10, 609348)),
      50 ->
        Tensor[Float](T(740289, 15, 783, 21, 778, 23, 777, 24, 776, 25, 775, 26, 775, 25, 775, 26, 774, 26, 774, 26, 775, 26, 774, 26, 774, 26, 774, 27, 773, 27, 774, 26, 774, 26, 774, 26, 774, 27, 773, 27, 773, 27, 773, 28, 772, 28, 773, 28, 771, 29, 771, 29, 769, 31, 766, 34, 764, 36, 762, 38, 761, 38, 762, 38, 761, 38, 762, 38, 762, 38, 762, 37, 763, 36, 764, 34, 766, 25, 775, 23, 777, 22, 778, 21, 779, 21, 779, 20, 780, 20, 780, 20, 780, 20, 780, 21, 779, 21, 779, 22, 778, 24, 776, 26, 773, 32, 768, 34, 766, 35, 765, 36, 764, 36, 764, 37, 763, 37, 763, 38, 762, 38, 762, 38, 762, 38, 762, 38, 762, 38, 762, 38, 762, 38, 762, 38, 762, 38, 762, 38, 761, 38, 762, 37, 762, 38, 762, 38, 762, 36, 764, 35, 765, 34, 766, 33, 767, 32, 768, 31, 769, 30, 770, 31, 769, 32, 768, 33, 767, 33, 767, 33, 767, 34, 766, 34, 766, 34, 766, 36, 764, 37, 763, 39, 761, 41, 759, 44, 757, 45, 755, 47, 753, 48, 752, 48, 752, 49, 751, 49, 751, 49, 751, 49, 751, 48, 753, 47, 755, 41, 29280)),
      60 ->
        Tensor[Float](T(102220, 10, 788, 18, 780, 22, 777, 24, 775, 26, 773, 28, 772, 29, 770, 31, 769, 32, 767, 34, 766, 34, 766, 35, 765, 35, 765, 35, 765, 36, 763, 37, 763, 38, 762, 38, 762, 39, 761, 40, 761, 40, 760, 44, 756, 47, 753, 49, 751, 51, 749, 52, 748, 53, 748, 53, 747, 54, 747, 56, 744, 58, 16, 5, 722, 58, 12, 11, 719, 59, 10, 13, 719, 59, 6, 16, 720, 80, 720, 80, 721, 79, 722, 77, 724, 76, 724, 76, 725, 75, 725, 74, 727, 72, 729, 70, 731, 68, 733, 66, 734, 65, 736, 63, 737, 63, 738, 62, 738, 62, 739, 61, 740, 60, 740, 60, 741, 59, 741, 60, 740, 60, 740, 61, 740, 62, 738, 63, 737, 64, 736, 66, 735, 66, 734, 67, 733, 67, 733, 68, 733, 67, 733, 68, 732, 68, 732, 69, 731, 68, 733, 66, 734, 64, 736, 60, 740, 59, 741, 59, 741, 58, 742, 57, 743, 57, 743, 56, 744, 56, 744, 56, 744, 56, 744, 56, 744, 56, 744, 56, 744, 56, 744, 56, 744, 56, 744, 57, 743, 57, 743, 57, 743, 58, 742, 58, 742, 59, 741, 59, 741, 60, 740, 61, 739, 61, 739, 62, 738, 63, 737, 64, 736, 65, 735, 66, 734, 67, 733, 68, 732, 69, 731, 71, 729, 72, 1, 4, 723, 77, 723, 78, 722, 78, 722, 78, 723, 77, 723, 77, 723, 77, 723, 77, 723, 77, 723, 77, 723, 77, 723, 77, 723, 77, 724, 75, 725, 75, 726, 73, 727, 72, 729, 70, 730, 70, 731, 68, 732, 67, 734, 65, 735, 64, 737, 62, 739, 60, 740, 59, 742, 57, 743, 56, 744, 55, 746, 54, 747, 53, 748, 52, 749, 50, 751, 49, 751, 49, 752, 48, 753, 47, 754, 46, 754, 46, 755, 45, 756, 44, 757, 43, 758, 42, 759, 42, 759, 41, 761, 39, 763, 37, 766, 35, 766, 34, 767, 34, 767, 34, 767, 33, 768, 33, 769, 32, 769, 31, 770, 31, 770, 30, 770, 30, 771, 30, 770, 30, 771, 30, 771, 30, 771, 30, 770, 30, 771, 30, 770, 30, 770, 30, 770, 31, 769, 31, 768, 32, 768, 32, 768, 32, 768, 32, 767, 33, 767, 32, 768, 32, 767, 33, 767, 32, 767, 33, 767, 33, 767, 33, 766, 33, 767, 33, 767, 33, 767, 32, 768, 32, 767, 32, 769, 30, 771, 28, 774, 21, 782, 15, 591306)),
      70 ->
        Tensor[Float](T(738775, 8, 778, 23, 771, 29, 770, 30, 768, 33, 767, 33, 766, 34, 766, 34, 766, 34, 766, 34, 766, 34, 766, 34, 766, 34, 766, 34, 766, 34, 766, 34, 766, 34, 766, 35, 765, 35, 765, 35, 765, 35, 766, 34, 766, 34, 766, 34, 767, 33, 768, 32, 769, 31, 769, 31, 770, 30, 771, 29, 771, 29, 771, 29, 772, 28, 772, 28, 772, 28, 773, 27, 773, 27, 773, 27, 773, 27, 774, 26, 774, 26, 774, 26, 774, 26, 774, 26, 775, 25, 775, 25, 775, 25, 775, 25, 775, 25, 776, 24, 776, 24, 776, 24, 776, 24, 776, 24, 776, 24, 776, 24, 777, 23, 777, 23, 777, 23, 777, 23, 777, 23, 777, 23, 777, 23, 777, 23, 778, 22, 778, 22, 778, 22, 778, 22, 779, 20, 780, 20, 780, 20, 781, 19, 781, 19, 782, 18, 783, 16, 785, 14, 788, 11, 790, 9, 793, 3, 51623)),
      73 ->
        Tensor[Float](T(694775, 13, 784, 16, 782, 18, 781, 19, 781, 19, 779, 21, 778, 22, 777, 23, 776, 24, 774, 26, 773, 27, 772, 28, 770, 30, 769, 31, 768, 32, 766, 34, 765, 35, 764, 36, 763, 37, 762, 38, 760, 39, 760, 40, 760, 40, 759, 40, 759, 37, 762, 35, 766, 33, 768, 31, 769, 30, 771, 29, 771, 29, 772, 28, 772, 29, 772, 28, 772, 29, 772, 30, 772, 13, 3, 13, 774, 3, 14, 9, 128419)))
    val maskKeys = expectedMask.keySet.toArray
    for (i <- 0 to maskKeys.length - 1) {
      val key = maskKeys(i).asInstanceOf[Integer].toInt
      val maskValues = expectedMask.apply[Tensor[Float]](key)
      val value = outMasks(key - 1)
      maskValues.almostEqual(value, 1)
    }

    val expectedBBox = Tensor[Float](T(
      T(359.4648, 344.7227, 419.7825, 415.5826),
      T(453.1522, 334.3315, 501.1705, 421.0176),
      T(942.7654, 292.9069, 999.7523, 358.1204),
      T(993.7571, 297.5816, 1018.6810, 345.1978),
      T(980.4796, 253.2323, 992.5759, 278.4875),
      T(985.8417, 252.9171, 995.6226, 281.1850),
      T(975.4414, 254.2575, 987.0934, 275.7443),
      T(896.1373, 313.2400, 931.5672, 374.0488),
      T(952.8575, 314.9540, 996.2098, 360.9853),
      T(921.4911, 284.3484, 988.0775, 343.6074),
      T(977.9693, 308.9249, 1004.4815, 351.7527),
      T(949.4941, 295.6840, 981.8075, 335.6603),
      T(866.8826, 337.7082, 907.4388, 386.9977),
      T(970.6074, 296.2614, 1015.4398, 349.3472),
      T(1052.2827, 306.5223, 1063.3223, 337.4540),
      T( 973.4485, 307.2058, 998.9310, 339.6187),
      T( 871.1727, 318.4342, 923.3215, 383.5176),
      T( 883.4898, 331.6453, 910.9511, 379.8238),
      T( 922.5219, 285.9380, 957.7973, 338.0446),
      T( 916.7671, 314.6682, 996.5461, 384.1572),
      T( 989.5474, 255.2382, 999.1593, 282.3305),
      T( 959.0654, 297.3557, 997.5435, 337.0765),
      T( 931.9264, 344.0161, 1001.4952, 384.5714),
      T( 944.2170, 249.2393, 1062.9771, 337.2081),
      T( 921.8297, 249.6249, 1065.0000, 333.6861),
      T( 587.4909, 207.1821, 744.0966, 258.9776),
      T( 146.7835, 237.2273, 204.3738, 257.4573),
      T( 242.7008, 240.0408, 256.0341, 253.2762),
      T( 293.7153, 239.6023, 341.6818, 251.3944),
      T( 493.9839, 227.9635, 517.6334, 251.1486),
      T( 518.7712, 212.1742, 592.9564, 250.9497),
      T( 468.7414, 230.5153, 513.8766, 248.7726),
      T( 543.5923, 221.0722, 587.7577, 249.7338),
      T( 381.9234, 229.3435, 451.7597, 246.1363),
      T( 201.3457, 240.2068, 213.4665, 253.8796),
      T( 146.5625, 247.9995, 210.5252, 258.7644),
      T( 254.5318, 244.3242, 293.3817, 252.6587),
      T( 471.3326, 238.6808, 514.0198, 252.7766),
      T( 509.0908, 224.4982, 529.2344, 255.8907),
      T( 287.4272, 242.2798, 305.3281, 251.1286),
      T( 536.7642, 215.5787, 590.4665, 239.3698),
      T( 125.2171, 243.9744, 198.4265, 258.3085),
      T( 933.4740, 275.6440, 1045.8156, 304.1557),
      T( 511.4533, 242.5052, 530.3216, 255.7836),
      T( 126.7071, 249.5205, 149.3576, 257.5415),
      T( 471.4401, 238.8418, 501.8425, 247.6842),
      T( 509.2099, 234.7784, 574.7255, 258.6571),
      T( 821.9435, 233.9751, 866.3505, 241.7147),
      T( 212.9085, 239.7381, 253.9352, 254.2726),
      T( 925.5219, 274.2933, 1030.0034, 327.5317),
      T( 964.6575, 248.6210, 1063.6282, 308.8153),
      T( 486.3723, 221.3730, 581.9128, 256.2294),
      T( 471.9031, 228.1445, 543.9926, 254.7226),
      T( 117.7000, 229.4729, 206.8829, 257.2673),
      T( 348.3199, 225.7574, 462.2884, 248.5971),
      T( 501.0192, 191.5446, 592.9208, 257.1713),
      T( 430.5654, 382.5406, 543.2626, 412.4271),
      T( 276.3342, 432.4406, 327.4404, 494.2536),
      T( 264.3383, 464.8788, 283.9221, 474.4892),
      T( 126.8237, 607.1029, 332.8095, 714.4706),
      T( 408.4129, 400.1710, 439.2040, 454.2181),
      T( 919.0250, 346.2679, 1002.2537, 386.6497),
      T( 867.3154, 337.0943, 909.0655, 386.7977),
      T( 409.4522, 400.8844, 438.9731, 456.2548),
      T( 415.0092, 392.9026, 464.0328, 449.2130),
      T( 127.4222, 608.2464, 332.5010, 714.0272),
      T( 868.3989, 340.8422, 913.6042, 387.3757),
      T( 869.8809, 344.9059, 972.6536, 387.6791),
      T( 923.9782, 346.9974, 1002.3323, 386.0760),
      T( 922.6125, 351.4860, 1001.9156, 385.4829),
      T( 257.7678, 407.8460, 278.5858, 426.5238),
      T( 924.9070, 347.3515, 1001.5031, 386.1269),
      T( 867.5575, 344.1192, 905.8793, 387.5363)))

    val expectedLabel = Tensor[Float](
      T(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 14, 15, 15, 16, 16, 17, 17, 17, 17,
        17, 18, 18, 18, 19, 20, 20, 25))


    out2.apply[Tensor[Float]](RoiLabel.BBOXES) should be(expectedBBox)
    out2.apply[Tensor[Float]](RoiLabel.CLASSES) should be(expectedLabel)
    println("done")
  }

  "NMS" should "be ok" in {
    val boxes = Tensor[Float](T(
      T(18.0357, 0.0000, 41.2893, 37.1173),
      T(30.0285, 6.2588, 53.1850, 39.0000),
      T(26.0422, 0.0000, 49.1954, 39.0000),
      T( 5.9485, 14.0573, 29.1708, 39.0000),
      T(42.0456, 0.0000, 57.0000, 37.1553),
      T(21.9588, 14.0357, 45.1161, 39.0000),
      T( 6.0533, 0.0000, 29.4083, 39.0000),
      T( 2.0541, 2.3791, 25.4243, 39.0000),
      T(14.0495, 2.3053, 37.3108, 39.0000),
      T(46.0309, 6.4025, 57.0000, 39.0000),
      T(22.0302, 2.4089, 45.1933, 39.0000),
      T(13.9671, 14.0175, 37.1495, 39.0000),
      T(10.0404, 0.0000, 33.3284, 33.2829),
      T(34.0374, 0.0000, 57.0000, 36.9072),
      T(38.0379, 6.2769, 57.0000, 39.0000),
      T(41.9751, 14.0583, 57.0000, 39.0000),
      T( 0.0000, 0.0000, 13.2693, 33.3124),
      T(38.0422, 0.0000, 57.0000, 28.9761),
      T( 0.0000, 14.0690, 17.1186, 39.0000),
      T( 0.0000, 6.0356, 13.2223, 39.0000),
      T( 0.0000, 0.0000, 17.3122, 39.0000),
      T(22.0270, 0.0000, 45.1928, 25.2032),
      T(46.0094, 0.0000, 57.0000, 33.0826),
      T( 0.0000, 0.0000, 33.7101, 13.0355),
      T( 2.0302, 0.0000, 25.4260, 25.4481),
      T(42.0226, 0.0000, 57.0000, 25.1449),
      T(30.0364, 0.0000, 53.0853, 25.0766),
      T(14.0171, 0.0000, 37.2881, 25.2999),
      T(34.0521, 0.0000, 57.0000, 12.9051),
      T( 0.0000, 3.8999, 57.0000, 39.0000),
      T( 2.0133, 0.0000, 49.6427, 12.9898),
      T(28.0456, 0.0000, 57.0000, 39.0000),
      T( 0.0000, 11.8925, 47.3868, 39.0000),
      T( 8.0708, 11.9606, 57.0000, 39.0000),
      T( 0.0000, 0.0000, 27.2810, 39.0000),
      T( 0.0000, 0.0000, 47.4577, 35.2592),
      T( 0.0000, 0.0000, 57.0000, 39.0000),
      T( 0.0000, 0.0000, 57.0000, 39.0000),
      T(21.9457, 0.0000, 57.0000, 12.8811),
      T( 0.0000, 0.0000, 57.0000, 39.0000),
      T( 0.0000, 0.0000, 57.0000, 27.0690),
      T(13.8674, 22.0563, 44.9398, 39.0000),
      T(33.8700, 25.9730, 57.0000, 39.0000),
      T( 0.0000, 22.0516, 20.9330, 39.0000),
      T(41.9213, 21.9873, 57.0000, 39.0000),
      T(17.8165, 0.0000, 57.0000, 16.8779),
      T( 1.7646, 18.1004, 32.9480, 39.0000),
      T(11.8512, 0.0000, 57.0000, 35.4317),
      T(29.8503, 22.0435, 57.0000, 39.0000),
      T( 9.7594, 18.0566, 40.9166, 39.0000),
      T(33.7746, 1.9632, 57.0000, 24.9071),
      T( 0.0000, 14.0776, 24.9558, 39.0000),
      T(21.7241, 18.0735, 52.8998, 39.0000),
      T( 0.0000, 0.0000, 29.2906, 29.5339),
      T(41.8249, 0.0000, 57.0000, 17.0812),
      T( 0.0000, 0.0000, 17.3257, 17.4717),
      T( 0.0000, 0.0000, 17.1572, 25.5946),
      T( 0.0000, 0.0000, 45.4454, 17.0065),
      T( 0.0000, 2.0042, 21.2122, 33.4895),
      T(37.8946, 18.1178, 57.0000, 39.0000),
      T( 0.0000, 5.9850, 25.1862, 29.1060),
      T( 1.7353, 6.0499, 33.1671, 37.4231),
      T(21.6518, 26.0054, 57.0000, 39.0000),
      T( 5.7049, 0.0000, 37.2819, 29.4436),
      T(29.7011, 14.0272, 57.0000, 39.0000),
      T(17.7255, 0.0000, 49.0772, 29.2946),
      T(29.6133, 9.9153, 57.0000, 32.7949),
      T( 0.0000, 26.0193, 32.8463, 39.0000),
      T(17.6348, 10.0788, 48.9423, 39.0000),
      T(21.6906, 2.1241, 52.9483, 33.3707),
      T( 5.6194, 0.0000, 53.3307, 21.0163),
      T(13.8104, 0.0000, 45.2210, 17.3200),
      T(13.5956, 9.9687, 57.0000, 32.8566),
      T( 5.7003, 10.0389, 37.0897, 39.0000),
      T(13.7149, 2.0202, 45.0843, 33.2768),
      T( 9.7322, 5.9888, 41.1038, 37.3045),
      T( 5.5910, 26.0368, 52.8697, 39.0000),
      T(29.7840, 0.0000, 57.0000, 17.1027),
      T( 5.7736, 0.0000, 37.3917, 17.4214),
      T( 0.0000, 13.9622, 36.9701, 36.8555),
      T( 0.0000, 9.9967, 45.0663, 32.9533),
      T( 0.0000, 0.0000, 33.2938, 21.2008),
      T( 0.0000, 0.0000, 25.3888, 17.4817),
      T(21.7062, 0.0000, 53.0319, 21.2508),
      T( 9.6736, 0.0000, 41.2481, 21.3898),
      T( 0.0000, 1.9933, 37.2186, 25.1230),
      T( 5.5202, 5.9523, 53.1432, 28.9392),
      T(25.5138, 5.9795, 57.0000, 28.8653),
      T( 0.0000, 10.0011, 28.9181, 33.0324),
      T( 5.5488, 14.0092, 52.8771, 36.8956),
      T( 9.5096, 1.9473, 57.0000, 24.9822),
      T(17.5084, 13.9728, 57.0000, 36.8385),
      T( 0.0000, 22.0156, 40.7790, 39.0000),
      T(17.5165, 22.0209, 57.0000, 39.0000),
      T( 9.5040, 17.9792, 56.7784, 39.0000),
      T( 0.0000, 5.9792, 41.1165, 29.0066)))

    val scores = Tensor[Float](
      T(0.1117, 0.8158, 0.2626, 0.4839, 0.6765, 0.7539, 0.2627, 0.0428, 0.2080,
      0.1180, 0.1217, 0.7356, 0.7118, 0.7876, 0.4183, 0.9014, 0.9969, 0.7565,
      0.2239, 0.3023, 0.1784, 0.8238, 0.5557, 0.9770, 0.4440, 0.9478, 0.7445,
      0.4892, 0.2426, 0.7003, 0.5277, 0.2472, 0.7909, 0.4235, 0.0169, 0.2209,
      0.9535, 0.7064, 0.1629, 0.8902, 0.5163, 0.0359, 0.6476, 0.3430, 0.3182,
      0.5261, 0.0447, 0.5123, 0.9051, 0.5989, 0.4450, 0.7278, 0.4563, 0.3389,
      0.6211, 0.5530, 0.6896, 0.3687, 0.9053, 0.8356, 0.3039, 0.6726, 0.5740,
      0.9233, 0.9178, 0.7590, 0.7775, 0.6179, 0.3379, 0.2170, 0.9454, 0.7116,
      0.1157, 0.6574, 0.3451, 0.0453, 0.9798, 0.5548, 0.6868, 0.4920, 0.0748,
      0.9605, 0.3271, 0.0103, 0.9516, 0.2855, 0.2324, 0.9141, 0.7668, 0.1659,
      0.4393, 0.2243, 0.8935, 0.0497, 0.1780, 0.3011))

    val thresh = 0.5f
    val inds = new Array[Int](scores.nElement())
    val nms = new Nms
    val keepN = nms.nms(scores, boxes, thresh, inds)

    val expectedOutput = Array[Float](2.0f, 5.0f, 8.0f, 9.0f, 16.0f,
      21.0f, 23.0f, 24.0f, 25.0f, 36.0f, 42.0f, 43.0f, 49.0f, 55.0f,
      64.0f, 76.0f, 77.0f, 84.0f, 87.0f, 88.0f)

    for (i <- 0 to keepN - 1) {
      require(expectedOutput.contains(inds(i) - 1), s"${i} ${inds(i)}")
    }
  }
}
