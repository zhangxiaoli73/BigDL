/*
 * Copyright 2016 The BigDL Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intel.analytics.bigdl.nn

import com.intel.analytics.bigdl.models.mask.MaskInference
import com.intel.analytics.bigdl.models.maskrcnn.{MaskRCNN, MaskUtils}
import com.intel.analytics.bigdl.models.resnet.ResNetMask
import com.intel.analytics.bigdl.nn.mkldnn.Equivalent
import com.intel.analytics.bigdl.tensor.Tensor
import com.intel.analytics.bigdl.utils.{RandomGenerator, T, Table}
import org.scalatest.{FlatSpec, Matchers, path}

class MaskRCNNSpec extends FlatSpec with Matchers {
  "build maskrcnn" should "be ok" in {
    RandomGenerator.RNG.setSeed(100)
    val resNetOutChannels = 32
    val backboneOutChannels = 32
    val mask = new MaskRCNN(resNetOutChannels, backboneOutChannels)
    mask.evaluate()
    val input = Tensor[Float](1, 3, 224, 256).rand()
    val output = mask.forward(input)

    println("done")
  }

  "build maskrcnn with loaded weight" should "be ok" in {
    val resNetOutChannels = 256
    val backboneOutChannels = 256
    val mask = new MaskRCNN(resNetOutChannels, backboneOutChannels)

    val params = mask.getParametersTable()
    val keys = params.keySet
    val path = "/home/zhangli/workspace/tmp/mask/maskrcnn-benchmark/demo/weight/"
    for(i <- keys) {
      // for weight
      var p = params.get[Table](i).get.get[Tensor[Float]]("weight").get
      var size = p.size()
      var name = path + i.toString + ".weight"
      if (size(0) != 1) {
        size.foreach(n => name = name + s"_${n}")
      } else {
        size.slice(1, size.length).foreach(n => name = name + s"_${n}")
      }

      name = name + ".txt"
      val weight = MaskUtils.loadWeight(name, size)
      p.set(weight)

      // for bias
      p = params.get[Table](i).get.get[Tensor[Float]]("bias").getOrElse(null)
      if (p != null) {
        size = p.size()
        name = path + i.toString + ".bias"
        size.foreach(n => name = name + s"_${n}")
        name = name + ".txt"
        val bias = MaskUtils.loadWeight(name, size)
        p.set(bias)
      }

      println(s"${i} done")
    }

    val input = MaskUtils.loadWeight(path + "input.txt", Array(1, 3, 800, 1088))

    mask.evaluate()
    val out = mask.forward(input).toTable

    val expectedBbox = Tensor[Float](T(
      T( 453.1522,  334.3315,  501.1705,  421.0176),
      T(359.4648,  344.7227,  419.7825,  415.5826),
      T( 896.1373,  313.2400,  931.5672,  374.0488),
      T( 993.7571,  297.5816, 1018.6810,  345.1978),
      T( 942.7654,  292.9069,  999.7523,  358.1204),
      T( 985.8417,  252.9171,  995.6226,  281.1850),
      T( 980.4796,  253.2323,  992.5759,  278.4875),
      T( 871.1727,  318.4342,  923.3215,  383.5176),
      T( 975.4414,  254.2575,  987.0934,  275.7443),
      T( 949.4941,  295.6840,  981.8075,  335.6603),
      T( 952.8575,  314.9540,  996.2098,  360.9853),
      T( 916.7671,  314.6682,  996.5461,  384.1572),
      T( 970.6074,  296.2614, 1015.4398,  349.3472),
      T( 883.4898,  331.6453,  910.9511,  379.8238),
      T( 921.4911,  284.3484,  988.0775,  343.6074),
      T( 959.0654,  297.3557,  997.5435,  337.0765),
      T( 977.9693,  308.9249, 1004.4815,  351.7527),
      T( 866.8826,  337.7082,  907.4388,  386.9977),
      T( 922.5219,  285.9380,  957.7973,  338.0446),
      T( 973.4485,  307.2058,  998.9310,  339.6187),
      T(1052.2827,  306.5223, 1063.3223,  337.4540),
      T( 989.5474,  255.2382,  999.1593,  282.3305),
      T( 931.9264,  344.0161, 1001.4952,  384.5714), // 1 end
      T( 944.2170,  249.2393, 1062.9771,  337.2081), // 8 end
      T( 587.4909,  207.1821,  744.0966,  258.9776),
      T( 921.8297,  249.6249, 1065.0000,  333.6861),
      T( 146.7835,  237.2273,  204.3738,  257.4573),
      T( 518.7712,  212.1742,  592.9564,  250.9497),
      T( 242.7008,  240.0408,  256.0341,  253.2762),
      T( 543.5923,  221.0722,  587.7577,  249.7338),
      T( 468.7414,  230.5153,  513.8766,  248.7726),
      T( 925.5219,  274.2933, 1030.0034,  327.5317),
      T( 493.9839,  227.9635,  517.6334,  251.1486),
      T( 509.0908,  224.4982,  529.2344,  255.8907),
      T( 821.9435,  233.9751,  866.3505,  241.7147),
      T( 201.3457,  240.2068,  213.4665,  253.8796),
      T( 293.7153,  239.6023,  341.6818,  251.3944),
      T( 254.5318,  244.3242,  293.3817,  252.6587),
      T( 348.3199,  225.7574,  462.2884,  248.5971),
      T( 381.9234,  229.3435,  451.7597,  246.1363),
      T( 287.4272,  242.2798,  305.3281,  251.1286),
      T( 212.9085,  239.7381,  253.9352,  254.2726),
      T( 511.4533,  242.5052,  530.3216,  255.7836),
      T( 126.7071,  249.5205,  149.3576,  257.5415),
      T( 964.6575,  248.6210, 1063.6282,  308.8153),
      T( 471.4401,  238.8418,  501.8425,  247.6842),
      T( 933.4740,  275.6440, 1045.8156,  304.1557),
      T( 471.3326,  238.6808,  514.0198,  252.7766),
      T( 117.7000,  229.4729,  206.8829,  257.2673),
      T( 509.2099,  234.7784,  574.7255,  258.6571),
      T( 125.2171,  243.9744,  198.4265,  258.3085),
      T( 536.7642,  215.5787,  590.4665,  239.3698),
      T( 486.3723,  221.3730,  581.9128,  256.2294),
      T( 146.5625,  247.9995,  210.5252,  258.7644),
      T( 471.9031,  228.1445,  543.9926,  254.7226),
      T( 501.0192,  191.5446,  592.9208,  257.1713), // 99 end
      T( 430.5654,  382.5406,  543.2626,  412.4271), // 14 end
      T( 276.3342,  432.4406,  327.4404,  494.2536),
      T( 264.3383,  464.8788,  283.9221,  474.4892), // 15 end
      T( 126.8237,  607.1029,  332.8095,  714.4706),
      T( 408.4129,  400.1710,  439.2040,  454.2181), // 16 end
      T( 127.4222,  608.2464,  332.5010,  714.0272),
      T( 409.4522,  400.8844,  438.9731,  456.2548),
      T( 919.0250,  346.2679, 1002.2537,  386.6497),
      T( 415.0092,  392.9026,  464.0328,  449.2130),
      T( 867.3154,  337.0943,  909.0655,  386.7977), // 17 end
      T( 923.9782,  346.9974, 1002.3323,  386.0760),
      T( 868.3989,  340.8422,  913.6042,  387.3757),
      T( 869.8809,  344.9059,  972.6536,  387.6791), // 18 end
      T( 922.6125,  351.4860, 1001.9156,  385.4829), // 19 end
      T( 924.9070,  347.3515, 1001.5031,  386.1269),
      T( 257.7678,  407.8460,  278.5858,  426.5238),  // 10 end
      T( 867.5575,  344.1192,  905.8793,  387.5363))) // 25 end

    val expectedLabel = Tensor[Float](
      T( 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
      9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
      9,  9, 14, 15, 15, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 19, 20, 20,
      25))


    out[Tensor[Float]](2) should be(expectedLabel)
//    Equivalent.nearequals(out[Tensor[Float]](1), expectedBbox, 1e-3) should be (true)
    println("done")
  }

  "NMS" should "be ok" in {
    val boxes = Tensor[Float](T(
      T(18.0357, 0.0000, 41.2893, 37.1173),
      T(30.0285, 6.2588, 53.1850, 39.0000),
      T(26.0422, 0.0000, 49.1954, 39.0000),
      T( 5.9485, 14.0573, 29.1708, 39.0000),
      T(42.0456, 0.0000, 57.0000, 37.1553),
      T(21.9588, 14.0357, 45.1161, 39.0000),
      T( 6.0533, 0.0000, 29.4083, 39.0000),
      T( 2.0541, 2.3791, 25.4243, 39.0000),
      T(14.0495, 2.3053, 37.3108, 39.0000),
      T(46.0309, 6.4025, 57.0000, 39.0000),
      T(22.0302, 2.4089, 45.1933, 39.0000),
      T(13.9671, 14.0175, 37.1495, 39.0000),
      T(10.0404, 0.0000, 33.3284, 33.2829),
      T(34.0374, 0.0000, 57.0000, 36.9072),
      T(38.0379, 6.2769, 57.0000, 39.0000),
      T(41.9751, 14.0583, 57.0000, 39.0000),
      T( 0.0000, 0.0000, 13.2693, 33.3124),
      T(38.0422, 0.0000, 57.0000, 28.9761),
      T( 0.0000, 14.0690, 17.1186, 39.0000),
      T( 0.0000, 6.0356, 13.2223, 39.0000),
      T( 0.0000, 0.0000, 17.3122, 39.0000),
      T(22.0270, 0.0000, 45.1928, 25.2032),
      T(46.0094, 0.0000, 57.0000, 33.0826),
      T( 0.0000, 0.0000, 33.7101, 13.0355),
      T( 2.0302, 0.0000, 25.4260, 25.4481),
      T(42.0226, 0.0000, 57.0000, 25.1449),
      T(30.0364, 0.0000, 53.0853, 25.0766),
      T(14.0171, 0.0000, 37.2881, 25.2999),
      T(34.0521, 0.0000, 57.0000, 12.9051),
      T( 0.0000, 3.8999, 57.0000, 39.0000),
      T( 2.0133, 0.0000, 49.6427, 12.9898),
      T(28.0456, 0.0000, 57.0000, 39.0000),
      T( 0.0000, 11.8925, 47.3868, 39.0000),
      T( 8.0708, 11.9606, 57.0000, 39.0000),
      T( 0.0000, 0.0000, 27.2810, 39.0000),
      T( 0.0000, 0.0000, 47.4577, 35.2592),
      T( 0.0000, 0.0000, 57.0000, 39.0000),
      T( 0.0000, 0.0000, 57.0000, 39.0000),
      T(21.9457, 0.0000, 57.0000, 12.8811),
      T( 0.0000, 0.0000, 57.0000, 39.0000),
      T( 0.0000, 0.0000, 57.0000, 27.0690),
      T(13.8674, 22.0563, 44.9398, 39.0000),
      T(33.8700, 25.9730, 57.0000, 39.0000),
      T( 0.0000, 22.0516, 20.9330, 39.0000),
      T(41.9213, 21.9873, 57.0000, 39.0000),
      T(17.8165, 0.0000, 57.0000, 16.8779),
      T( 1.7646, 18.1004, 32.9480, 39.0000),
      T(11.8512, 0.0000, 57.0000, 35.4317),
      T(29.8503, 22.0435, 57.0000, 39.0000),
      T( 9.7594, 18.0566, 40.9166, 39.0000),
      T(33.7746, 1.9632, 57.0000, 24.9071),
      T( 0.0000, 14.0776, 24.9558, 39.0000),
      T(21.7241, 18.0735, 52.8998, 39.0000),
      T( 0.0000, 0.0000, 29.2906, 29.5339),
      T(41.8249, 0.0000, 57.0000, 17.0812),
      T( 0.0000, 0.0000, 17.3257, 17.4717),
      T( 0.0000, 0.0000, 17.1572, 25.5946),
      T( 0.0000, 0.0000, 45.4454, 17.0065),
      T( 0.0000, 2.0042, 21.2122, 33.4895),
      T(37.8946, 18.1178, 57.0000, 39.0000),
      T( 0.0000, 5.9850, 25.1862, 29.1060),
      T( 1.7353, 6.0499, 33.1671, 37.4231),
      T(21.6518, 26.0054, 57.0000, 39.0000),
      T( 5.7049, 0.0000, 37.2819, 29.4436),
      T(29.7011, 14.0272, 57.0000, 39.0000),
      T(17.7255, 0.0000, 49.0772, 29.2946),
      T(29.6133, 9.9153, 57.0000, 32.7949),
      T( 0.0000, 26.0193, 32.8463, 39.0000),
      T(17.6348, 10.0788, 48.9423, 39.0000),
      T(21.6906, 2.1241, 52.9483, 33.3707),
      T( 5.6194, 0.0000, 53.3307, 21.0163),
      T(13.8104, 0.0000, 45.2210, 17.3200),
      T(13.5956, 9.9687, 57.0000, 32.8566),
      T( 5.7003, 10.0389, 37.0897, 39.0000),
      T(13.7149, 2.0202, 45.0843, 33.2768),
      T( 9.7322, 5.9888, 41.1038, 37.3045),
      T( 5.5910, 26.0368, 52.8697, 39.0000),
      T(29.7840, 0.0000, 57.0000, 17.1027),
      T( 5.7736, 0.0000, 37.3917, 17.4214),
      T( 0.0000, 13.9622, 36.9701, 36.8555),
      T( 0.0000, 9.9967, 45.0663, 32.9533),
      T( 0.0000, 0.0000, 33.2938, 21.2008),
      T( 0.0000, 0.0000, 25.3888, 17.4817),
      T(21.7062, 0.0000, 53.0319, 21.2508),
      T( 9.6736, 0.0000, 41.2481, 21.3898),
      T( 0.0000, 1.9933, 37.2186, 25.1230),
      T( 5.5202, 5.9523, 53.1432, 28.9392),
      T(25.5138, 5.9795, 57.0000, 28.8653),
      T( 0.0000, 10.0011, 28.9181, 33.0324),
      T( 5.5488, 14.0092, 52.8771, 36.8956),
      T( 9.5096, 1.9473, 57.0000, 24.9822),
      T(17.5084, 13.9728, 57.0000, 36.8385),
      T( 0.0000, 22.0156, 40.7790, 39.0000),
      T(17.5165, 22.0209, 57.0000, 39.0000),
      T( 9.5040, 17.9792, 56.7784, 39.0000),
      T( 0.0000, 5.9792, 41.1165, 29.0066)))

    val scores = Tensor[Float](
      T(0.1117, 0.8158, 0.2626, 0.4839, 0.6765, 0.7539, 0.2627, 0.0428, 0.2080,
      0.1180, 0.1217, 0.7356, 0.7118, 0.7876, 0.4183, 0.9014, 0.9969, 0.7565,
      0.2239, 0.3023, 0.1784, 0.8238, 0.5557, 0.9770, 0.4440, 0.9478, 0.7445,
      0.4892, 0.2426, 0.7003, 0.5277, 0.2472, 0.7909, 0.4235, 0.0169, 0.2209,
      0.9535, 0.7064, 0.1629, 0.8902, 0.5163, 0.0359, 0.6476, 0.3430, 0.3182,
      0.5261, 0.0447, 0.5123, 0.9051, 0.5989, 0.4450, 0.7278, 0.4563, 0.3389,
      0.6211, 0.5530, 0.6896, 0.3687, 0.9053, 0.8356, 0.3039, 0.6726, 0.5740,
      0.9233, 0.9178, 0.7590, 0.7775, 0.6179, 0.3379, 0.2170, 0.9454, 0.7116,
      0.1157, 0.6574, 0.3451, 0.0453, 0.9798, 0.5548, 0.6868, 0.4920, 0.0748,
      0.9605, 0.3271, 0.0103, 0.9516, 0.2855, 0.2324, 0.9141, 0.7668, 0.1659,
      0.4393, 0.2243, 0.8935, 0.0497, 0.1780, 0.3011))

    val thresh = 0.5f
    val inds = new Array[Int](scores.nElement())
    val nms = new Nms
    val keepN = nms.nms(scores, boxes, thresh, inds)

    val expectedOutput = Array[Float](2.0f, 5.0f, 8.0f, 9.0f, 16.0f,
      21.0f, 23.0f, 24.0f, 25.0f, 36.0f, 42.0f, 43.0f, 49.0f, 55.0f,
      64.0f, 76.0f, 77.0f, 84.0f, 87.0f, 88.0f)

    for (i <- 0 to keepN - 1) {
      require(expectedOutput.contains(inds(i) - 1), s"${i} ${inds(i)}")
    }
  }
}
